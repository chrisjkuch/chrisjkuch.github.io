---
layout: post
title:  "Chicago 'L' Ridership"
date:   2017-05-06 08:00:00 -0500
categories: jekyll datascope
---

This Jupyter Notebook analyzes the ridership of the Chicago e"L"evated public transportation system. Ridership numbers (measured as entrances to a given station) come from Chicago's open data portal, found here: https://data.cityofchicago.org/Transportation/CTA-Ridership-L-Station-Entries-Daily-Totals/5neh-572f


```python
# Import pandas for our data analysis
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
plt.style.use('ggplot')
```

The questions of interest are: 

1. Which stop has the highest average ridership per day, and what is it?
2. Which stop has the greatest standard deviation in weekday (exclude holidays) ridership per day, and what is it?

I will go about this by importing the data into a pandas DataFrame, then grouping the ridership numbers by station and filtering as appropriate to determine the variables of interest.


```python
# Import and format the ridership data
ridership = pd.read_csv('ridership.csv')
ridership.date = pd.to_datetime(ridership.date, dayfirst=False, format='%m/%d/%Y')
print(ridership.head())
print(ridership.shape)
print(ridership.dtypes)
```

       station_id         stationname       date daytype  rides
    0       40010  Austin-Forest Park 2001-01-01       U    290
    1       40020         Harlem-Lake 2001-01-01       U    633
    2       40030        Pulaski-Lake 2001-01-01       U    483
    3       40040        Quincy/Wells 2001-01-01       U    374
    4       40050               Davis 2001-01-01       U    804
    (826894, 5)
    station_id              int64
    stationname            object
    date           datetime64[ns]
    daytype                object
    rides                   int64
    dtype: object


So we now have the full dataset in our DataFrame - 826,894 entries.

## Question 1
Now let's try to answer the first question about highest average ridership. We'll accomplish this by using pandas' `groupby` functionality to group the DataFrame by each `stationname`, take the mean of the number of rides over the whole time period, then sort by that average to find the highest-ridership stations.


```python
# Calculate the ridership grouped by the name of the station
mean_ridership = ridership.groupby(by='stationname')['rides'].mean()
mean_ridership.sort_values(ascending=False, inplace=True)
mean_ridership.head()
```




    stationname
    Clark/Lake            13661.190402
    Lake/State            13299.597592
    Chicago/State         12944.953208
    95th/Dan Ryan         10859.289046
    Belmont-North Main    10440.290384
    Name: rides, dtype: float64



### Question 1 Answer
So it looks like *Clark/Lake* is the stop with the highest average ridership over the time period measured, with about 13,661 riders per day entering at that station. To make sure we didn't make any errors in our analysis, let's just take a quick look at *only* the Clark/Lake numbers


```python
# Sanity check
ridership[ridership['stationname'] == 'Clark/Lake'].describe()
```




<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>station_id</th>
      <th>rides</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>5814.0</td>
      <td>5814.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>40380.0</td>
      <td>13661.190402</td>
    </tr>
    <tr>
      <th>std</th>
      <td>0.0</td>
      <td>6590.492180</td>
    </tr>
    <tr>
      <th>min</th>
      <td>40380.0</td>
      <td>601.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>40380.0</td>
      <td>6184.000000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>40380.0</td>
      <td>15913.000000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>40380.0</td>
      <td>19027.750000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>40380.0</td>
      <td>30295.000000</td>
    </tr>
  </tbody>
</table>
</div>




```python
# Plot stops at Clark/Lake over the entire timeframe
clark_and_lake = ridership[ridership['stationname'] == 'Clark/Lake']
fh = plt.figure(figsize=(16,5))
ah = fh.add_subplot(111)
clark_and_lake.plot(x='date', y='rides', ax=ah)
plt.ylabel('Number of riders')
plt.show()
```


![png](/assets/dscope/output_9_0.png)


And a histogram:


```python
# Create a histogram showing the frequency with which a given number of riders stopped at Clark/Lake each day
fh = plt.figure(figsize=(9,6))
ah = fh.add_subplot(111)
clark_and_lake.hist(column='rides', ax=ah, sharex=True)
plt.xlabel('Number of riders per day')
plt.ylabel('Frequency')
plt.show()
```


![png](/assets/dscope/output_11_0.png)



## Question 2

Now, when we looked at the first few entries in the DataFrame, we also saw a column entitled `daytype`. The API Docs give us the following useful information:

>This list shows daily totals of ridership, by station entry, for each 'L' station dating back to 2001. Dataset shows entries at all turnstiles, combined, for each station. Daytypes are as follows: W=Weekday, A=Saturday, U=Sunday/Holiday. See attached readme file for information on how these numbers are calculated.

>From https://dev.socrata.com/foundry/data.cityofchicago.org/mh5w-x5kh
    
So now we know that it should be easy enough for us to sort through the day for the second question. 


```python
# Get only weekday values
weekday_ridership = ridership[ridership.daytype == 'W']
stddev_wd_ridership = weekday_ridership.groupby(by='stationname')['rides'].std()
stddev_wd_ridership.sort_values(ascending=False, inplace=True)
stddev_wd_ridership.head()
```




    stationname
    Lake/State            4292.931370
    Washington/State      3890.640503
    Addison-North Main    3289.670003
    Clark/Lake            2742.644346
    Fullerton             2602.717176
    Name: rides, dtype: float64



### Question 2 Answer
It looks like Lake/State is the station that has the highest standard deviation in weekday ridership at 4293 riders per day. Let's quickly plot that so we can see what it looks like in a timeseries:


```python
# Visualize Lake/State ridership across entire timeframe
lake_and_state = ridership[ridership['stationname'] == 'Lake/State']
fh = plt.figure(figsize=(16,5))
ah = fh.add_subplot(111)
lake_and_state.plot(x='date', y='rides', ax=ah)
plt.show()
```


![png](/assets/dscope/output_15_0.png)



```python
# Visualize histogram of frequency with which a certain number of riders entered at Lake/State
fh = plt.figure(figsize=(16,5))
ah = fh.add_subplot(111)
lake_and_state.hist(column='rides', ax=ah)
plt.xlabel('Number of riders per day')
plt.ylabel('Frequency')
plt.show()
```


![png](/assets/dscope/output_16_0.png)


## Analysis: Answering questions about ridership and sales

Let's explore a few ways we might analyze this data to look and compare for trends with sales.


```python
# Use groupby to get the data associated with each individual station
by_station = ridership.groupby(by='stationname')

# Get a visually dense timeseries plot to get a feel for the data
fh = plt.figure(figsize=(16,9))
ax = fh.add_subplot(111)
for station, df in by_station:
    df.plot(x='date', y='rides', ax=ax, label=station, legend=False, style={'linestyle':'None', 'marker': '.'})

daterange = plt.xlim()
plt.ylabel('Number of riders / day')
plt.xlabel('Date')
plt.show()
```


![png](/assets/dscope/output_18_0.png)


Well, that is not very useful. Let's calculate a moving average to smooth out the noise, and only look at the top 10 stations by average ridership to limit the distracting and dense data.


```python
top_stations = mean_ridership.head(10).index.tolist()
# Get a useless but visually cool timeseries plot to get a feel for the data
fh = plt.figure(figsize=(12,9))
ax = fh.add_subplot(111)
for station, df in by_station:
    if station not in top_stations:
        continue
    # Take a 1-year rolling average of ridership
    df['rides'] = pd.rolling_mean(df['rides'], 365)
    df.plot(x='date', y='rides', ax=ax, label=station, legend=True)

daterange = plt.xlim()
plt.title('1-Year Rolling Average of Daily Ridership')
plt.ylabel('Number of riders / day')
plt.xlabel('Date')
plt.show()
```

    /home/chris/anaconda3/lib/python3.5/site-packages/ipykernel/__main__.py:9: FutureWarning: pd.rolling_mean is deprecated for Series and will be removed in a future version, replace with 
    	Series.rolling(center=False,window=365).mean()
    /home/chris/anaconda3/lib/python3.5/site-packages/ipykernel/__main__.py:9: SettingWithCopyWarning: 
    A value is trying to be set on a copy of a slice from a DataFrame.
    Try using .loc[row_indexer,col_indexer] = value instead
    
    See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy



![png](/assets/dscope/output_20_1.png)


Interesting! We can see that although Clark/Lake has the highest average ridership over the time frame, Lake/State has been growing the most quickly and currently has the highest average ridership over the last year. We can also see why Lake/State has the highest variance in our dataset - it varies substantially over the time period in addition to normal weekly variability. It's also possibly a bit surprising, since Clark/Lake serves several lines (Blue, Green, Brown, Pink, Orange, and Purple (express)) and Lake/State only serves the Red line).

Let's drill into Lake/State and look at the weekly, monthly, and yearly trends more closely to see how we might use this information to choose a hypothetical new opening location.


```python
import datetime
from dateutil.relativedelta import relativedelta
lake_state = ridership[ridership.stationname == 'Lake/State']
last_year = lake_state[lake_state.date > (lake_state.date.max() -  relativedelta(years=1))]
last_year.plot(x='date', y='rides', figsize=(16,5))
plt.ylabel('Ride entries')
```




    <matplotlib.text.Text at 0x7f9ce72b39b0>




![png](/assets/dscope/output_22_1.png)



```python
by_daytype = last_year.groupby('daytype')
fig_h = plt.figure(figsize=(16,5))
ax_h = fig_h.add_subplot(111)
for daytype, ride_data in by_daytype:
    ride_data.plot(x='date', y='rides', ax=ax_h, label=daytype, style='.')
plt.ylabel('Ride entries')
plt.show()
```


![png](/assets/dscope/output_23_0.png)


These figures would be useful as a point of comparison to our daily sales records for a location close to this CTA stop. It might also be a good point of comparison for a more residential stop to look for downtown vs. neighborhood location performance.

## Making an interactive, data-layered map

When deciding whether to rent a new location, it might be very useful to have a map we can look at to visualize these ridership numbers and the proximity of potential locations to CTA stops. 

My idea for this map consists of differently colored circles placed on a real map colored based on the L line and sized based on the mean ridership numbers. Stops with multiple lines will have multiple circles in a Venn diagram, all the same size. Potential locations for rent can then be added to the map and visually compared for their proximity to different CTA lines.


```python
import folium
```

Let's import the station locations from the open data portal.


```python
station_locations = pd.read_json('https://data.cityofchicago.org/resource/8mj8-j3c4.json')
station_locations = station_locations.iloc[:,5:]
station_locations.g = [1.0 if station_locations.g[i] else 0.0 for i in range(station_locations.shape[0])]
station_locations.head(5)
```




<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>ada</th>
      <th>blue</th>
      <th>brn</th>
      <th>direction_id</th>
      <th>g</th>
      <th>location</th>
      <th>map_id</th>
      <th>o</th>
      <th>p</th>
      <th>pexp</th>
      <th>pnk</th>
      <th>red</th>
      <th>station_descriptive_name</th>
      <th>station_name</th>
      <th>stop_id</th>
      <th>stop_name</th>
      <th>y</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>True</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>W</td>
      <td>0.0</td>
      <td>{'type': 'Point', 'coordinates': [-87.669147, ...</td>
      <td>40830</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>18th (Pink Line)</td>
      <td>18th</td>
      <td>30162</td>
      <td>18th (54th/Cermak-bound)</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>True</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>E</td>
      <td>0.0</td>
      <td>{'type': 'Point', 'coordinates': [-87.669147, ...</td>
      <td>40830</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>18th (Pink Line)</td>
      <td>18th</td>
      <td>30161</td>
      <td>18th (Loop-bound)</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>True</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>N</td>
      <td>0.0</td>
      <td>{'type': 'Point', 'coordinates': [-87.680622, ...</td>
      <td>40120</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>35th/Archer (Orange Line)</td>
      <td>35th/Archer</td>
      <td>30022</td>
      <td>35th/Archer (Loop-bound)</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>True</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>S</td>
      <td>0.0</td>
      <td>{'type': 'Point', 'coordinates': [-87.680622, ...</td>
      <td>40120</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>35th/Archer (Orange Line)</td>
      <td>35th/Archer</td>
      <td>30023</td>
      <td>35th/Archer (Midway-bound)</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>True</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>S</td>
      <td>1.0</td>
      <td>{'type': 'Point', 'coordinates': [-87.625826, ...</td>
      <td>41120</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>35th-Bronzeville-IIT (Green Line)</td>
      <td>35th-Bronzeville-IIT</td>
      <td>30214</td>
      <td>35-Bronzeville-IIT (63rd-bound)</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
</div>




```python
import numpy as np

# Create references for the names of the stations in the dataframes, and a map
# from the name to the standard CTA color for each line
cta_lines = ['blue', 'brn', 'g', 'o', 'p', 'pexp', 'pnk', 'red', 'y']
cta_colors = {'red': '#c60c30', 'blue': '#00a1de', 'brn': '#62361b', 'g': '#009b3a', 'o': '#f9461c', 'p': '#522398', 
          'pexp': '#8e57e0', 'pnk': '#e27ea6', 'y': '#f9e300'}

# Build dict of station name -> {location, cta_lines at location}
# The CTA stores their data such that for each entry in the station list,
# the box for each line that stops at that station is only checked if it is
# traveling in a given direction. We can just add up the total for each entry
# to have a simple indicator for whether the line stops there.
station_dict = {}
for index, station_data in station_locations.iterrows():
    id_no = station_data['map_id']
    # If the entry already exists, add the lines present to the existing lines
    if id_no in station_dict:
        station_dict[id_no]['cta_lines'] = station_dict[id_no]['cta_lines'] + station_data[cta_lines]
    else:
        station_dict[station_data['map_id']] = {'location': station_data['location']['coordinates'],
                                                  'id': station_data['map_id'], 
                                                  'cta_lines': station_data[cta_lines]}
```


```python
# Create the map
cta_map = folium.Map(location=[41.881832, -87.623177], 
                     tiles='https://api.mapbox.com/styles/v1/mapbox/light-v9/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoiY29vbG1hcHNicm8iLCJhIjoiY2oyY3Fxd2RnMDQ4aDMycXIxM2w4czRiMyJ9.7T7degT1VkMZSLn1Od1hVw', 
                     API_key='pk.eyJ1IjoiY29vbG1hcHNicm8iLCJhIjoiY2oyY3Fxd2RnMDQ4aDMycXIxM2w4czRiMyJ9.7T7degT1VkMZSLn1Od1hVw',
                     attr='Mapbox Light',
                     zoom_start=10)
misses = []
# Iterate through each station
for station_name, station_data in by_station:
    # There are duplicates, so pick out the first one and exctract its data
    id_no = station_data.iloc[0, :].loc['station_id']
    if id_no not in station_dict:
        misses.append(id_no)
        continue
    coords = station_dict[id_no]['location']
    station_loc = [coords[1], coords[0]]

    # Iterate through each of the lines
    for cta_line in cta_lines:
        if station_dict[id_no]['cta_lines'][cta_line] > 0.0:
            # If the line stops at that location, put down a marker!
            # Shift the position slightly based on color to avoid overlap
            shifter = cta_lines.index(cta_line)
            lat_shift = 0.0003 * np.sin(2*np.pi * shifter / len(cta_lines))
            lng_shift = 0.0003 * np.cos(2*np.pi * shifter / len(cta_lines))

            # Shape the marker based on the average ridership, scaled to make the size reasonable
            scaled_radius = np.sqrt(station_data['rides'].mean())
            avg_to_str = str(int(station_data['rides'].mean()))
            popup_string = station_name + ' - ' + avg_to_str + ' daily riders (avg)'

            folium.CircleMarker(location=[station_loc[0] + lat_shift, station_loc[1] + lng_shift],
                    radius=scaled_radius, 
                    popup=popup_string, color=cta_colors[cta_line],
                    fill_color=cta_colors[cta_line]).add_to(cta_map)
cta_map
```




<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><iframe src="data:text/html;base64,CiAgICAgICAgPCFET0NUWVBFIGh0bWw+CiAgICAgICAgPGhlYWQ+CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8bWV0YSBodHRwLWVxdWl2PSJjb250ZW50LXR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1VVEYtOCIgLz4KICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9sZWFmbGV0LzAuNy4zL2xlYWZsZXQuanMiPjwvc2NyaXB0PgogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvanF1ZXJ5LzEuMTEuMS9qcXVlcnkubWluLmpzIj48L3NjcmlwdD4KICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL21heGNkbi5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC8zLjIuMC9qcy9ib290c3RyYXAubWluLmpzIj48L3NjcmlwdD4KICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9MZWFmbGV0LmF3ZXNvbWUtbWFya2Vycy8yLjAuMi9sZWFmbGV0LmF3ZXNvbWUtbWFya2Vycy5taW4uanMiPjwvc2NyaXB0PgogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2xlYWZsZXQubWFya2VyY2x1c3Rlci8wLjQuMC9sZWFmbGV0Lm1hcmtlcmNsdXN0ZXItc3JjLmpzIj48L3NjcmlwdD4KICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9sZWFmbGV0Lm1hcmtlcmNsdXN0ZXIvMC40LjAvbGVhZmxldC5tYXJrZXJjbHVzdGVyLmpzIj48L3NjcmlwdD4KICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvbGVhZmxldC8wLjcuMy9sZWFmbGV0LmNzcyIgLz4KICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4yLjAvY3NzL2Jvb3RzdHJhcC5taW4uY3NzIiAvPgogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL21heGNkbi5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC8zLjIuMC9jc3MvYm9vdHN0cmFwLXRoZW1lLm1pbi5jc3MiIC8+CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vbWF4Y2RuLmJvb3RzdHJhcGNkbi5jb20vZm9udC1hd2Vzb21lLzQuMS4wL2Nzcy9mb250LWF3ZXNvbWUubWluLmNzcyIgLz4KICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvTGVhZmxldC5hd2Vzb21lLW1hcmtlcnMvMi4wLjIvbGVhZmxldC5hd2Vzb21lLW1hcmtlcnMuY3NzIiAvPgogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9sZWFmbGV0Lm1hcmtlcmNsdXN0ZXIvMC40LjAvTWFya2VyQ2x1c3Rlci5EZWZhdWx0LmNzcyIgLz4KICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvbGVhZmxldC5tYXJrZXJjbHVzdGVyLzAuNC4wL01hcmtlckNsdXN0ZXIuY3NzIiAvPgogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vcHl0aG9uLXZpc3VhbGl6YXRpb24vZm9saXVtL21hc3Rlci9mb2xpdW0vdGVtcGxhdGVzL2xlYWZsZXQuYXdlc29tZS5yb3RhdGUuY3NzIiAvPgogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPHN0eWxlPgoKICAgICAgICAgICAgaHRtbCwgYm9keSB7CiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTsKICAgICAgICAgICAgICAgIG1hcmdpbjogMDsKICAgICAgICAgICAgICAgIHBhZGRpbmc6IDA7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAjbWFwIHsKICAgICAgICAgICAgICAgIHBvc2l0aW9uOmFic29sdXRlOwogICAgICAgICAgICAgICAgdG9wOjA7CiAgICAgICAgICAgICAgICBib3R0b206MDsKICAgICAgICAgICAgICAgIHJpZ2h0OjA7CiAgICAgICAgICAgICAgICBsZWZ0OjA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIDwvc3R5bGU+CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPHN0eWxlPiAjbWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiIHsKICAgICAgICAgICAgICAgIHBvc2l0aW9uIDogcmVsYXRpdmU7CiAgICAgICAgICAgICAgICB3aWR0aCA6IDEwMC4wJTsKICAgICAgICAgICAgICAgIGhlaWdodDogMTAwLjAlOwogICAgICAgICAgICAgICAgbGVmdDogMC4wJTsKICAgICAgICAgICAgICAgIHRvcDogMC4wJTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgPC9zdHlsZT4KICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICA8L2hlYWQ+CiAgICAgICAgPGJvZHk+CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9saXVtLW1hcCIgaWQ9Im1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYiIgPjwvZGl2PgogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIDwvYm9keT4KICAgICAgICA8c2NyaXB0PgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgc291dGhXZXN0ID0gTC5sYXRMbmcoLTkwLCAtMTgwKTsKICAgICAgICAgICAgdmFyIG5vcnRoRWFzdCA9IEwubGF0TG5nKDkwLCAxODApOwogICAgICAgICAgICB2YXIgYm91bmRzID0gTC5sYXRMbmdCb3VuZHMoc291dGhXZXN0LCBub3J0aEVhc3QpOwoKICAgICAgICAgICAgdmFyIG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYiA9IEwubWFwKCdtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGInLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXI6WzQxLjg4MTgzMiwtODcuNjIzMTc3XSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvb206IDEwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4Qm91bmRzOiBib3VuZHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcnM6IFtdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JzOiBMLkNSUy5FUFNHMzg1NwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciB0aWxlX2xheWVyXzcyZmNkNzk5MGVmNjRhZWZhNzBhZGNhNTM5ZTg2YzhjID0gTC50aWxlTGF5ZXIoCiAgICAgICAgICAgICAgICAnaHR0cHM6Ly9hcGkubWFwYm94LmNvbS9zdHlsZXMvdjEvbWFwYm94L2xpZ2h0LXY5L3RpbGVzLzI1Ni97en0ve3h9L3t5fT9hY2Nlc3NfdG9rZW49cGsuZXlKMUlqb2lZMjl2YkcxaGNITmljbThpTENKaElqb2lZMm95WTNGeGQyUm5NRFE0YURNeWNYSXhNMnc0Y3pSaU15SjkuN1Q3ZGVnVDFWa01aU0xuMU9kMWhWdycsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbWF4Wm9vbTogMTgsCiAgICAgICAgICAgICAgICAgICAgbWluWm9vbTogMSwKICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGlvbjogJ01hcGJveCBMaWdodCcsCiAgICAgICAgICAgICAgICAgICAgZGV0ZWN0UmV0aW5hOiBmYWxzZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfM2ZiN2Y5Zjg0MWZhNGRiOThiYWRjZTY3ZmViNGFhZDQgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44NTc2NDgxOTI0LC04Ny42NjkyOTddLAogICAgICAgICAgICAgICAgMzUuMDQwMzkxNDU1NywKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyNlMjdlYTYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNlMjdlYTYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfYTE1MDc1Mjk5OWM3NDQ0MGEzNDMzMTY0NjE1MDkzODYgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMDE1Njc2NmJkNmYxNDE0NDg5YjY2ZGE1MmMzMzViMTMgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzAxNTY3NjZiZDZmMTQxNDQ4OWI2NmRhNTJjMzM1YjEzIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICAxOHRoIC0gMTIyNyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfYTE1MDc1Mjk5OWM3NDQ0MGEzNDMzMTY0NjE1MDkzODYuc2V0Q29udGVudChodG1sXzAxNTY3NjZiZDZmMTQxNDQ4OWI2NmRhNTJjMzM1YjEzKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzNmYjdmOWY4NDFmYTRkYjk4YmFkY2U2N2ZlYjRhYWQ0LmJpbmRQb3B1cChwb3B1cF9hMTUwNzUyOTk5Yzc0NDQwYTM0MzMxNjQ2MTUwOTM4Nik7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8xMDcwYWJlMWU2NjE0NDE1ODZmODQ0ZDYzZGZhNjM5MSA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjgzMTk3MjQ0MjMsLTg3LjYyNTc3MzkwNTVdLAogICAgICAgICAgICAgICAgNDMuMzc4MjI0MjA2OCwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMDliM2EnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwMDliM2EnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfNTgwZTcwMTJlYjViNDY5YmE4YmRiZGY2ZTgyZmNmM2IgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZDQxY2EwZTJhMjFmNDgzNmFkZjZmMzhjYjA4YjA4YTQgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sX2Q0MWNhMGUyYTIxZjQ4MzZhZGY2ZjM4Y2IwOGIwOGE0IiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICAzNS1Ccm9uemV2aWxsZS1JSVQgLSAxODgxIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF81ODBlNzAxMmViNWI0NjliYThiZGJkZjZlODJmY2YzYi5zZXRDb250ZW50KGh0bWxfZDQxY2EwZTJhMjFmNDgzNmFkZjZmMzhjYjA4YjA4YTQpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfMTA3MGFiZTFlNjYxNDQxNTg2Zjg0NGQ2M2RmYTYzOTEuYmluZFBvcHVwKHBvcHVwXzU4MGU3MDEyZWI1YjQ2OWJhOGJkYmRmNmU4MmZjZjNiKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzA4YmUwMTMzZWVlMjQ3MjdhZDI5ODc0OTUxM2VkODk3ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODI5NjEyODA3NiwtODcuNjgwNzcyXSwKICAgICAgICAgICAgICAgIDQ3LjEwMzYyMTk3OTQsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjZjk0NjFjJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjZjk0NjFjJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzE1NDExZTU0NDQ2NDQzMWRiZmE1ZDI3NTRkOGI0MTA0ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzA5NjlmMzJjMWMxMjQ2ZGViZGY3MGFjZjE0YTIyYzAxID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF8wOTY5ZjMyYzFjMTI0NmRlYmRmNzBhY2YxNGEyMmMwMSIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgMzV0aC9BcmNoZXIgLSAyMjE4IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8xNTQxMWU1NDQ0NjQ0MzFkYmZhNWQyNzU0ZDhiNDEwNC5zZXRDb250ZW50KGh0bWxfMDk2OWYzMmMxYzEyNDZkZWJkZjcwYWNmMTRhMjJjMDEpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfMDhiZTAxMzNlZWUyNDcyN2FkMjk4NzQ5NTEzZWQ4OTcuYmluZFBvcHVwKHBvcHVwXzE1NDExZTU0NDQ2NDQzMWRiZmE1ZDI3NTRkOGI0MTA0KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzE3NDMxOWQ4MDZiMzRlZjZiYzAyNTNhZjMxNmIwZmMzID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODE2NzU3NDQyMywtODcuNjE4OTY4OTA1NV0sCiAgICAgICAgICAgICAgICAyOC44Njk2NzEwMDIzLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzAwOWIzYScsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzAwOWIzYScsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9mMjAwYmQzZGFjYmQ0NTc0YTlkODIzYTVjZjY2MmI0YyA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF85N2VhMTM2NWQxNDI0YTJhYWUyMTBmNDFiZGRlYWRmYSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfOTdlYTEzNjVkMTQyNGEyYWFlMjEwZjQxYmRkZWFkZmEiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIDQzcmQgLSA4MzMgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2YyMDBiZDNkYWNiZDQ1NzRhOWQ4MjNhNWNmNjYyYjRjLnNldENvbnRlbnQoaHRtbF85N2VhMTM2NWQxNDI0YTJhYWUyMTBmNDFiZGRlYWRmYSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl8xNzQzMTlkODA2YjM0ZWY2YmMwMjUzYWYzMTZiMGZjMy5iaW5kUG9wdXAocG9wdXBfZjIwMGJkM2RhY2JkNDU3NGE5ZDgyM2E1Y2Y2NjJiNGMpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfOTUyZDJkMjBhNzI2NDdjYzhkZDdkOTJlYjQ1OGEyYTIgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44MTAwMjI1NTc3LC04Ny42MzA4ODc5MDU1XSwKICAgICAgICAgICAgICAgIDUxLjM3NzEzNTkwMDQsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjYzYwYzMwJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjYzYwYzMwJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2Y1MjUzNWFhODU3MjQ2NmE5OWVjYWY5ZGI4YjQ5OTMyID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzdjMjQzYjQ0MmM0MDQ4MzU5ODA3NTdiMGY0YzBiOTkyID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF83YzI0M2I0NDJjNDA0ODM1OTgwNzU3YjBmNGMwYjk5MiIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgNDd0aC1EYW4gUnlhbiAtIDI2MzkgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2Y1MjUzNWFhODU3MjQ2NmE5OWVjYWY5ZGI4YjQ5OTMyLnNldENvbnRlbnQoaHRtbF83YzI0M2I0NDJjNDA0ODM1OTgwNzU3YjBmNGMwYjk5Mik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl85NTJkMmQyMGE3MjY0N2NjOGRkN2Q5MmViNDU4YTJhMi5iaW5kUG9wdXAocG9wdXBfZjUyNTM1YWE4NTcyNDY2YTk5ZWNhZjlkYjhiNDk5MzIpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfOTcwZjlmNDVkM2E5NDQ0NzhkMmQ1ZjJlMDkwNDc5MTAgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44MDk1MDQ0NDIzLC04Ny42MTg3NzM5MDU1XSwKICAgICAgICAgICAgICAgIDMzLjU4ODgyNzg3OTcsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDA5YjNhJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDA5YjNhJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzkzZDBhZmI4NzhiNTQzOTdiMWM0Yjc2N2RmZGZhMzJhID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzliMTFjNzY1MmZlNDQxZGViODE3OGY3MTUxMzIyMjZjID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF85YjExYzc2NTJmZTQ0MWRlYjgxNzhmNzE1MTMyMjI2YyIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgNDd0aC1Tb3V0aCBFbGV2YXRlZCAtIDExMjggZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzkzZDBhZmI4NzhiNTQzOTdiMWM0Yjc2N2RmZGZhMzJhLnNldENvbnRlbnQoaHRtbF85YjExYzc2NTJmZTQ0MWRlYjgxNzhmNzE1MTMyMjI2Yyk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl85NzBmOWY0NWQzYTk0NDQ3OGQyZDVmMmUwOTA0NzkxMC5iaW5kUG9wdXAocG9wdXBfOTNkMGFmYjg3OGI1NDM5N2IxYzRiNzY3ZGZkZmEzMmEpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfOWE5ZmZkNDE4ODBjNGQ2ZTg4NWE4ZjFiNzc0YTYzODAgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44MDIzODU0NDIzLC04Ny42MTg0MzQ5MDU1XSwKICAgICAgICAgICAgICAgIDMxLjAxMjU0NjI2OTgsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDA5YjNhJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDA5YjNhJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzRhNTIyYjZhOGViNTRjOGE5Mjg3ZTliYjViNGNjY2JiID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2I3YmQ4NGU3YTM4MTRiNjc5YTEzYzRlYWFmMGIzMGUxID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF9iN2JkODRlN2EzODE0YjY3OWExM2M0ZWFhZjBiMzBlMSIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgNTFzdCAtIDk2MSBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNGE1MjJiNmE4ZWI1NGM4YTkyODdlOWJiNWI0Y2NjYmIuc2V0Q29udGVudChodG1sX2I3YmQ4NGU3YTM4MTRiNjc5YTEzYzRlYWFmMGIzMGUxKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzlhOWZmZDQxODgwYzRkNmU4ODVhOGYxYjc3NGE2MzgwLmJpbmRQb3B1cChwb3B1cF80YTUyMmI2YThlYjU0YzhhOTI4N2U5YmI1YjRjY2NiYik7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8xZjc5ZDQ0ZWVhNjU0NjVlOTY2MzAwNWVlYTY1NTA1MCA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg1MTUxMzUwMjQsLTg3Ljc1Njg0MjAxXSwKICAgICAgICAgICAgICAgIDM5LjAxMzU0MDU2ODcsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjZTI3ZWE2JywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjZTI3ZWE2JywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzI4ZDY2MzU1YTMzMjQzNzVhNzQwNzFhYzU5YmIzODc3ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2E3Zjg2ZjBmNzI2ZjQ1NzI4MTRjNjVmNGEwNTI5YTQ5ID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF9hN2Y4NmYwZjcyNmY0NTcyODE0YzY1ZjRhMDUyOWE0OSIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgNTR0aC9DZXJtYWsgLSAxNTIyIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8yOGQ2NjM1NWEzMzI0Mzc1YTc0MDcxYWM1OWJiMzg3Ny5zZXRDb250ZW50KGh0bWxfYTdmODZmMGY3MjZmNDU3MjgxNGM2NWY0YTA1MjlhNDkpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfMWY3OWQ0NGVlYTY1NDY1ZTk2NjMwMDVlZWE2NTUwNTAuYmluZFBvcHVwKHBvcHVwXzI4ZDY2MzU1YTMzMjQzNzVhNzQwNzFhYzU5YmIzODc3KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2FhYjAwNjhjYTMyMTRmMjVhNGM0NmRmM2YwZTFiYzZhID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuNzgwMjQwNTU3NywtODcuNjMwODk5OTA1NV0sCiAgICAgICAgICAgICAgICA1NC4xODgyNzg1NDI0LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8zOWQ0MThhMGUzZDk0YzgzODhmMzcxMmU1YmZjNGQ2NCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9lMjE2NmMyYzg4OTA0ODk2OTMyZjNiYmExYzY3YmNkNCA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfZTIxNjZjMmM4ODkwNDg5NjkzMmYzYmJhMWM2N2JjZDQiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIDYzcmQtRGFuIFJ5YW4gLSAyOTM2IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8zOWQ0MThhMGUzZDk0YzgzODhmMzcxMmU1YmZjNGQ2NC5zZXRDb250ZW50KGh0bWxfZTIxNjZjMmM4ODkwNDg5NjkzMmYzYmJhMWM2N2JjZDQpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfYWFiMDA2OGNhMzIxNGYyNWE0YzQ2ZGYzZjBlMWJjNmEuYmluZFBvcHVwKHBvcHVwXzM5ZDQxOGEwZTNkOTRjODM4OGYzNzEyZTViZmM0ZDY0KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2MxNjhiYjg1ODNjZDQwYTNhYjUyZjQ0NzVkYWM3YjI5ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuNzY4MDcxNTU3NywtODcuNjI1NjcxOTA1NV0sCiAgICAgICAgICAgICAgICA3MS41MzQzMzI3NDAyLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF81OTY2ODQ2OTEyM2E0ZGU4OWMwYjlkNzYyNjMzYWU5NSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF80M2Y3YzUyZTZmZDQ0NjBmYWRjM2U2MGM5ZjU5YjI0YiA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfNDNmN2M1MmU2ZmQ0NDYwZmFkYzNlNjBjOWY1OWIyNGIiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIDY5dGggLSA1MTE3IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF81OTY2ODQ2OTEyM2E0ZGU4OWMwYjlkNzYyNjMzYWU5NS5zZXRDb250ZW50KGh0bWxfNDNmN2M1MmU2ZmQ0NDYwZmFkYzNlNjBjOWY1OWIyNGIpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfYzE2OGJiODU4M2NkNDBhM2FiNTJmNDQ3NWRhYzdiMjkuYmluZFBvcHVwKHBvcHVwXzU5NjY4NDY5MTIzYTRkZTg5YzBiOWQ3NjI2MzNhZTk1KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzlhZTg4NGYyMzQwNDRkYWNiNmM5YjY2NzU0MmM5ZmNjID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuNzUwMTIzNTU3NywtODcuNjI1MDU5OTA1NV0sCiAgICAgICAgICAgICAgICA4MC45MjYwMDg0Mzg4LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8wYWMwZGRlMWExNTQ0OTg3YjZiYWE0ODczOGEzOTgwNSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8yNzlmZTQ4OGNjMzY0NGM5YWU2ZTgyNzViMWExNTEwYyA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfMjc5ZmU0ODhjYzM2NDRjOWFlNmU4Mjc1YjFhMTUxMGMiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIDc5dGggLSA2NTQ5IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8wYWMwZGRlMWExNTQ0OTg3YjZiYWE0ODczOGEzOTgwNS5zZXRDb250ZW50KGh0bWxfMjc5ZmU0ODhjYzM2NDRjOWFlNmU4Mjc1YjFhMTUxMGMpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfOWFlODg0ZjIzNDA0NGRhY2I2YzliNjY3NTQyYzlmY2MuYmluZFBvcHVwKHBvcHVwXzBhYzBkZGUxYTE1NDQ5ODdiNmJhYTQ4NzM4YTM5ODA1KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2M0MjBlY2Q2NzlhNDRiNzA4NTg2YTc4NjAzN2JkNzZjID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuNzM1MDc2NTU3NywtODcuNjI0NjY0OTA1NV0sCiAgICAgICAgICAgICAgICA2NC44OTI4OTMyNTUxLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8zNWZiYmIxZjFlNDc0OTM0ODY4NDNhY2JhNWFiODBmYSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8xODllMTc4NTU0ZGI0N2FiOGM1ZjMzNThjMzk1MTIyMSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfMTg5ZTE3ODU1NGRiNDdhYjhjNWYzMzU4YzM5NTEyMjEiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIDg3dGggLSA0MjExIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8zNWZiYmIxZjFlNDc0OTM0ODY4NDNhY2JhNWFiODBmYS5zZXRDb250ZW50KGh0bWxfMTg5ZTE3ODU1NGRiNDdhYjhjNWYzMzU4YzM5NTEyMjEpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfYzQyMGVjZDY3OWE0NGI3MDg1ODZhNzg2MDM3YmQ3NmMuYmluZFBvcHVwKHBvcHVwXzM1ZmJiYjFmMWU0NzQ5MzQ4Njg0M2FjYmE1YWI4MGZhKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzZhOGNmZDNlYTRlNzQwYmRhMjU3MzMwMTgzY2JhNzU2ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuNzIyMDgxNTU3NywtODcuNjI0Mjg5OTA1NV0sCiAgICAgICAgICAgICAgICAxMDQuMjA3OTEyNTksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjYzYwYzMwJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjYzYwYzMwJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzQwYTI3YmYxYjg1YTQ1OGNhNGQ0OTdlZDQxMTdjMWM5ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzQ4NWZiOTM0ZGFlMDRiMjc4NjUwMWU2MTg3M2VkYTQxID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF80ODVmYjkzNGRhZTA0YjI3ODY1MDFlNjE4NzNlZGE0MSIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgOTV0aC9EYW4gUnlhbiAtIDEwODU5IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF80MGEyN2JmMWI4NWE0NThjYTRkNDk3ZWQ0MTE3YzFjOS5zZXRDb250ZW50KGh0bWxfNDg1ZmI5MzRkYWUwNGIyNzg2NTAxZTYxODczZWRhNDEpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfNmE4Y2ZkM2VhNGU3NDBiZGEyNTczMzAxODNjYmE3NTYuYmluZFBvcHVwKHBvcHVwXzQwYTI3YmYxYjg1YTQ1OGNhNGQ0OTdlZDQxMTdjMWM5KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzg2MzBhYmE4N2I4YzQwN2E5NWE4OGZhOWIzZTAyZWExID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODc5Njk5ODM2MywtODcuNjI1ODA3MTg2N10sCiAgICAgICAgICAgICAgICA3OS4wNzkyNjY3NzI2LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF80ZWJkNmEwNTA5Zjg0YzMwOTVhMTI5MjkxZTFiYWE4NiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF83OTA2Mjg5MTFlN2U0Y2MyODA1ODZjNDU2OThkZTJkOCA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfNzkwNjI4OTExZTdlNGNjMjgwNTg2YzQ1Njk4ZGUyZDgiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEFkYW1zL1dhYmFzaCAtIDYyNTMgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzRlYmQ2YTA1MDlmODRjMzA5NWExMjkyOTFlMWJhYTg2LnNldENvbnRlbnQoaHRtbF83OTA2Mjg5MTFlN2U0Y2MyODA1ODZjNDU2OThkZTJkOCk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl84NjMwYWJhODdiOGM0MDdhOTVhODhmYTliM2UwMmVhMS5iaW5kUG9wdXAocG9wdXBfNGViZDZhMDUwOWY4NGMzMDk1YTEyOTI5MWUxYmFhODYpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfYzEwOGM2MGNjYWVkNDNiOGE2NzlmY2IwYmEzODU4NmYgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44Nzk4MDI0NDIzLC04Ny42MjU5ODQ5MDU1XSwKICAgICAgICAgICAgICAgIDc5LjA3OTI2Njc3MjYsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDA5YjNhJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDA5YjNhJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzMwZTVkOTQ2NjM5NTQzOWNhZDAzYWU5MzdkNmY3OTQ3ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzU1NDNlZTY3M2NiZDRkODliNWQ5ZjMxNmE2ZjM3Y2U2ID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF81NTQzZWU2NzNjYmQ0ZDg5YjVkOWYzMTZhNmYzN2NlNiIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgQWRhbXMvV2FiYXNoIC0gNjI1MyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMzBlNWQ5NDY2Mzk1NDM5Y2FkMDNhZTkzN2Q2Zjc5NDcuc2V0Q29udGVudChodG1sXzU1NDNlZTY3M2NiZDRkODliNWQ5ZjMxNmE2ZjM3Y2U2KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2MxMDhjNjBjY2FlZDQzYjhhNjc5ZmNiMGJhMzg1ODZmLmJpbmRQb3B1cChwb3B1cF8zMGU1ZDk0NjYzOTU0MzljYWQwM2FlOTM3ZDZmNzk0Nyk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl80M2FkZWQzNThlNzE0ZDcxOGJkOGUwODNjNzJiYWYzOCA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg3OTc2NjgwNzYsLTg3LjYyNjE4N10sCiAgICAgICAgICAgICAgICA3OS4wNzkyNjY3NzI2LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2Y5NDYxYycsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2Y5NDYxYycsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8xNzFhMmZlMzllMTg0ZDFiOTcwNjYwY2NiZTQ0ZmY1YSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF81ZGQzOTg1ODQ2ZDc0YjEyYjliOTNhNTg2MWI1OWIyNSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfNWRkMzk4NTg0NmQ3NGIxMmI5YjkzYTU4NjFiNTliMjUiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEFkYW1zL1dhYmFzaCAtIDYyNTMgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzE3MWEyZmUzOWUxODRkMWI5NzA2NjBjY2JlNDRmZjVhLnNldENvbnRlbnQoaHRtbF81ZGQzOTg1ODQ2ZDc0YjEyYjliOTNhNTg2MWI1OWIyNSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl80M2FkZWQzNThlNzE0ZDcxOGJkOGUwODNjNzJiYWYzOC5iaW5kUG9wdXAocG9wdXBfMTcxYTJmZTM5ZTE4NGQxYjk3MDY2MGNjYmU0NGZmNWEpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfOTMyMzhlNDgwYzAyNDU3Yjg5MWI0OTE5N2RhNDIwZjEgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44Nzk0MDQzOTQsLTg3LjYyNjMxODkwNzhdLAogICAgICAgICAgICAgICAgNzkuMDc5MjY2NzcyNiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyM4ZTU3ZTAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyM4ZTU3ZTAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfNDA4YjlhNmM3MmY5NGExODk1YTg5NzRlNzA0MTZjYjYgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfNjBiZDU0MjE5ZDRjNDk5YWI2ODQwZjY5ZjI2ZmYyYjcgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzYwYmQ1NDIxOWQ0YzQ5OWFiNjg0MGY2OWYyNmZmMmI3IiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBBZGFtcy9XYWJhc2ggLSA2MjUzIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF80MDhiOWE2YzcyZjk0YTE4OTVhODk3NGU3MDQxNmNiNi5zZXRDb250ZW50KGh0bWxfNjBiZDU0MjE5ZDRjNDk5YWI2ODQwZjY5ZjI2ZmYyYjcpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfOTMyMzhlNDgwYzAyNDU3Yjg5MWI0OTE5N2RhNDIwZjEuYmluZFBvcHVwKHBvcHVwXzQwOGI5YTZjNzJmOTRhMTg5NWE4OTc0ZTcwNDE2Y2I2KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzFiZmJkN2Y3OWM1NTRmZGNiMGY3NTc2ZThhM2RjMGJmID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODc5MjQ3MTkyNCwtODcuNjI2MTg3XSwKICAgICAgICAgICAgICAgIDc5LjA3OTI2Njc3MjYsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjZTI3ZWE2JywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjZTI3ZWE2JywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2Y1MDIyNjVkNDAxZDQyYmE5Yzg4ZjhiYWUwOWIwZmM5ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzRkMzg1NGNlN2IwMDQxZDFiYjFjNGRkNWNjZTQwNzU4ID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF80ZDM4NTRjZTdiMDA0MWQxYmIxYzRkZDVjY2U0MDc1OCIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgQWRhbXMvV2FiYXNoIC0gNjI1MyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZjUwMjI2NWQ0MDFkNDJiYTljODhmOGJhZTA5YjBmYzkuc2V0Q29udGVudChodG1sXzRkMzg1NGNlN2IwMDQxZDFiYjFjNGRkNWNjZTQwNzU4KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzFiZmJkN2Y3OWM1NTRmZGNiMGY3NTc2ZThhM2RjMGJmLmJpbmRQb3B1cChwb3B1cF9mNTAyMjY1ZDQwMWQ0MmJhOWM4OGY4YmFlMDliMGZjOSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9iYjY4ZjJjMGQ0YTA0OTA4ODA1ZWExNTkyMzcwZDIwZSA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjk0NzIyMDgzNjMsLTg3LjY3NDQxMjE4NjddLAogICAgICAgICAgICAgICAgNDEuNDQ3OTAwNTYwNSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyM2MjM2MWInLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyM2MjM2MWInLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfNjVkOGMyYzY0MjE3NDk5ZmE5YmZkNDBiZmY5YThmOTcgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZmQ2NDY5ODhkNTAxNGYzMmE1YjAwOGUxNTVjYWVkYTAgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sX2ZkNjQ2OTg4ZDUwMTRmMzJhNWIwMDhlMTU1Y2FlZGEwIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBBZGRpc29uLUJyb3duIC0gMTcxNyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNjVkOGMyYzY0MjE3NDk5ZmE5YmZkNDBiZmY5YThmOTcuc2V0Q29udGVudChodG1sX2ZkNjQ2OTg4ZDUwMTRmMzJhNWIwMDhlMTU1Y2FlZGEwKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2JiNjhmMmMwZDRhMDQ5MDg4MDVlYTE1OTIzNzBkMjBlLmJpbmRQb3B1cChwb3B1cF82NWQ4YzJjNjQyMTc0OTlmYTliZmQ0MGJmZjlhOGY5Nyk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8zYzM4MTAzOTNkYzA0MGY2OTRkMjQ3NTlhYTlhYTI3YSA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjk0NzEzMjU1NzcsLTg3LjY1MzU3MzkwNTVdLAogICAgICAgICAgICAgICAgODUuNDk2ODQ0NzAxNSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyNjNjBjMzAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNjNjBjMzAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfMTM1NDdmOWNjMDQ1NDBkZGI2Y2Q4ODI4YWZiYjBiOTIgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZDlhZWE3Zjc1NDQ4NDFmNWExNDZhMjg3OTk2MzU0YzEgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sX2Q5YWVhN2Y3NTQ0ODQxZjVhMTQ2YTI4Nzk5NjM1NGMxIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBBZGRpc29uLU5vcnRoIE1haW4gLSA3MzA5IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8xMzU0N2Y5Y2MwNDU0MGRkYjZjZDg4MjhhZmJiMGI5Mi5zZXRDb250ZW50KGh0bWxfZDlhZWE3Zjc1NDQ4NDFmNWExNDZhMjg3OTk2MzU0YzEpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfM2MzODEwMzkzZGMwNDBmNjk0ZDI0NzU5YWE5YWEyN2EuYmluZFBvcHVwKHBvcHVwXzEzNTQ3ZjljYzA0NTQwZGRiNmNkODgyOGFmYmIwYjkyKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzUyN2U1OWMzMmUyMzRkNDI5MDM1ZDc3NTllYjEzODIzID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuOTQ3MzgsLTg3LjcxODc2XSwKICAgICAgICAgICAgICAgIDQ2LjYzMDk0NzEwNDUsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2U2ZWUzZjU5NjU4ZDRmYzY5ZjJmODBlOTgwOWNiZjI5ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2ZhNWI4YTliNTM4MzQxYjdhMGVkNzk5YTk5ZTE3MjUxID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF9mYTViOGE5YjUzODM0MWI3YTBlZDc5OWE5OWUxNzI1MSIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgQWRkaXNvbi1PJiMzOTtIYXJlIC0gMjE3NCBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZTZlZTNmNTk2NThkNGZjNjlmMmY4MGU5ODA5Y2JmMjkuc2V0Q29udGVudChodG1sX2ZhNWI4YTliNTM4MzQxYjdhMGVkNzk5YTk5ZTE3MjUxKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzUyN2U1OWMzMmUyMzRkNDI5MDM1ZDc3NTllYjEzODIzLmJpbmRQb3B1cChwb3B1cF9lNmVlM2Y1OTY1OGQ0ZmM2OWYyZjgwZTk4MDljYmYyOSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8yNDM3MGEyMzdmZjk0OTgyODlhMWJlYTRlZWNlNzBhOCA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjk3MzE1NzU1NzcsLTg3LjY1ODQ3NzkwNTVdLAogICAgICAgICAgICAgICAgNDkuNjQ0MTM4MzMzNSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyNjNjBjMzAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNjNjBjMzAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfMWNiOThmNWU1NjI4NDY5YThmMGUwYjg2MmZiZTY4MmQgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMjIwNGMyMmY3MTJmNDk1M2E5NTljMWRjZGMyOTBlNDUgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzIyMDRjMjJmNzEyZjQ5NTNhOTU5YzFkY2RjMjkwZTQ1IiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBBcmd5bGUgLSAyNDY0IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8xY2I5OGY1ZTU2Mjg0NjlhOGYwZTBiODYyZmJlNjgyZC5zZXRDb250ZW50KGh0bWxfMjIwNGMyMmY3MTJmNDk1M2E5NTljMWRjZGMyOTBlNDUpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfMjQzNzBhMjM3ZmY5NDk4Mjg5YTFiZWE0ZWVjZTcwYTguYmluZFBvcHVwKHBvcHVwXzFjYjk4ZjVlNTYyODQ2OWE4ZjBlMGI4NjJmYmU2ODJkKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzNiN2UyNjIyYmUxMzRjNDU5NzgyMmFlZmQ1MjQ5ZjllID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuOTE4NDA5ODM2MywtODcuNjUyNDE0MTg2N10sCiAgICAgICAgICAgICAgICA1Ni4xMDk5Njg1Nzg2LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF82NzkyYmI0ZGU4YWY0YjVkYjNlODZjOTc5MTRmNmI1ZSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9lZDEyNzgyYzY3ZjY0OWM1YmJkYjUzYTE2ZTAwMDY0ZiA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfZWQxMjc4MmM2N2Y2NDljNWJiZGI1M2ExNmUwMDA2NGYiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEFybWl0YWdlIC0gMzE0OCBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNjc5MmJiNGRlOGFmNGI1ZGIzZTg2Yzk3OTE0ZjZiNWUuc2V0Q29udGVudChodG1sX2VkMTI3ODJjNjdmNjQ5YzViYmRiNTNhMTZlMDAwNjRmKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzNiN2UyNjIyYmUxMzRjNDU5NzgyMmFlZmQ1MjQ5ZjllLmJpbmRQb3B1cChwb3B1cF82NzkyYmI0ZGU4YWY0YjVkYjNlODZjOTc5MTRmNmI1ZSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8wOWYyYTI4NjI2Zjk0YjcyOGM0MDI2MTdhZmIyNjc3YyA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjkxODExNDM5NCwtODcuNjUyOTI1OTA3OF0sCiAgICAgICAgICAgICAgICA1Ni4xMDk5Njg1Nzg2LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzhlNTdlMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzhlNTdlMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8yMzU1YjRhYjcyM2Y0ZWVhYmRhODc2YmM2NmJjYzliNCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9iNDJhZWE1ZThmMDI0MTgzYWUxZWU0MTgxNzJiMDZiOCA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfYjQyYWVhNWU4ZjAyNDE4M2FlMWVlNDE4MTcyYjA2YjgiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEFybWl0YWdlIC0gMzE0OCBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMjM1NWI0YWI3MjNmNGVlYWJkYTg3NmJjNjZiY2M5YjQuc2V0Q29udGVudChodG1sX2I0MmFlYTVlOGYwMjQxODNhZTFlZTQxODE3MmIwNmI4KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzA5ZjJhMjg2MjZmOTRiNzI4YzQwMjYxN2FmYjI2NzdjLmJpbmRQb3B1cChwb3B1cF8yMzU1YjRhYjcyM2Y0ZWVhYmRhODc2YmM2NmJjYzliNCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8wMGUxYzQzYTcxYjY0M2E3YTMzZGFjNDIzNmRhNDQ3ZiA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg4NTU2NDQ0MjMsLTg3LjY2NjkxNjkwNTVdLAogICAgICAgICAgICAgICAgNDIuMzQwMTU5ODE4MSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMDliM2EnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwMDliM2EnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfMmQ1NjA0MjljZmZmNDUxOThlMjM3NmZlYTZmMDk2MjIgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMDFlNzliMGZlMDQ2NDFiN2E4MDI2NDRhOTRkMDQwNDQgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzAxZTc5YjBmZTA0NjQxYjdhODAyNjQ0YTk0ZDA0MDQ0IiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBBc2hsYW5kLUxha2UgLSAxNzkyIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8yZDU2MDQyOWNmZmY0NTE5OGUyMzc2ZmVhNmYwOTYyMi5zZXRDb250ZW50KGh0bWxfMDFlNzliMGZlMDQ2NDFiN2E4MDI2NDRhOTRkMDQwNDQpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfMDBlMWM0M2E3MWI2NDNhN2EzM2RhYzQyMzZkYTQ0N2YuYmluZFBvcHVwKHBvcHVwXzJkNTYwNDI5Y2ZmZjQ1MTk4ZTIzNzZmZWE2ZjA5NjIyKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzU0MDJmMTViMWYxYzRlYTBhNjg1ZWExZjkwNWVjMzhiID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODg1MDA5MTkyNCwtODcuNjY3MTE5XSwKICAgICAgICAgICAgICAgIDQyLjM0MDE1OTgxODEsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjZTI3ZWE2JywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjZTI3ZWE2JywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2RlMGQ3YTA3ODc3NjQ5ZWRiMmQwYzExODQ3ZjJmMTQ5ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzI0NDEyYjM3OTZlZDQ5YmJhYjljMzg3NjY3NDI3YzJhID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF8yNDQxMmIzNzk2ZWQ0OWJiYWI5YzM4NzY2NzQyN2MyYSIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgQXNobGFuZC1MYWtlIC0gMTc5MiBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZGUwZDdhMDc4Nzc2NDllZGIyZDBjMTE4NDdmMmYxNDkuc2V0Q29udGVudChodG1sXzI0NDEyYjM3OTZlZDQ5YmJhYjljMzg3NjY3NDI3YzJhKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzU0MDJmMTViMWYxYzRlYTBhNjg1ZWExZjkwNWVjMzhiLmJpbmRQb3B1cChwb3B1cF9kZTBkN2EwNzg3NzY0OWVkYjJkMGMxMTg0N2YyZjE0OSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8yMjM1MzY5NTI1MGE0MDUxYmJkZTUwMTIxNjM3NTFkNCA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjgzOTQ5MzgwNzYsLTg3LjY2NTQ2N10sCiAgICAgICAgICAgICAgICAzNS40NjgxMzA4MjMyLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2Y5NDYxYycsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2Y5NDYxYycsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8yMjYyZTk1OTBiMDk0Mjc3YWFhYTQ2NWUwM2Q0MzkxNiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF85Y2M0ODk2YWFlMTY0YzM2YTU2MDNhNGRhZTFlNDFlOSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfOWNjNDg5NmFhZTE2NGMzNmE1NjAzYTRkYWUxZTQxZTkiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEFzaGxhbmQtT3JhbmdlIC0gMTI1NyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMjI2MmU5NTkwYjA5NDI3N2FhYWE0NjVlMDNkNDM5MTYuc2V0Q29udGVudChodG1sXzljYzQ4OTZhYWUxNjRjMzZhNTYwM2E0ZGFlMWU0MWU5KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzIyMzUzNjk1MjUwYTQwNTFiYmRlNTAxMjE2Mzc1MWQ0LmJpbmRQb3B1cChwb3B1cF8yMjYyZTk1OTBiMDk0Mjc3YWFhYTQ2NWUwM2Q0MzkxNik7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9mNmU4OTk3MGY3ZDE0ZDExYmMwYjZhNGU5YjE3ODMzMSA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjc3OTE1NTQ0MjMsLTg3LjY2MzcxMzkwNTVdLAogICAgICAgICAgICAgICAgMzcuODUzNDQ2NDA4MywKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMDliM2EnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwMDliM2EnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfNWM2YzhiYTA4MGFhNGI4OGFlZTI5YzQ4ZWY0NGRiZjMgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZTI4YWI5MTExYWZjNDczZTkwOWQ5OWI2Mzg0ODc5NTAgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sX2UyOGFiOTExMWFmYzQ3M2U5MDlkOTliNjM4NDg3OTUwIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBBc2hsYW5kLzYzcmQgLSAxNDMyIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF81YzZjOGJhMDgwYWE0Yjg4YWVlMjljNDhlZjQ0ZGJmMy5zZXRDb250ZW50KGh0bWxfZTI4YWI5MTExYWZjNDczZTkwOWQ5OWI2Mzg0ODc5NTApOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfZjZlODk5NzBmN2QxNGQxMWJjMGI2YTRlOWIxNzgzMzEuYmluZFBvcHVwKHBvcHVwXzVjNmM4YmEwODBhYTRiODhhZWUyOWM0OGVmNDRkYmYzKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzAyNmZlYTdiNDRlOTQ0Y2U5NTgxMmUzZGRmYTMyNjVmID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODcwODUxLC04Ny43NzY1MTJdLAogICAgICAgICAgICAgICAgMzkuMTA3NTE4OTY4NywKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMGExZGUnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwMGExZGUnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfODdjZjY2NjZlMzUxNDA2MmIxZDRhNTU5MjQ5NTdmOGYgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZTE4OGVhMDhkOGIwNGE2NjlhNzQzNzJlOGEyMDBhNTkgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sX2UxODhlYTA4ZDhiMDRhNjY5YTc0MzcyZThhMjAwYTU5IiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBBdXN0aW4tRm9yZXN0IFBhcmsgLSAxNTI5IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF84N2NmNjY2NmUzNTE0MDYyYjFkNGE1NTkyNDk1N2Y4Zi5zZXRDb250ZW50KGh0bWxfZTE4OGVhMDhkOGIwNGE2NjlhNzQzNzJlOGEyMDBhNTkpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfMDI2ZmVhN2I0NGU5NDRjZTk1ODEyZTNkZGZhMzI2NWYuYmluZFBvcHVwKHBvcHVwXzg3Y2Y2NjY2ZTM1MTQwNjJiMWQ0YTU1OTI0OTU3ZjhmKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2Q5MzU1NWJkNTc5NzQ2Mjc5NmRhYjVkY2UzYmFlMjk4ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODg3NTg4NDQyMywtODcuNzc0MDgyOTA1NV0sCiAgICAgICAgICAgICAgICA0MC44OTEyMDIyODg3LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzAwOWIzYScsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzAwOWIzYScsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8yNzFlODM5MDU0MTE0YTlkOTQwOGE5OTk3MDEyY2NmMSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF83NGNiNjY3ZTZjMTY0YjcyYmQ5MjI2NjM3NzNhOTE1MSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfNzRjYjY2N2U2YzE2NGI3MmJkOTIyNjYzNzczYTkxNTEiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEF1c3Rpbi1MYWtlIC0gMTY3MiBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMjcxZTgzOTA1NDExNGE5ZDk0MDhhOTk5NzAxMmNjZjEuc2V0Q29udGVudChodG1sXzc0Y2I2NjdlNmMxNjRiNzJiZDkyMjY2Mzc3M2E5MTUxKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2Q5MzU1NWJkNTc5NzQ2Mjc5NmRhYjVkY2UzYmFlMjk4LmJpbmRQb3B1cChwb3B1cF8yNzFlODM5MDU0MTE0YTlkOTQwOGE5OTk3MDEyY2NmMSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9jMWVkYWI0ZTY4YTI0MjljYTIyYzczY2ViZWU2NWYyNiA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjkzOTk0MzgzNjMsLTg3LjY1MzE1MDE4NjddLAogICAgICAgICAgICAgICAgMTAyLjE3NzczOTE3OCwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyM2MjM2MWInLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyM2MjM2MWInLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfYzUyYjdjZTAzNWJkNDA1NjllMDNjMzdiMzJlNjk2NjggPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMjFlMThhOTgxMzRkNGUxZDliNjA4NWUyZDUzNTAxODIgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzIxZTE4YTk4MTM0ZDRlMWQ5YjYwODVlMmQ1MzUwMTgyIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBCZWxtb250LU5vcnRoIE1haW4gLSAxMDQ0MCBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfYzUyYjdjZTAzNWJkNDA1NjllMDNjMzdiMzJlNjk2Njguc2V0Q29udGVudChodG1sXzIxZTE4YTk4MTM0ZDRlMWQ5YjYwODVlMmQ1MzUwMTgyKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2MxZWRhYjRlNjhhMjQyOWNhMjJjNzNjZWJlZTY1ZjI2LmJpbmRQb3B1cChwb3B1cF9jNTJiN2NlMDM1YmQ0MDU2OWUwM2MzN2IzMmU2OTY2OCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9mN2UzOTZkNDc5ZjQ0NTIyOGJkMDIyNGNhNTVkYTgwMCA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjkzOTY0ODM5NCwtODcuNjUzNjYxOTA3OF0sCiAgICAgICAgICAgICAgICAxMDIuMTc3NzM5MTc4LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzhlNTdlMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzhlNTdlMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9jYmE2MGYwYWQ5MTE0ZDYwYWJlZTBkMGM0ZWE2N2JiNSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8xMDcxNGU3NzgwMDc0MWJhOWNlMzU3OTg1YzJiZDAzNCA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfMTA3MTRlNzc4MDA3NDFiYTljZTM1Nzk4NWMyYmQwMzQiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEJlbG1vbnQtTm9ydGggTWFpbiAtIDEwNDQwIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9jYmE2MGYwYWQ5MTE0ZDYwYWJlZTBkMGM0ZWE2N2JiNS5zZXRDb250ZW50KGh0bWxfMTA3MTRlNzc4MDA3NDFiYTljZTM1Nzk4NWMyYmQwMzQpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfZjdlMzk2ZDQ3OWY0NDUyMjhiZDAyMjRjYTU1ZGE4MDAuYmluZFBvcHVwKHBvcHVwX2NiYTYwZjBhZDkxMTRkNjBhYmVlMGQwYzRlYTY3YmI1KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzlmZDliOWY2YTNlOTQxMjdiOGUwMTBkYTc4N2ZlNjM1ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuOTM5NDU1NTU3NywtODcuNjUzMzI3OTA1NV0sCiAgICAgICAgICAgICAgICAxMDIuMTc3NzM5MTc4LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF80NzBlZGE2NGZiZGM0Zjk2YmFkMGM3MWNiZTgwMGZiZSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF81NzA5Y2QzZTYxNGE0NTNmOGUxYjNhMDNlZjYyOGJhNyA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfNTcwOWNkM2U2MTRhNDUzZjhlMWIzYTAzZWY2MjhiYTciICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEJlbG1vbnQtTm9ydGggTWFpbiAtIDEwNDQwIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF80NzBlZGE2NGZiZGM0Zjk2YmFkMGM3MWNiZTgwMGZiZS5zZXRDb250ZW50KGh0bWxfNTcwOWNkM2U2MTRhNDUzZjhlMWIzYTAzZWY2MjhiYTcpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfOWZkOWI5ZjZhM2U5NDEyN2I4ZTAxMGRhNzg3ZmU2MzUuYmluZFBvcHVwKHBvcHVwXzQ3MGVkYTY0ZmJkYzRmOTZiYWQwYzcxY2JlODAwZmJlKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzBlMWNjY2ZhOTZhOTQxMmM4YzJhNzM2NTI2YzMwYzRiID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuOTM4MTMyLC04Ny43MTIwNTldLAogICAgICAgICAgICAgICAgNjQuMDgwMjQzNzkwNCwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMGExZGUnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwMGExZGUnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfMjUyMWJmMTk4ZTNiNGQxMmE5N2IzNWU0YTBlZGNiZTYgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfODZhY2E4YzdlMDdlNDUwM2IzMjg2ZWI1MTBkMmQxOGMgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzg2YWNhOGM3ZTA3ZTQ1MDNiMzI4NmViNTEwZDJkMThjIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBCZWxtb250LU8mIzM5O0hhcmUgLSA0MTA2IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8yNTIxYmYxOThlM2I0ZDEyYTk3YjM1ZTRhMGVkY2JlNi5zZXRDb250ZW50KGh0bWxfODZhY2E4YzdlMDdlNDUwM2IzMjg2ZWI1MTBkMmQxOGMpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfMGUxY2NjZmE5NmE5NDEyYzhjMmE3MzY1MjZjMzBjNGIuYmluZFBvcHVwKHBvcHVwXzI1MjFiZjE5OGUzYjRkMTJhOTdiMzVlNGEwZWRjYmU2KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzZmZmY4YmMwNjI0MDQzMzBhZDEzMDAzZjI3NWZmMjQwID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuOTc3Njg4NTU3NywtODcuNjU4NjE1OTA1NV0sCiAgICAgICAgICAgICAgICA1NC42NjY0Mjc1NDYxLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF83NTJhMjZiOGExMTY0ZDA4YmY0NmJhMmY2NmM0ZTJjZSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8yMmM1MDY2MDVjNmQ0OTA5OGI5NzI4YzRmNDE0ODg2NiA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfMjJjNTA2NjA1YzZkNDkwOThiOTcyOGM0ZjQxNDg4NjYiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEJlcnd5biAtIDI5ODggZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzc1MmEyNmI4YTExNjRkMDhiZjQ2YmEyZjY2YzRlMmNlLnNldENvbnRlbnQoaHRtbF8yMmM1MDY2MDVjNmQ0OTA5OGI5NzI4YzRmNDE0ODg2Nik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl82ZmZmOGJjMDYyNDA0MzMwYWQxMzAwM2YyNzVmZjI0MC5iaW5kUG9wdXAocG9wdXBfNzUyYTI2YjhhMTE2NGQwOGJmNDZiYTJmNjZjNGUyY2UpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfNjM0YTU1NTc1ZDgwNDhjOGE4MTMzMTlkYTViNjcxMjYgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS45ODMyMDg1NTc3LC04Ny42NTg3ODc5MDU1XSwKICAgICAgICAgICAgICAgIDYzLjc2MjA3MDM1NzIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjYzYwYzMwJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjYzYwYzMwJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzUyNjE3NTVkNmQxMTQ0YTY4MTEzYWYwMGJiMzQxNWYzID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzdkZmU0ODJmMWE5NDQxNWE4ZTAzYTYwN2ExOGNlMjk3ID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF83ZGZlNDgyZjFhOTQ0MTVhOGUwM2E2MDdhMThjZTI5NyIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgQnJ5biBNYXdyIC0gNDA2NSBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNTI2MTc1NWQ2ZDExNDRhNjgxMTNhZjAwYmIzNDE1ZjMuc2V0Q29udGVudChodG1sXzdkZmU0ODJmMWE5NDQxNWE4ZTAzYTYwN2ExOGNlMjk3KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzYzNGE1NTU3NWQ4MDQ4YzhhODEzMzE5ZGE1YjY3MTI2LmJpbmRQb3B1cChwb3B1cF81MjYxNzU1ZDZkMTE0NGE2ODExM2FmMDBiYjM0MTVmMyk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9kODAxZjYzYTkwMzI0OWQwOTViODZkNTljZDY1YzhmNyA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg1Mzg0OTE5MjQsLTg3LjY5NDkyNF0sCiAgICAgICAgICAgICAgICAzMC42MTgwMjUwMjc0LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2UyN2VhNicsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2UyN2VhNicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8xMGNlOWE4ZjNiMjM0MTE1YjQ0MjNlYjkxN2ExMjgzMyA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8yOWQxZjk4ZjljOWE0YTFkYTgwZmQ4NTA4MzE5NmUwNyA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfMjlkMWY5OGY5YzlhNGExZGE4MGZkODUwODMxOTZlMDciICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIENhbGlmb3JuaWEtQ2VybWFrIC0gOTM3IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8xMGNlOWE4ZjNiMjM0MTE1YjQ0MjNlYjkxN2ExMjgzMy5zZXRDb250ZW50KGh0bWxfMjlkMWY5OGY5YzlhNGExZGE4MGZkODUwODMxOTZlMDcpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfZDgwMWY2M2E5MDMyNDlkMDk1Yjg2ZDU5Y2Q2NWM4ZjcuYmluZFBvcHVwKHBvcHVwXzEwY2U5YThmM2IyMzQxMTViNDQyM2ViOTE3YTEyODMzKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzU2OTYwOWQ0MzUzMTRkODNhNGJjMmQ2ZDhjMjc5YTg5ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODg0NTE1NDQyMywtODcuNjk2MTgxOTA1NV0sCiAgICAgICAgICAgICAgICAyOS4yNzI2MTk4NjYzLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzAwOWIzYScsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzAwOWIzYScsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9kODkwYjVjNzJlZWI0OThiYTQ1MWFjNTI2MWM5YTk2YyA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8zMjk3ZjAyOGNjMjA0MzBkYmFjMjkwMDgwN2ZjODAxZCA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfMzI5N2YwMjhjYzIwNDMwZGJhYzI5MDA4MDdmYzgwMWQiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIENhbGlmb3JuaWEtTGFrZSAtIDg1NiBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZDg5MGI1YzcyZWViNDk4YmE0NTFhYzUyNjFjOWE5NmMuc2V0Q29udGVudChodG1sXzMyOTdmMDI4Y2MyMDQzMGRiYWMyOTAwODA3ZmM4MDFkKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzU2OTYwOWQ0MzUzMTRkODNhNGJjMmQ2ZDhjMjc5YTg5LmJpbmRQb3B1cChwb3B1cF9kODkwYjVjNzJlZWI0OThiYTQ1MWFjNTI2MWM5YTk2Yyk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9iZDdiMjI3NDc2ODI0YTJjOTQ4NTc0ODk0MTY5MGM2NyA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjkyMTkzOSwtODcuNjk2NTldLAogICAgICAgICAgICAgICAgNTcuMjI1MDgxMzcyNiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMGExZGUnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwMGExZGUnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfOWFhZDE1NmMyZDIxNDcxODliN2E2OTA0OWRjMDhmYjQgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfODAxNjNhM2VlZTM0NDY2MzkzODhjZGE3NzBjNWFkZGQgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzgwMTYzYTNlZWUzNDQ2NjM5Mzg4Y2RhNzcwYzVhZGRkIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBDYWxpZm9ybmlhL01pbHdhdWtlZSAtIDMyNzQgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzlhYWQxNTZjMmQyMTQ3MTg5YjdhNjkwNDlkYzA4ZmI0LnNldENvbnRlbnQoaHRtbF84MDE2M2EzZWVlMzQ0NjYzOTM4OGNkYTc3MGM1YWRkZCk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl9iZDdiMjI3NDc2ODI0YTJjOTQ4NTc0ODk0MTY5MGM2Ny5iaW5kUG9wdXAocG9wdXBfOWFhZDE1NmMyZDIxNDcxODliN2E2OTA0OWRjMDhmYjQpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfYmNmOWYzNjNiNTQ4NDZiMDljNTIzODMyODNiZjA3YmQgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44NTM1NzkxOTI0LC04Ny43MTQ5OTJdLAogICAgICAgICAgICAgICAgMjcuMzQ2MTUxNTY2NiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyNlMjdlYTYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNlMjdlYTYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfOWMzYWIzM2RhNDQ2NGEwMDk1Yzk5ZWE3MzAxMzU1ODIgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMTgyYzQ0MWI5ZTAxNGNjOTg0ZjI3M2Q3ZjgwNGRiYTEgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzE4MmM0NDFiOWUwMTRjYzk4NGYyNzNkN2Y4MDRkYmExIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBDZW50cmFsIFBhcmsgLSA3NDcgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzljM2FiMzNkYTQ0NjRhMDA5NWM5OWVhNzMwMTM1NTgyLnNldENvbnRlbnQoaHRtbF8xODJjNDQxYjllMDE0Y2M5ODRmMjczZDdmODA0ZGJhMSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl9iY2Y5ZjM2M2I1NDg0NmIwOWM1MjM4MzI4M2JmMDdiZC5iaW5kUG9wdXAocG9wdXBfOWMzYWIzM2RhNDQ2NGEwMDk1Yzk5ZWE3MzAxMzU1ODIpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfN2VjODg1ZjBjYmEzNDMyMzlmOGZkZjY3ODI1NTBlYzMgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0Mi4wNjQwODk2MDYsLTg3LjY4NTg5ODkwNzhdLAogICAgICAgICAgICAgICAgMjcuMzYxMjA0OTUzLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzUyMjM5OCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzUyMjM5OCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9jNjljZDc4MzY5MDc0Y2IyYmRiNWY0Zjc4YzYwOTQ1MiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8zODQ0MWY2M2FiNzU0MDQzOTExMzE0MDhlNzVlZGVjNiA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfMzg0NDFmNjNhYjc1NDA0MzkxMTMxNDA4ZTc1ZWRlYzYiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIENlbnRyYWwtRXZhbnN0b24gLSA3NDggZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2M2OWNkNzgzNjkwNzRjYjJiZGI1ZjRmNzhjNjA5NDUyLnNldENvbnRlbnQoaHRtbF8zODQ0MWY2M2FiNzU0MDQzOTExMzE0MDhlNzVlZGVjNik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl83ZWM4ODVmMGNiYTM0MzIzOWY4ZmRmNjc4MjU1MGVjMy5iaW5kUG9wdXAocG9wdXBfYzY5Y2Q3ODM2OTA3NGNiMmJkYjVmNGY3OGM2MDk0NTIpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfMGEzMzE4NDdjNDAzNDFlZWE3ZDg2OGE3ZWMyNzU1YmMgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0Mi4wNjM4ODQzOTQsLTg3LjY4NTg5ODkwNzhdLAogICAgICAgICAgICAgICAgMjcuMzYxMjA0OTUzLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzhlNTdlMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzhlNTdlMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF82Nzc5ZDRiMDZlMjc0ZTkyYjAwZWUwNjc3YTdjNmViYiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8yZjE5MTdkNjk1ZmQ0YTgzOTc4NTk5NzNlYmY4YmQzOCA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfMmYxOTE3ZDY5NWZkNGE4Mzk3ODU5OTczZWJmOGJkMzgiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIENlbnRyYWwtRXZhbnN0b24gLSA3NDggZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzY3NzlkNGIwNmUyNzRlOTJiMDBlZTA2NzdhN2M2ZWJiLnNldENvbnRlbnQoaHRtbF8yZjE5MTdkNjk1ZmQ0YTgzOTc4NTk5NzNlYmY4YmQzOCk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl8wYTMzMTg0N2M0MDM0MWVlYTdkODY4YTdlYzI3NTViYy5iaW5kUG9wdXAocG9wdXBfNjc3OWQ0YjA2ZTI3NGU5MmIwMGVlMDY3N2E3YzZlYmIpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfYjU4ZDY5ZTkxNWM4NGFkYTg0ZmRmOTg0ZWE5MjQwNWIgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44ODc2ODQ0NDIzLC04Ny43NjU1OTc5MDU1XSwKICAgICAgICAgICAgICAgIDQ0LjU0NTE3MzYyMzMsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDA5YjNhJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDA5YjNhJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2EyZGM3MDY2ZjJlNzQxMzBiNmVlMmU2ZDkwZDNmY2ViID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzc4ZTA5NGJjNDFhOTQzMTc4MDNjMzI0ZGNmNTgwYTBlID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF83OGUwOTRiYzQxYTk0MzE3ODAzYzMyNGRjZjU4MGEwZSIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgQ2VudHJhbC1MYWtlIC0gMTk4NCBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfYTJkYzcwNjZmMmU3NDEzMGI2ZWUyZTZkOTBkM2ZjZWIuc2V0Q29udGVudChodG1sXzc4ZTA5NGJjNDFhOTQzMTc4MDNjMzI0ZGNmNTgwYTBlKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2I1OGQ2OWU5MTVjODRhZGE4NGZkZjk4NGVhOTI0MDViLmJpbmRQb3B1cChwb3B1cF9hMmRjNzA2NmYyZTc0MTMwYjZlZTJlNmQ5MGQzZmNlYik7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl82NWU0NmJjMjA0ODk0ZGU5YTkwN2NjNGEwOWFhMjM4YyA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg1MjkxMDU1NzcsLTg3LjYzMDkxNTkwNTVdLAogICAgICAgICAgICAgICAgNTkuMTQzODE3ODI2OSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyNjNjBjMzAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNjNjBjMzAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfYjgxNTI3NDg0YWYxNGZkYmE0MjFlOGQ2MGI4MmI5ZjggPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMzhlOTNkYjA5OTI1NDk1MmFkMGRjY2VmZThlZmRkZWQgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzM4ZTkzZGIwOTkyNTQ5NTJhZDBkY2NlZmU4ZWZkZGVkIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBDZXJtYWstQ2hpbmF0b3duIC0gMzQ5NyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfYjgxNTI3NDg0YWYxNGZkYmE0MjFlOGQ2MGI4MmI5Zjguc2V0Q29udGVudChodG1sXzM4ZTkzZGIwOTkyNTQ5NTJhZDBkY2NlZmU4ZWZkZGVkKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzY1ZTQ2YmMyMDQ4OTRkZTlhOTA3Y2M0YTA5YWEyMzhjLmJpbmRQb3B1cChwb3B1cF9iODE1Mjc0ODRhZjE0ZmRiYTQyMWU4ZDYwYjgyYjlmOCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8zM2RlZTcyZGNlZjk0NTg5YjY0ZjNmZjZkYjFhOTBkOSA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg1MzQxMDQ0MjMsLTg3LjYyNjM0OTkwNTVdLAogICAgICAgICAgICAgICAgMzQuMTE3MTMwMTc1NywKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMDliM2EnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwMDliM2EnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfNDBmMGMyMDYzYTMzNDQ2MThjMWYxZDRmY2E5ZTcyZDggPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfOTgyNzhlNzhhY2MxNDlkODkwMWExMWE1ZDczMzAzNzUgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzk4Mjc4ZTc4YWNjMTQ5ZDg5MDFhMTFhNWQ3MzMwMzc1IiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBDZXJtYWstTWNDb3JtaWNrIFBsYWNlIC0gMTE2MyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNDBmMGMyMDYzYTMzNDQ2MThjMWYxZDRmY2E5ZTcyZDguc2V0Q29udGVudChodG1sXzk4Mjc4ZTc4YWNjMTQ5ZDg5MDFhMTFhNWQ3MzMwMzc1KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzMzZGVlNzJkY2VmOTQ1ODliNjRmM2ZmNmRiMWE5MGQ5LmJpbmRQb3B1cChwb3B1cF80MGYwYzIwNjNhMzM0NDYxOGMxZjFkNGZjYTllNzJkOCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl84MDg1OTMxOTE1ZGM0ZDIxOWM1MzFjY2M2NDRhMmZjNCA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg5NzAwMjgzNjMsLTg3LjYzNTY5NDE4NjddLAogICAgICAgICAgICAgICAgNjUuODYwODU5MDA3LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF80ODBmNWVkYmM1MWI0MWRjOWI2YWU5YWFjMmY2MjkxNCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF85OWRmYjNjODUzZDI0M2EzYWRhM2I1ZmZkZjdlMGM1MyA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfOTlkZmIzYzg1M2QyNDNhM2FkYTNiNWZmZGY3ZTBjNTMiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIENoaWNhZ28vRnJhbmtsaW4gLSA0MzM3IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF80ODBmNWVkYmM1MWI0MWRjOWI2YWU5YWFjMmY2MjkxNC5zZXRDb250ZW50KGh0bWxfOTlkZmIzYzg1M2QyNDNhM2FkYTNiNWZmZGY3ZTBjNTMpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfODA4NTkzMTkxNWRjNGQyMTljNTMxY2NjNjQ0YTJmYzQuYmluZFBvcHVwKHBvcHVwXzQ4MGY1ZWRiYzUxYjQxZGM5YjZhZTlhYWMyZjYyOTE0KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2ZjZTk5ZjFhNzc3YjQyMjI5NDQxYzFjNjYyZDQ4ZGI2ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODk2NzA3Mzk0LC04Ny42MzYyMDU5MDc4XSwKICAgICAgICAgICAgICAgIDY1Ljg2MDg1OTAwNywKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyM4ZTU3ZTAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyM4ZTU3ZTAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfNmY4ZmJhYjY3NDk5NDY0N2IzZTQ4ZjFhN2FkNDBhZGUgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfOWFmY2RmN2EyZDg3NDIwZmI3OGY1ZmFkNTdlYjUxNmMgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzlhZmNkZjdhMmQ4NzQyMGZiNzhmNWZhZDU3ZWI1MTZjIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBDaGljYWdvL0ZyYW5rbGluIC0gNDMzNyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNmY4ZmJhYjY3NDk5NDY0N2IzZTQ4ZjFhN2FkNDBhZGUuc2V0Q29udGVudChodG1sXzlhZmNkZjdhMmQ4NzQyMGZiNzhmNWZhZDU3ZWI1MTZjKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2ZjZTk5ZjFhNzc3YjQyMjI5NDQxYzFjNjYyZDQ4ZGI2LmJpbmRQb3B1cChwb3B1cF82ZjhmYmFiNjc0OTk0NjQ3YjNlNDhmMWE3YWQ0MGFkZSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9iMTkwNjQ0Mzg3YmE0MGM3YWU5YmJkMDY2NmJhNzAyMiA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg5NjA3NSwtODcuNjU0OTE0XSwKICAgICAgICAgICAgICAgIDUyLjQ2NjQxNTQ5NDcsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzViNWQxY2VkOGExOTQzZjM4MzQxNzA2NTAxZmYxMDBjID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzlmNDQ4YzdjYTk5YjQyZmZiODg3OWI2M2RiZDIxZGQyID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF85ZjQ0OGM3Y2E5OWI0MmZmYjg4NzliNjNkYmQyMWRkMiIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgQ2hpY2Fnby9NaWx3YXVrZWUgLSAyNzUyIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF81YjVkMWNlZDhhMTk0M2YzODM0MTcwNjUwMWZmMTAwYy5zZXRDb250ZW50KGh0bWxfOWY0NDhjN2NhOTliNDJmZmI4ODc5YjYzZGJkMjFkZDIpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfYjE5MDY0NDM4N2JhNDBjN2FlOWJiZDA2NjZiYTcwMjIuYmluZFBvcHVwKHBvcHVwXzViNWQxY2VkOGExOTQzZjM4MzQxNzA2NTAxZmYxMDBjKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2M1YTM5MWI4Y2VlYTRjYTc5ZWYxZjA1NjVkM2VmNDk1ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODk2Mzc1NTU3NywtODcuNjI4MTIzOTA1NV0sCiAgICAgICAgICAgICAgICAxMTMuNzc1ODkwMjc3LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF85YWQxMTNmOWExODA0ZjRmYjdlZTc2MWIyNjJlMWE0NSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF85Mzc3OGU4Yzg3MjI0MjgzODRhZTBkZDgzYzM1ODM3MiA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfOTM3NzhlOGM4NzIyNDI4Mzg0YWUwZGQ4M2MzNTgzNzIiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIENoaWNhZ28vU3RhdGUgLSAxMjk0NCBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfOWFkMTEzZjlhMTgwNGY0ZmI3ZWU3NjFiMjYyZTFhNDUuc2V0Q29udGVudChodG1sXzkzNzc4ZThjODcyMjQyODM4NGFlMGRkODNjMzU4MzcyKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2M1YTM5MWI4Y2VlYTRjYTc5ZWYxZjA1NjVkM2VmNDk1LmJpbmRQb3B1cChwb3B1cF85YWQxMTNmOWExODA0ZjRmYjdlZTc2MWIyNjJlMWE0NSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8zY2MwMjY1ZWMxN2M0M2E2YmJmMDYzZGU4ZWZlZDBlNiA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg1MTU2MDE5MjQsLTg3Ljc0NTQ4Nl0sCiAgICAgICAgICAgICAgICAzMC4zNzk1Mjg0NjM0LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2UyN2VhNicsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2UyN2VhNicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9jMmI5NzNhYjkyOTk0YTVhOTI0YzM2MDJjNzJmMWIzZSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8yYzYyMTdmMGUyMDQ0N2MzYjMwNTQ2YWVlOGVkMzViYiA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfMmM2MjE3ZjBlMjA0NDdjM2IzMDU0NmFlZThlZDM1YmIiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIENpY2Vyby1DZXJtYWsgLSA5MjIgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2MyYjk3M2FiOTI5OTRhNWE5MjRjMzYwMmM3MmYxYjNlLnNldENvbnRlbnQoaHRtbF8yYzYyMTdmMGUyMDQ0N2MzYjMwNTQ2YWVlOGVkMzViYik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl8zY2MwMjY1ZWMxN2M0M2E2YmJmMDYzZGU4ZWZlZDBlNi5iaW5kUG9wdXAocG9wdXBfYzJiOTczYWI5Mjk5NGE1YTkyNGMzNjAyYzcyZjFiM2UpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfOWE1NThjN2IwMGVhNDYxNWEzM2RkNDk3OTgxODg5ODkgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44NzE1NzQsLTg3Ljc0NDg1NF0sCiAgICAgICAgICAgICAgICAzMi44NjQ4MzY2NzUxLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzAwYTFkZScsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzAwYTFkZScsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9iMWVmMTcyYzBmMzQ0MjQ0YjgxMGViMzA4MmY5ZjQ4ZiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9jMDkxNDFkZDMxODk0OWRkYWRlNzEwYzY1YTRkZjk2NSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfYzA5MTQxZGQzMTg5NDlkZGFkZTcxMGM2NWE0ZGY5NjUiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIENpY2Vyby1Gb3Jlc3QgUGFyayAtIDEwODAgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2IxZWYxNzJjMGYzNDQyNDRiODEwZWIzMDgyZjlmNDhmLnNldENvbnRlbnQoaHRtbF9jMDkxNDFkZDMxODk0OWRkYWRlNzEwYzY1YTRkZjk2NSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl85YTU1OGM3YjAwZWE0NjE1YTMzZGQ0OTc5ODE4ODk4OS5iaW5kUG9wdXAocG9wdXBfYjFlZjE3MmMwZjM0NDI0NGI4MTBlYjMwODJmOWY0OGYpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfNTYyNWZiYmI0ZGUzNDBhY2E4YTBiZTBkYzY4ZWIwNjMgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44ODY4MTQ0NDIzLC04Ny43NDQ2NDU5MDU1XSwKICAgICAgICAgICAgICAgIDM0LjgxOTY0OTM0ODMsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDA5YjNhJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDA5YjNhJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzNhOGY5YWU5ZDFmNzRhMDFhZDFlM2JmNTBjN2FlYzdjID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzdiYjdiZjIzYWVkYjQyMTViZmM0NTUxYTRmMzFmZDY1ID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF83YmI3YmYyM2FlZGI0MjE1YmZjNDU1MWE0ZjMxZmQ2NSIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgQ2ljZXJvLUxha2UgLSAxMjEyIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8zYThmOWFlOWQxZjc0YTAxYWQxZTNiZjUwYzdhZWM3Yy5zZXRDb250ZW50KGh0bWxfN2JiN2JmMjNhZWRiNDIxNWJmYzQ1NTFhNGYzMWZkNjUpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfNTYyNWZiYmI0ZGUzNDBhY2E4YTBiZTBkYzY4ZWIwNjMuYmluZFBvcHVwKHBvcHVwXzNhOGY5YWU5ZDFmNzRhMDFhZDFlM2JmNTBjN2FlYzdjKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzBiNTM3ODExNjQ1ZDQzMGViNzMzZWY1MGYyOGRlOGM4ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuOTAzNjI0NTU3NywtODcuNjMxMzU5OTA1NV0sCiAgICAgICAgICAgICAgICA4MC44MTE1NDA0Njk3LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF80OGQyZGJhNTcwMjQ0ZjU2OWY5MzU1ODM0MTI4MTFhZCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF82MzBiYWYxNTcwOWY0NTMxODEzMGFiNjkwMjYyMDM1OSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfNjMwYmFmMTU3MDlmNDUzMTgxMzBhYjY5MDI2MjAzNTkiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIENsYXJrL0RpdmlzaW9uIC0gNjUzMCBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNDhkMmRiYTU3MDI0NGY1NjlmOTM1NTgzNDEyODExYWQuc2V0Q29udGVudChodG1sXzYzMGJhZjE1NzA5ZjQ1MzE4MTMwYWI2OTAyNjIwMzU5KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzBiNTM3ODExNjQ1ZDQzMGViNzMzZWY1MGYyOGRlOGM4LmJpbmRQb3B1cChwb3B1cF80OGQyZGJhNTcwMjQ0ZjU2OWY5MzU1ODM0MTI4MTFhZCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl85Y2U4OGRlNzc0ZGY0Mjc2YThjMjg5NGE1NWVhZTY0NiA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg4NTczNywtODcuNjMwNTg2XSwKICAgICAgICAgICAgICAgIDExNi44ODEwOTUxNDYsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2Q3YzcxOGM2Yzk0MDQyODU4ZTI5MDU4YjU0OTA5MWRkID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzE2YjU5NjQxM2RmNTQxOWM4ZWY1Yjg5NTI1NzUwYTFlID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF8xNmI1OTY0MTNkZjU0MTljOGVmNWI4OTUyNTc1MGExZSIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgQ2xhcmsvTGFrZSAtIDEzNjYxIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9kN2M3MThjNmM5NDA0Mjg1OGUyOTA1OGI1NDkwOTFkZC5zZXRDb250ZW50KGh0bWxfMTZiNTk2NDEzZGY1NDE5YzhlZjViODk1MjU3NTBhMWUpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfOWNlODhkZTc3NGRmNDI3NmE4YzI4OTRhNTVlYWU2NDYuYmluZFBvcHVwKHBvcHVwX2Q3YzcxOGM2Yzk0MDQyODU4ZTI5MDU4YjU0OTA5MWRkKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzllMDBkMzcxMzNhZDQwYWM5NzY2NTc3NWViZmI1NzRkID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODg1OTI5ODM2MywtODcuNjMwNjU2MTg2N10sCiAgICAgICAgICAgICAgICAxMTYuODgxMDk1MTQ2LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF83Y2FlZTNhZTAwMmM0M2JmYTU2ZDBiMmZhOTZlNTE5NSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8wMDQ0NjY1NDhmOTk0NDE1YjUyMzA5NWVhNzYxMDZjZSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfMDA0NDY2NTQ4Zjk5NDQxNWI1MjMwOTVlYTc2MTA2Y2UiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIENsYXJrL0xha2UgLSAxMzY2MSBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfN2NhZWUzYWUwMDJjNDNiZmE1NmQwYjJmYTk2ZTUxOTUuc2V0Q29udGVudChodG1sXzAwNDQ2NjU0OGY5OTQ0MTViNTIzMDk1ZWE3NjEwNmNlKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzllMDBkMzcxMzNhZDQwYWM5NzY2NTc3NWViZmI1NzRkLmJpbmRQb3B1cChwb3B1cF83Y2FlZTNhZTAwMmM0M2JmYTU2ZDBiMmZhOTZlNTE5NSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8zOTU0MTBhYzU5MmI0YjE1YmY4ZTExMWJiODg3OWNkMSA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg4NjAzMjQ0MjMsLTg3LjYzMDgzMzkwNTVdLAogICAgICAgICAgICAgICAgMTE2Ljg4MTA5NTE0NiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMDliM2EnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwMDliM2EnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfMDM0OWEzYzI3MzQxNDM5MDg5NDFmZGRiMWI2MTQ3YjUgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZTJiMjQyZDM5MmRlNDdjOTg4MzZkNzQxYjY4NGE4YWUgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sX2UyYjI0MmQzOTJkZTQ3Yzk4ODM2ZDc0MWI2ODRhOGFlIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBDbGFyay9MYWtlIC0gMTM2NjEgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzAzNDlhM2MyNzM0MTQzOTA4OTQxZmRkYjFiNjE0N2I1LnNldENvbnRlbnQoaHRtbF9lMmIyNDJkMzkyZGU0N2M5ODgzNmQ3NDFiNjg0YThhZSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl8zOTU0MTBhYzU5MmI0YjE1YmY4ZTExMWJiODg3OWNkMS5iaW5kUG9wdXAocG9wdXBfMDM0OWEzYzI3MzQxNDM5MDg5NDFmZGRiMWI2MTQ3YjUpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfNWMxNTUzNDk2ZTNhNGY2ZjllYzI1Nzk4NWRmZmEyMzggPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44ODU5OTY4MDc2LC04Ny42MzEwMzZdLAogICAgICAgICAgICAgICAgMTE2Ljg4MTA5NTE0NiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyNmOTQ2MWMnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNmOTQ2MWMnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfMzM2MmFkMjNhZmRjNDlmMzgzZWRiZDM1NmQzMTIzMTQgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMTVmNTVjNDVkNDg1NGEyZmEzOTBjOWUyZmEwNmVmYmYgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzE1ZjU1YzQ1ZDQ4NTRhMmZhMzkwYzllMmZhMDZlZmJmIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBDbGFyay9MYWtlIC0gMTM2NjEgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzMzNjJhZDIzYWZkYzQ5ZjM4M2VkYmQzNTZkMzEyMzE0LnNldENvbnRlbnQoaHRtbF8xNWY1NWM0NWQ0ODU0YTJmYTM5MGM5ZTJmYTA2ZWZiZik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl81YzE1NTM0OTZlM2E0ZjZmOWVjMjU3OTg1ZGZmYTIzOC5iaW5kUG9wdXAocG9wdXBfMzM2MmFkMjNhZmRjNDlmMzgzZWRiZDM1NmQzMTIzMTQpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfZGEyNzMwOGNiODhlNDNiMWI2N2VhYmY5ZmNhMDIxYWIgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44ODU2MzQzOTQsLTg3LjYzMTE2NzkwNzhdLAogICAgICAgICAgICAgICAgMTE2Ljg4MTA5NTE0NiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyM4ZTU3ZTAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyM4ZTU3ZTAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfNjc0NjFjNTJiNmQzNDkwN2FiODJkYzQ5OTcwN2RmOTYgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZGQ4MjkwZTQwMTcyNDJlZmEyMmY1OTkwZTY4ZTk4YzAgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sX2RkODI5MGU0MDE3MjQyZWZhMjJmNTk5MGU2OGU5OGMwIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBDbGFyay9MYWtlIC0gMTM2NjEgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzY3NDYxYzUyYjZkMzQ5MDdhYjgyZGM0OTk3MDdkZjk2LnNldENvbnRlbnQoaHRtbF9kZDgyOTBlNDAxNzI0MmVmYTIyZjU5OTBlNjhlOThjMCk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl9kYTI3MzA4Y2I4OGU0M2IxYjY3ZWFiZjlmY2EwMjFhYi5iaW5kUG9wdXAocG9wdXBfNjc0NjFjNTJiNmQzNDkwN2FiODJkYzQ5OTcwN2RmOTYpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfMjQ0Nzg2Mzg2NTA4NGIyMGE4OGRlZmM4OWU3OWEzYTUgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44ODU0NzcxOTI0LC04Ny42MzEwMzZdLAogICAgICAgICAgICAgICAgMTE2Ljg4MTA5NTE0NiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyNlMjdlYTYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNlMjdlYTYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfZTA1Mzc5ZGU5MzdmNGUxZThkZmYzYzA1Y2JjOWViMmUgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZTIyNzgyZmQ5ZGNhNGFkNjk4MTUxZjFmZDYyZmRhN2QgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sX2UyMjc4MmZkOWRjYTRhZDY5ODE1MWYxZmQ2MmZkYTdkIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBDbGFyay9MYWtlIC0gMTM2NjEgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2UwNTM3OWRlOTM3ZjRlMWU4ZGZmM2MwNWNiYzllYjJlLnNldENvbnRlbnQoaHRtbF9lMjI3ODJmZDlkY2E0YWQ2OTgxNTFmMWZkNjJmZGE3ZCk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl8yNDQ3ODYzODY1MDg0YjIwYTg4ZGVmYzg5ZTc5YTNhNS5iaW5kUG9wdXAocG9wdXBfZTA1Mzc5ZGU5MzdmNGUxZThkZmYzYzA1Y2JjOWViMmUpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfZDExYzFkMWU3ZjRhNDhmODk2NzliMzJjZmYyYmQ2ZWYgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44NzU1MzksLTg3LjY0MDY4NF0sCiAgICAgICAgICAgICAgICA0OS41ODA5MTIxNTQ1LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzAwYTFkZScsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzAwYTFkZScsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF80YWRiYmE0ZDEyMGM0Mjg1OGVhMjNkMTgwMGQ4OGYyNiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF85YzMzOGUzMzJjYzY0Mzk5OGE0MWQ4MzUzZmM3NzYwOSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfOWMzMzhlMzMyY2M2NDM5OThhNDFkODM1M2ZjNzc2MDkiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIENsaW50b24tRm9yZXN0IFBhcmsgLSAyNDU4IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF80YWRiYmE0ZDEyMGM0Mjg1OGVhMjNkMTgwMGQ4OGYyNi5zZXRDb250ZW50KGh0bWxfOWMzMzhlMzMyY2M2NDM5OThhNDFkODM1M2ZjNzc2MDkpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfZDExYzFkMWU3ZjRhNDhmODk2NzliMzJjZmYyYmQ2ZWYuYmluZFBvcHVwKHBvcHVwXzRhZGJiYTRkMTIwYzQyODU4ZWEyM2QxODAwZDg4ZjI2KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzc5YWU2ODdjNTQ1MTRkMDU4ODQxYWIyMGZkZGI5ODlhID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODg1OTczNDQyMywtODcuNjQxNzI5OTA1NV0sCiAgICAgICAgICAgICAgICA1MS4zNjAwODQxOTczLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzAwOWIzYScsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzAwOWIzYScsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9jODBiOGNiMTkyYTE0MWQwYmE3OGMxNDY4YzA3ZTJkOCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF80YTZkZjAyYTcxOTA0NzRlOTI4NzgzZWY2OWNjYWJjMSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfNGE2ZGYwMmE3MTkwNDc0ZTkyODc4M2VmNjljY2FiYzEiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIENsaW50b24tTGFrZSAtIDI2MzcgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2M4MGI4Y2IxOTJhMTQxZDBiYTc4YzE0NjhjMDdlMmQ4LnNldENvbnRlbnQoaHRtbF80YTZkZjAyYTcxOTA0NzRlOTI4NzgzZWY2OWNjYWJjMSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl83OWFlNjg3YzU0NTE0ZDA1ODg0MWFiMjBmZGRiOTg5YS5iaW5kUG9wdXAocG9wdXBfYzgwYjhjYjE5MmExNDFkMGJhNzhjMTQ2OGMwN2UyZDgpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfYTRlZjhmNTYyNzQwNDI2OTk0M2VmNWI4YjJkZDY2YWMgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44ODU0MTgxOTI0LC04Ny42NDE5MzJdLAogICAgICAgICAgICAgICAgNTEuMzYwMDg0MTk3MywKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyNlMjdlYTYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNlMjdlYTYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfZjE1ZmRmYzcwMjU2NDliOWEwMDJiNjc3ZGY4NTJiY2UgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfYjY2MzY2OWE3MDZmNDU4NTk1MDQyMTI1YjU5Nzk5YWMgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sX2I2NjM2NjlhNzA2ZjQ1ODU5NTA0MjEyNWI1OTc5OWFjIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBDbGludG9uLUxha2UgLSAyNjM3IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9mMTVmZGZjNzAyNTY0OWI5YTAwMmI2NzdkZjg1MmJjZS5zZXRDb250ZW50KGh0bWxfYjY2MzY2OWE3MDZmNDU4NTk1MDQyMTI1YjU5Nzk5YWMpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfYTRlZjhmNTYyNzQwNDI2OTk0M2VmNWI4YjJkZDY2YWMuYmluZFBvcHVwKHBvcHVwX2YxNWZkZmM3MDI1NjQ5YjlhMDAyYjY3N2RmODUyYmNlKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2I0Mzc4MDJiOWRjZjQ2YjQ4OWFiZGU2Yzc5YTU3NzRjID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODg1MTk5NDQyMywtODcuNzE2NDcwOTA1NV0sCiAgICAgICAgICAgICAgICAyNi41NDA3MTg3MDE3LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzAwOWIzYScsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzAwOWIzYScsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF84YmQwNTM2N2I3OWQ0MmZjOTgxZGQ0MzhjMmE4M2Q4YiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8xOGE2NmY1NDE2OTM0NzZhOWU4YWFlZTkxZTliNDVmOSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfMThhNjZmNTQxNjkzNDc2YTllOGFhZWU5MWU5YjQ1ZjkiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIENvbnNlcnZhdG9yeSAtIDcwNCBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfOGJkMDUzNjdiNzlkNDJmYzk4MWRkNDM4YzJhODNkOGIuc2V0Q29udGVudChodG1sXzE4YTY2ZjU0MTY5MzQ3NmE5ZThhYWVlOTFlOWI0NWY5KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2I0Mzc4MDJiOWRjZjQ2YjQ4OWFiZGU2Yzc5YTU3NzRjLmJpbmRQb3B1cChwb3B1cF84YmQwNTM2N2I3OWQ0MmZjOTgxZGQ0MzhjMmE4M2Q4Yik7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9mMmIxYzliMDBlYjQ0ODk1YjRhZjE3NzExMDY4NWE1ZCA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjk4NDI0NiwtODcuODM3NzI4XSwKICAgICAgICAgICAgICAgIDYzLjYyNzQ2NTU2MDEsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2FiYTgzOTZjYTdjMTRhNTM5YzU5ODI3M2EzMTM0ZDgyID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzNiZDRiNmMwZmRhZDQ2ZTlhMDk0NWJjMzQ4NjU1ODRmID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF8zYmQ0YjZjMGZkYWQ0NmU5YTA5NDViYzM0ODY1NTg0ZiIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgQ3VtYmVybGFuZCAtIDQwNDggZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2FiYTgzOTZjYTdjMTRhNTM5YzU5ODI3M2EzMTM0ZDgyLnNldENvbnRlbnQoaHRtbF8zYmQ0YjZjMGZkYWQ0NmU5YTA5NDViYzM0ODY1NTg0Zik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl9mMmIxYzliMDBlYjQ0ODk1YjRhZjE3NzExMDY4NWE1ZC5iaW5kUG9wdXAocG9wdXBfYWJhODM5NmNhN2MxNGE1MzljNTk4MjczYTMxMzRkODIpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfOTlmOGE4N2VkNTY5NDczZWJmMTRmMWQ0ZWExNDg1NWYgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS45NjY0Nzg4MzYzLC04Ny42Nzg0MDkxODY3XSwKICAgICAgICAgICAgICAgIDQxLjg1OTE2MjkwMjUsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjNjIzNjFiJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjNjIzNjFiJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzI1MTU1MTUzOGVjODQxODk4YjhiY2RkNzU5MmYyOWU1ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2ViNTdmZGIwZDA2YjRkY2Q5YzFkNWM2OGFiMjQ4OTAzID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF9lYjU3ZmRiMGQwNmI0ZGNkOWMxZDVjNjhhYjI0ODkwMyIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgRGFtZW4tQnJvd24gLSAxNzUyIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8yNTE1NTE1MzhlYzg0MTg5OGI4YmNkZDc1OTJmMjllNS5zZXRDb250ZW50KGh0bWxfZWI1N2ZkYjBkMDZiNGRjZDljMWQ1YzY4YWIyNDg5MDMpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfOTlmOGE4N2VkNTY5NDczZWJmMTRmMWQ0ZWExNDg1NWYuYmluZFBvcHVwKHBvcHVwXzI1MTU1MTUzOGVjODQxODk4YjhiY2RkNzU5MmYyOWU1KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzAxYWNmYjc3MGY0MjRjM2Q5ODExMjExMGNmNjZkODJiID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODU0MjU3MTkyNCwtODcuNjc2MTI1XSwKICAgICAgICAgICAgICAgIDMwLjI3MzY4OTk0MTQsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjZTI3ZWE2JywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjZTI3ZWE2JywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzRkZjg4MGY1MmI1NjRlN2U5MzUxOTU4YjM1YmUyYmUwID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzg2MzYzNDEyNWMxNTRiNjg5NjdmZTQzZjUxODE3ZDM3ID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF84NjM2MzQxMjVjMTU0YjY4OTY3ZmU0M2Y1MTgxN2QzNyIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgRGFtZW4tQ2VybWFrIC0gOTE2IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF80ZGY4ODBmNTJiNTY0ZTdlOTM1MTk1OGIzNWJlMmJlMC5zZXRDb250ZW50KGh0bWxfODYzNjM0MTI1YzE1NGI2ODk2N2ZlNDNmNTE4MTdkMzcpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfMDFhY2ZiNzcwZjQyNGMzZDk4MTEyMTEwY2Y2NmQ4MmIuYmluZFBvcHVwKHBvcHVwXzRkZjg4MGY1MmI1NjRlN2U5MzUxOTU4YjM1YmUyYmUwKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzFkY2JhMDA1ZTZiMTQ5NzdhZDA1MzEwOGM3ZTliNjRkID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuOTA5NzQ0LC04Ny42NzcxMzddLAogICAgICAgICAgICAgICAgNjcuNjQzNjgwMTc5NSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMGExZGUnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwMGExZGUnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfODc0NGFmNDI1Y2ZhNGU0N2FjOGQzNzdiNWYxMTFjZjUgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfNjcyYjE1MjU2ZjUyNDMzOTkzOWU4MjQxYmM5YjE4OWQgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzY3MmIxNTI1NmY1MjQzMzk5MzllODI0MWJjOWIxODlkIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBEYW1lbi9NaWx3YXVrZWUgLSA0NTc1IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF84NzQ0YWY0MjVjZmE0ZTQ3YWM4ZDM3N2I1ZjExMWNmNS5zZXRDb250ZW50KGh0bWxfNjcyYjE1MjU2ZjUyNDMzOTkzOWU4MjQxYmM5YjE4OWQpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfMWRjYmEwMDVlNmIxNDk3N2FkMDUzMTA4YzdlOWI2NGQuYmluZFBvcHVwKHBvcHVwXzg3NDRhZjQyNWNmYTRlNDdhYzhkMzc3YjVmMTExY2Y1KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzNiZjlmMTQyNzRiODRmNWJiZmFjMDNmNjAxZjkxOTBlID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDIuMDQ3ODEyNjA2LC04Ny42ODM4MjQ5MDc4XSwKICAgICAgICAgICAgICAgIDU3LjcwNjAzNTk0MTcsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjNTIyMzk4JywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjNTIyMzk4JywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2FiNmM4NWFhOTdmZDRiMGNiZTk5ODZhYjM4NjE2MWU3ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzExY2U4ZWJlYmJkMjQ5YWZiOTU4ZjJmMWNlN2MyOTI0ID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF8xMWNlOGViZWJiZDI0OWFmYjk1OGYyZjFjZTdjMjkyNCIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgRGF2aXMgLSAzMzI5IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9hYjZjODVhYTk3ZmQ0YjBjYmU5OTg2YWIzODYxNjFlNy5zZXRDb250ZW50KGh0bWxfMTFjZThlYmViYmQyNDlhZmI5NThmMmYxY2U3YzI5MjQpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfM2JmOWYxNDI3NGI4NGY1YmJmYWMwM2Y2MDFmOTE5MGUuYmluZFBvcHVwKHBvcHVwX2FiNmM4NWFhOTdmZDRiMGNiZTk5ODZhYjM4NjE2MWU3KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzY2YWVjZjNjOGE4MDQ1MDNiM2JkNDhiNjU4NjkzYzg3ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDIuMDQ3NjA3Mzk0LC04Ny42ODM4MjQ5MDc4XSwKICAgICAgICAgICAgICAgIDU3LjcwNjAzNTk0MTcsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjOGU1N2UwJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjOGU1N2UwJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzNhZjEwNjMxZWIxODQ5NTJhN2ZmNWI5OTNmOGVhZDg1ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2VkODc1NDdkY2M4MTRiMDc4YjM0N2NiOTQ1ZDhhY2IyID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF9lZDg3NTQ3ZGNjODE0YjA3OGIzNDdjYjk0NWQ4YWNiMiIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgRGF2aXMgLSAzMzI5IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8zYWYxMDYzMWViMTg0OTUyYTdmZjViOTkzZjhlYWQ4NS5zZXRDb250ZW50KGh0bWxfZWQ4NzU0N2RjYzgxNGIwNzhiMzQ3Y2I5NDVkOGFjYjIpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfNjZhZWNmM2M4YTgwNDUwM2IzYmQ0OGI2NTg2OTNjODcuYmluZFBvcHVwKHBvcHVwXzNhZjEwNjMxZWIxODQ5NTJhN2ZmNWI5OTNmOGVhZDg1KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzYwZDc4MDY4MzA4NTQ0OGM4Yzk4MDQ2ZDlkZjViYjdhID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDIuMDQxNzU3NjA2LC04Ny42ODE4ODM5MDc4XSwKICAgICAgICAgICAgICAgIDI2LjYyNTE3NDc2NDIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjNTIyMzk4JywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjNTIyMzk4JywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2FmMzU1NzYxMjg5MzQ3NzY4ZTc4YTVjYzMwMTBiNzM0ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzYyNWMzYzIwMjc2ZDQ1YTdiZWZhZDA0MzI3YTg1M2MxID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF82MjVjM2MyMDI3NmQ0NWE3YmVmYWQwNDMyN2E4NTNjMSIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgRGVtcHN0ZXIgLSA3MDggZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2FmMzU1NzYxMjg5MzQ3NzY4ZTc4YTVjYzMwMTBiNzM0LnNldENvbnRlbnQoaHRtbF82MjVjM2MyMDI3NmQ0NWE3YmVmYWQwNDMyN2E4NTNjMSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl82MGQ3ODA2ODMwODU0NDhjOGM5ODA0NmQ5ZGY1YmI3YS5iaW5kUG9wdXAocG9wdXBfYWYzNTU3NjEyODkzNDc3NjhlNzhhNWNjMzAxMGI3MzQpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfM2MxMjIxOGNlZGIyNGJkNDkxNWZlNjFhODRhMzkzNjggPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0Mi4wNDE1NTIzOTQsLTg3LjY4MTg4MzkwNzhdLAogICAgICAgICAgICAgICAgMjYuNjI1MTc0NzY0MiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyM4ZTU3ZTAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyM4ZTU3ZTAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfYzNkMjc3MWM4YWU4NDBlNjgwMTA1Y2JlMWI3ZjAzY2EgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZDg2ODkxYmE0ZTk1NDkyOWE2MjRiYTgwZWE2NTM1Y2YgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sX2Q4Njg5MWJhNGU5NTQ5MjlhNjI0YmE4MGVhNjUzNWNmIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBEZW1wc3RlciAtIDcwOCBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfYzNkMjc3MWM4YWU4NDBlNjgwMTA1Y2JlMWI3ZjAzY2Euc2V0Q29udGVudChodG1sX2Q4Njg5MWJhNGU5NTQ5MjlhNjI0YmE4MGVhNjUzNWNmKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzNjMTIyMThjZWRiMjRiZDQ5MTVmZTYxYTg0YTM5MzY4LmJpbmRQb3B1cChwb3B1cF9jM2QyNzcxYzhhZTg0MGU2ODAxMDVjYmUxYjdmMDNjYSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl83ZGJmYWMxYTNlNTc0OTBkOTUyODA0OGFmMjQwNThiNCA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQyLjAzODc1ODE2MzcsLTg3Ljc1MTY4OTE4NjddLAogICAgICAgICAgICAgICAgNDAuODM2MDY0NTA0NiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyNmOWUzMDAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNmOWUzMDAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfNTg0ODdhMGI1MWY0NDk0YjhmYjQ5NmFmZDQxYTNkYjQgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfY2U0NzNiMDUxZWMwNGE2ZWJmZWQyNTc4MGU0ZmNiOWQgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sX2NlNDczYjA1MWVjMDRhNmViZmVkMjU3ODBlNGZjYjlkIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBEZW1wc3Rlci1Ta29raWUgLSAxNjY3IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF81ODQ4N2EwYjUxZjQ0OTRiOGZiNDk2YWZkNDFhM2RiNC5zZXRDb250ZW50KGh0bWxfY2U0NzNiMDUxZWMwNGE2ZWJmZWQyNTc4MGU0ZmNiOWQpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfN2RiZmFjMWEzZTU3NDkwZDk1MjgwNDhhZjI0MDU4YjQuYmluZFBvcHVwKHBvcHVwXzU4NDg3YTBiNTFmNDQ5NGI4ZmI0OTZhZmQ0MWEzZGI0KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzQ5NTBkMjg0ZTcxYTRmNDJiODg0NDg1NTViOTdmNjZmID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuOTMyOTI0ODM2MywtODcuNjUyOTAxMTg2N10sCiAgICAgICAgICAgICAgICA2My4wMzY5Mzc5OTQ2LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF83YzhjNzMzYTJmNWY0MWM4YTg2NDVlN2RjMzgwY2Y4ZiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF83NDgxNWUyZGZhYzQ0NDg0ODBjNWEzNzZmNTc1ZTI3OSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfNzQ4MTVlMmRmYWM0NDQ4NDgwYzVhMzc2ZjU3NWUyNzkiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIERpdmVyc2V5IC0gMzk3MyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfN2M4YzczM2EyZjVmNDFjOGE4NjQ1ZTdkYzM4MGNmOGYuc2V0Q29udGVudChodG1sXzc0ODE1ZTJkZmFjNDQ0ODQ4MGM1YTM3NmY1NzVlMjc5KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzQ5NTBkMjg0ZTcxYTRmNDJiODg0NDg1NTViOTdmNjZmLmJpbmRQb3B1cChwb3B1cF83YzhjNzMzYTJmNWY0MWM4YTg2NDVlN2RjMzgwY2Y4Zik7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9iZDBmYjRhZmQ0YzU0NzhmYmEwYzhmNmQ3ZTQwMjFiZSA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjkzMjYyOTM5NCwtODcuNjUzNDEyOTA3OF0sCiAgICAgICAgICAgICAgICA2My4wMzY5Mzc5OTQ2LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzhlNTdlMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzhlNTdlMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8zMjg0MjQ5NzFlZWQ0MTg0OGQwMTZlOThlYTVhODk2ZiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8zY2VlN2U1MzY4Mzc0MGFmYWY3Yzk5OThlYThmZTQxMyA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfM2NlZTdlNTM2ODM3NDBhZmFmN2M5OTk4ZWE4ZmU0MTMiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIERpdmVyc2V5IC0gMzk3MyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMzI4NDI0OTcxZWVkNDE4NDhkMDE2ZTk4ZWE1YTg5NmYuc2V0Q29udGVudChodG1sXzNjZWU3ZTUzNjgzNzQwYWZhZjdjOTk5OGVhOGZlNDEzKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2JkMGZiNGFmZDRjNTQ3OGZiYTBjOGY2ZDdlNDAyMWJlLmJpbmRQb3B1cChwb3B1cF8zMjg0MjQ5NzFlZWQ0MTg0OGQwMTZlOThlYTVhODk2Zik7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl83ZDQ4MGI3NDhjYWE0MGE4ODRhZmY3NWE5OTJhZGU1MyA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjkwMzM1NSwtODcuNjY2MTk2XSwKICAgICAgICAgICAgICAgIDY1Ljg5ODg1MjAzOTYsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzQ4NjZhOGUwN2VjYzQ3Njc4MjNhM2MyNTE2ZmViYTMzID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzllMGJmMmY2YzFiZjQyZTBhNGQ2MjdiODQxOTE3MzYyID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF85ZTBiZjJmNmMxYmY0MmUwYTRkNjI3Yjg0MTkxNzM2MiIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgRGl2aXNpb24vTWlsd2F1a2VlIC0gNDM0MiBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNDg2NmE4ZTA3ZWNjNDc2NzgyM2EzYzI1MTZmZWJhMzMuc2V0Q29udGVudChodG1sXzllMGJmMmY2YzFiZjQyZTBhNGQ2MjdiODQxOTE3MzYyKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzdkNDgwYjc0OGNhYTQwYTg4NGFmZjc1YTk5MmFkZTUzLmJpbmRQb3B1cChwb3B1cF80ODY2YThlMDdlY2M0NzY3ODIzYTNjMjUxNmZlYmEzMyk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl85ZjYzOTZlODJjOTA0Nzc2OGI5YThhY2MxMjU1NjIyYiA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjc4MDYwNDQ0MjMsLTg3LjYwNTgwNDkwNTVdLAogICAgICAgICAgICAgICAgMzMuNzg3NTg3OTQ5OCwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMDliM2EnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwMDliM2EnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfZDVlOGVjNTdjOGExNDBiNmI3NTRiNWUzZGE5Njk1MzcgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMzQ1YTVlZjI3Zjk5NDg3Yjg4MGU1NzhmNTgzZDdkNWEgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzM0NWE1ZWYyN2Y5OTQ4N2I4ODBlNTc4ZjU4M2Q3ZDVhIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBFYXN0IDYzcmQtQ290dGFnZSBHcm92ZSAtIDExNDEgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2Q1ZThlYzU3YzhhMTQwYjZiNzU0YjVlM2RhOTY5NTM3LnNldENvbnRlbnQoaHRtbF8zNDVhNWVmMjdmOTk0ODdiODgwZTU3OGY1ODNkN2Q1YSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl85ZjYzOTZlODJjOTA0Nzc2OGI5YThhY2MxMjU1NjIyYi5iaW5kUG9wdXAocG9wdXBfZDVlOGVjNTdjOGExNDBiNmI3NTRiNWUzZGE5Njk1MzcpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfNjBkYmY2OWZlZWRjNGU3NGI3NTk1Y2FkMDhhOWQ1NzMgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44NzQyNTcsLTg3LjgxNzAxOF0sCiAgICAgICAgICAgICAgICA1NS44NjE2MjcyODM3LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzAwYTFkZScsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzAwYTFkZScsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF82MTA0YWMyZTFkZjM0ZGQxODFmZjRjMTUxYmI1MzQ5OCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF80ZjgwYTZmMzZmZmQ0ZWY0Yjc1ZWExOThkNjkxN2ExYyA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfNGY4MGE2ZjM2ZmZkNGVmNGI3NWVhMTk4ZDY5MTdhMWMiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEZvcmVzdCBQYXJrIC0gMzEyMCBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNjEwNGFjMmUxZGYzNGRkMTgxZmY0YzE1MWJiNTM0OTguc2V0Q29udGVudChodG1sXzRmODBhNmYzNmZmZDRlZjRiNzVlYTE5OGQ2OTE3YTFjKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzYwZGJmNjlmZWVkYzRlNzRiNzU5NWNhZDA4YTlkNTczLmJpbmRQb3B1cChwb3B1cF82MTA0YWMyZTFkZjM0ZGQxODFmZjRjMTUxYmI1MzQ5OCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9iYTQxZjVkMGY5NGY0MDlkYjQwZDRiMmZiYmUxNTYwNSA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQyLjA1NDI2MjYwNiwtODcuNjgzODQxOTA3OF0sCiAgICAgICAgICAgICAgICAyNS43MTcwMDg1MzEsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjNTIyMzk4JywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjNTIyMzk4JywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzE2ZWU4MzVmYmVlZjQzMzE5NzZjNzMzYWEyYmM5Njg0ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzgzOWIwN2I4NjBmNTQwNWFhZDFlNDdlNjdhZGY5OGExID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF84MzliMDdiODYwZjU0MDVhYWQxZTQ3ZTY3YWRmOThhMSIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgRm9zdGVyIC0gNjYxIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8xNmVlODM1ZmJlZWY0MzMxOTc2YzczM2FhMmJjOTY4NC5zZXRDb250ZW50KGh0bWxfODM5YjA3Yjg2MGY1NDA1YWFkMWU0N2U2N2FkZjk4YTEpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfYmE0MWY1ZDBmOTRmNDA5ZGI0MGQ0YjJmYmJlMTU2MDUuYmluZFBvcHVwKHBvcHVwXzE2ZWU4MzVmYmVlZjQzMzE5NzZjNzMzYWEyYmM5Njg0KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2RiNGM4MTFjNWY1NzRhMDc5NGYxODg4YjMxMDg3NDhlID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDIuMDU0MDU3Mzk0LC04Ny42ODM4NDE5MDc4XSwKICAgICAgICAgICAgICAgIDI1LjcxNzAwODUzMSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyM4ZTU3ZTAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyM4ZTU3ZTAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfZGNjZjhmODJkYWI4NGFmZjhhMzk5Mjc5MmUzMjU2YzAgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfODA2MDdlMjkzM2QyNDRiMDhlYTQ0MDEyYzMyZjIxOGMgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzgwNjA3ZTI5MzNkMjQ0YjA4ZWE0NDAxMmMzMmYyMThjIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBGb3N0ZXIgLSA2NjEgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2RjY2Y4ZjgyZGFiODRhZmY4YTM5OTI3OTJlMzI1NmMwLnNldENvbnRlbnQoaHRtbF84MDYwN2UyOTMzZDI0NGIwOGVhNDQwMTJjMzJmMjE4Yyk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl9kYjRjODExYzVmNTc0YTA3OTRmMTg4OGIzMTA4NzQ4ZS5iaW5kUG9wdXAocG9wdXBfZGNjZjhmODJkYWI4NGFmZjhhMzk5Mjc5MmUzMjU2YzApOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfMzE0MWNmZmQ5MTYyNDNmNTlhZDJjYmFiMDMxOTllZDEgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS45NjYyMzg4MzYzLC04Ny43MDE0MTQxODY3XSwKICAgICAgICAgICAgICAgIDMyLjM2Mzc4Nzc4ODUsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjNjIzNjFiJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjNjIzNjFiJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzgyNjI4NTZjNjEwYzQ1NDJiMWNhMTNhMGRjZDliZjYxID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2Q5NmRiMzc3NjA0NDQ0NDlhOGRiZmRkOTJiYmQ3YzI3ID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF9kOTZkYjM3NzYwNDQ0NDQ5YThkYmZkZDkyYmJkN2MyNyIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgRnJhbmNpc2NvIC0gMTA0NyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfODI2Mjg1NmM2MTBjNDU0MmIxY2ExM2EwZGNkOWJmNjEuc2V0Q29udGVudChodG1sX2Q5NmRiMzc3NjA0NDQ0NDlhOGRiZmRkOTJiYmQ3YzI3KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzMxNDFjZmZkOTE2MjQzZjU5YWQyY2JhYjAzMTk5ZWQxLmJpbmRQb3B1cChwb3B1cF84MjYyODU2YzYxMGM0NTQyYjFjYTEzYTBkY2Q5YmY2MSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl82Y2U1ZGE5NTg1MTM0NDU2ODRhMWQzZTAwZWVjZjUyOCA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjkyNTI0MzgzNjMsLTg3LjY1MjYzNjE4NjddLAogICAgICAgICAgICAgICAgMTAxLjMxNTY2MjMyOSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyM2MjM2MWInLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyM2MjM2MWInLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfMmNhZmVmNGU4NDE1NGRkMmIwNjNlM2U2YzE4ZjcyNmEgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfNjVjZjI3MTE5MjA1NDUwMDkxYTAwZTJjN2YzYjY2NTQgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzY1Y2YyNzExOTIwNTQ1MDA5MWEwMGUyYzdmM2I2NjU0IiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBGdWxsZXJ0b24gLSAxMDI2NCBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMmNhZmVmNGU4NDE1NGRkMmIwNjNlM2U2YzE4ZjcyNmEuc2V0Q29udGVudChodG1sXzY1Y2YyNzExOTIwNTQ1MDA5MWEwMGUyYzdmM2I2NjU0KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzZjZTVkYTk1ODUxMzQ0NTY4NGExZDNlMDBlZWNmNTI4LmJpbmRQb3B1cChwb3B1cF8yY2FmZWY0ZTg0MTU0ZGQyYjA2M2UzZTZjMThmNzI2YSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl82ODAyYWFhNTk1NWQ0NDRhYmE2Yjk4NzhjMTcxZjJmMSA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjkyNDk0ODM5NCwtODcuNjUzMTQ3OTA3OF0sCiAgICAgICAgICAgICAgICAxMDEuMzE1NjYyMzI5LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzhlNTdlMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzhlNTdlMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF82OWUzNDMwMDNjNTU0YjhmYWNkODMzYmEwZjEwZGEyNyA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF80MDkyZDY5YmFlNTE0MDkwOWYyOGVhZTg3NDAxOWM5NyA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfNDA5MmQ2OWJhZTUxNDA5MDlmMjhlYWU4NzQwMTljOTciICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEZ1bGxlcnRvbiAtIDEwMjY0IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF82OWUzNDMwMDNjNTU0YjhmYWNkODMzYmEwZjEwZGEyNy5zZXRDb250ZW50KGh0bWxfNDA5MmQ2OWJhZTUxNDA5MDlmMjhlYWU4NzQwMTljOTcpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfNjgwMmFhYTU5NTVkNDQ0YWJhNmI5ODc4YzE3MWYyZjEuYmluZFBvcHVwKHBvcHVwXzY5ZTM0MzAwM2M1NTRiOGZhY2Q4MzNiYTBmMTBkYTI3KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzkzYTZiN2JiZjBkMjQ1ZTVhN2Y2YjUwNjY5NjM4OTI5ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuOTI0NzU1NTU3NywtODcuNjUyODEzOTA1NV0sCiAgICAgICAgICAgICAgICAxMDEuMzE1NjYyMzI5LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9iNmQyOWQwYTdkOTk0MWQxOThhNzE0MWY5YjBkMjYyMCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9iMzYyZjY4NzgyNmI0NDBmYTk2OGNmYmM0MmQwNzI1NyA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfYjM2MmY2ODc4MjZiNDQwZmE5NjhjZmJjNDJkMDcyNTciICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEZ1bGxlcnRvbiAtIDEwMjY0IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9iNmQyOWQwYTdkOTk0MWQxOThhNzE0MWY5YjBkMjYyMC5zZXRDb250ZW50KGh0bWxfYjM2MmY2ODc4MjZiNDQwZmE5NjhjZmJjNDJkMDcyNTcpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfOTNhNmI3YmJmMGQyNDVlNWE3ZjZiNTA2Njk2Mzg5MjkuYmluZFBvcHVwKHBvcHVwX2I2ZDI5ZDBhN2Q5OTQxZDE5OGE3MTQxZjliMGQyNjIwKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzUyMWNkNzY3Y2VhMTQ0MWU5OGUyYjNlOGU4NWYzNDc5ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuNzk1MTI0NTU3NywtODcuNjMxMTA0OTA1NV0sCiAgICAgICAgICAgICAgICA1OC43MjcwOTA2MzIzLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8xMDZkNmFiNDljMzE0ZDYyYjZkZTcwNzBlNGM3YmU0MSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF85M2UwNzBlOTI4YmU0MTdkOTVhMWMyMzY4Mzk4ODhhMiA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfOTNlMDcwZTkyOGJlNDE3ZDk1YTFjMjM2ODM5ODg4YTIiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEdhcmZpZWxkLURhbiBSeWFuIC0gMzQ0OCBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMTA2ZDZhYjQ5YzMxNGQ2MmI2ZGU3MDcwZTRjN2JlNDEuc2V0Q29udGVudChodG1sXzkzZTA3MGU5MjhiZTQxN2Q5NWExYzIzNjgzOTg4OGEyKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzUyMWNkNzY3Y2VhMTQ0MWU5OGUyYjNlOGU4NWYzNDc5LmJpbmRQb3B1cChwb3B1cF8xMDZkNmFiNDljMzE0ZDYyYjZkZTcwNzBlNGM3YmU0MSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9kYzRkMWMwNTM1NjE0YzM3YjZkOTcwMWNhY2ZkNjFkNCA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjc5NTQ2NzQ0MjMsLTg3LjYxODI3NDkwNTVdLAogICAgICAgICAgICAgICAgMzcuOTAzNDgwNTA2NSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMDliM2EnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwMDliM2EnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfN2QzZTc5MWE3YjVkNDZiMjgwYTMxY2QxZmMwMzg0OGUgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfNjgwZDQxMzc5YTQ3NDllNGIwNjEyZDNkMjAzZDM3YTMgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzY4MGQ0MTM3OWE0NzQ5ZTRiMDYxMmQzZDIwM2QzN2EzIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBHYXJmaWVsZC1Tb3V0aCBFbGV2YXRlZCAtIDE0MzYgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzdkM2U3OTFhN2I1ZDQ2YjI4MGEzMWNkMWZjMDM4NDhlLnNldENvbnRlbnQoaHRtbF82ODBkNDEzNzlhNDc0OWU0YjA2MTJkM2QyMDNkMzdhMyk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl9kYzRkMWMwNTM1NjE0YzM3YjZkOTcwMWNhY2ZkNjFkNC5iaW5kUG9wdXAocG9wdXBfN2QzZTc5MWE3YjVkNDZiMjgwYTMxY2QxZmMwMzg0OGUpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfZTA1NmY2NDc2ZTllNDJiNmEzMTQzM2VkYjc1NmJmMDAgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44OTExODksLTg3LjY0NzI3OF0sCiAgICAgICAgICAgICAgICAzOS41OTU5NDE0MTU2LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzAwYTFkZScsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzAwYTFkZScsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF80MzZhMjg4ZjFiOTU0ZTY2YjY4Y2ZjN2UzMWZjYWU0NiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9mNDY2MGFjZjQxMjI0Zjg0Yjc5NzQ3ZGE2OGFjNDY0YyA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfZjQ2NjBhY2Y0MTIyNGY4NGI3OTc0N2RhNjhhYzQ2NGMiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEdyYW5kL01pbHdhdWtlZSAtIDE1NjcgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzQzNmEyODhmMWI5NTRlNjZiNjhjZmM3ZTMxZmNhZTQ2LnNldENvbnRlbnQoaHRtbF9mNDY2MGFjZjQxMjI0Zjg0Yjc5NzQ3ZGE2OGFjNDY0Yyk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl9lMDU2ZjY0NzZlOWU0MmI2YTMxNDMzZWRiNzU2YmYwMC5iaW5kUG9wdXAocG9wdXBfNDM2YTI4OGYxYjk1NGU2NmI2OGNmYzdlMzFmY2FlNDYpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfNzg2NDE2N2RmMGI4NDViOTk0ODdiY2NkNTNkYzJlYzggPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44OTEzNjk1NTc3LC04Ny42Mjc5Njg5MDU1XSwKICAgICAgICAgICAgICAgIDk3LjAxMDMxNTgyMDEsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjYzYwYzMwJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjYzYwYzMwJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2U2M2FjZmMyMWEwNjRmMzk5Y2VhZjY5ZGQyZWU2MmZmID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzkxMzg0OTJiOWFkNzQ3YWE4MTQzMjE3MmM4ZWJlZWY5ID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF85MTM4NDkyYjlhZDc0N2FhODE0MzIxNzJjOGViZWVmOSIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgR3JhbmQvU3RhdGUgLSA5NDExIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9lNjNhY2ZjMjFhMDY0ZjM5OWNlYWY2OWRkMmVlNjJmZi5zZXRDb250ZW50KGh0bWxfOTEzODQ5MmI5YWQ3NDdhYTgxNDMyMTcyYzhlYmVlZjkpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfNzg2NDE2N2RmMGI4NDViOTk0ODdiY2NkNTNkYzJlYzguYmluZFBvcHVwKHBvcHVwX2U2M2FjZmMyMWEwNjRmMzk5Y2VhZjY5ZGQyZWU2MmZmKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzJlMWNlYjcwNmVkODRjNzViZmYyYzAzNzVmNGM0YThiID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuOTkzMzY4NTU3NywtODcuNjU5MTQ5OTA1NV0sCiAgICAgICAgICAgICAgICA1Ny4zOTc2MDMyOTYsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjYzYwYzMwJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjYzYwYzMwJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzNiYjE1N2Y2MjA0NDQ4Mjg5OTc2MDk4MDlkNTg1ZDk5ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzc2ZmM0OTJmMWZjMjQ1OTI4MjgyMTYxZjUzODljYjIxID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF83NmZjNDkyZjFmYzI0NTkyODI4MjE2MWY1Mzg5Y2IyMSIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgR3JhbnZpbGxlIC0gMzI5NCBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfM2JiMTU3ZjYyMDQ0NDgyODk5NzYwOTgwOWQ1ODVkOTkuc2V0Q29udGVudChodG1sXzc2ZmM0OTJmMWZjMjQ1OTI4MjgyMTYxZjUzODljYjIxKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzJlMWNlYjcwNmVkODRjNzViZmYyYzAzNzVmNGM0YThiLmJpbmRQb3B1cChwb3B1cF8zYmIxNTdmNjIwNDQ0ODI4OTk3NjA5ODA5ZDU4NWQ5OSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8xYTUwM2I2ZGI2MDM0ZDc0YmFkNDkwZjA1Mjg2ZWUzZSA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg0NzAzOTgwNzYsLTg3LjY0ODIzOF0sCiAgICAgICAgICAgICAgICA0NS45NDkwNzc3MjkxLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2Y5NDYxYycsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2Y5NDYxYycsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF84NjA0NjUzMWQxMjA0N2YwYWNmZjk5OGNlMWJkYzMwMyA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF80Y2Y0MGY4ODk3OWQ0MzEwOTYyMThjZmE4ZWYzN2RiMSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfNGNmNDBmODg5NzlkNDMxMDk2MjE4Y2ZhOGVmMzdkYjEiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEhhbHN0ZWQtT3JhbmdlIC0gMjExMSBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfODYwNDY1MzFkMTIwNDdmMGFjZmY5OThjZTFiZGMzMDMuc2V0Q29udGVudChodG1sXzRjZjQwZjg4OTc5ZDQzMTA5NjIxOGNmYThlZjM3ZGIxKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzFhNTAzYjZkYjYwMzRkNzRiYWQ0OTBmMDUyODZlZTNlLmJpbmRQb3B1cChwb3B1cF84NjA0NjUzMWQxMjA0N2YwYWNmZjk5OGNlMWJkYzMwMyk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9lYjFjOTc1MTljNTQ0NTRkODYyYTQ1MDYyMzdkYzZkMCA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjc3OTIzODQ0MjMsLTg3LjY0NDE5MTkwNTVdLAogICAgICAgICAgICAgICAgMjYuMzYxNTA1NTg2NCwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMDliM2EnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwMDliM2EnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfMDRlMmY1MTA1YTBlNDZhZjkwOTM5ZDc2OGQ5N2UxMmEgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfYjJlYTZlZTQ3YWM0NDEyN2I4MTFlNGIyNjRlZmRmZDkgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sX2IyZWE2ZWU0N2FjNDQxMjdiODExZTRiMjY0ZWZkZmQ5IiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBIYWxzdGVkLzYzcmQgLSA2OTQgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzA0ZTJmNTEwNWEwZTQ2YWY5MDkzOWQ3NjhkOTdlMTJhLnNldENvbnRlbnQoaHRtbF9iMmVhNmVlNDdhYzQ0MTI3YjgxMWU0YjI2NGVmZGZkOSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl9lYjFjOTc1MTljNTQ0NTRkODYyYTQ1MDYyMzdkYzZkMC5iaW5kUG9wdXAocG9wdXBfMDRlMmY1MTA1YTBlNDZhZjkwOTM5ZDc2OGQ5N2UxMmEpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfYWRjOTVjNWUyMjc4NDE0MmI0ODk0OGRmM2RmZDA0NDQgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44NzM0OSwtODcuODA2NjYxXSwKICAgICAgICAgICAgICAgIDI4Ljk2NzMxOTAxMzcsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2U1MzJhODMwODU3ZTRlNzJiZDM3MTEyZDU2M2RmZjExID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzgxZmFmOGRjY2NkNTQ4ZjU4MDNmMjA5ZmE0MGQ3ZWIyID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF84MWZhZjhkY2NjZDU0OGY1ODAzZjIwOWZhNDBkN2ViMiIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgSGFybGVtLUZvcmVzdCBQYXJrIC0gODM5IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9lNTMyYTgzMDg1N2U0ZTcyYmQzNzExMmQ1NjNkZmYxMS5zZXRDb250ZW50KGh0bWxfODFmYWY4ZGNjY2Q1NDhmNTgwM2YyMDlmYTQwZDdlYjIpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfYWRjOTVjNWUyMjc4NDE0MmI0ODk0OGRmM2RmZDA0NDQuYmluZFBvcHVwKHBvcHVwX2U1MzJhODMwODU3ZTRlNzJiZDM3MTEyZDU2M2RmZjExKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzQwZjVhY2E2NDE3ZjRmYmU5YmRhM2YxYWNlNDQ0MjY5ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODg3MTQzNDQyMywtODcuODAzMTIzOTA1NV0sCiAgICAgICAgICAgICAgICA1NS41NTc2NTc1MzE3LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzAwOWIzYScsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzAwOWIzYScsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9jMTk5N2U4NGNiYWY0YzdjYTBkODBiZGM5ODlhZGYzMyA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9jMTJmZjc5YTRmNDU0ZDc5YmRiZWY2YzBmODkxYTUxOCA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfYzEyZmY3OWE0ZjQ1NGQ3OWJkYmVmNmMwZjg5MWE1MTgiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEhhcmxlbS1MYWtlIC0gMzA4NiBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfYzE5OTdlODRjYmFmNGM3Y2EwZDgwYmRjOTg5YWRmMzMuc2V0Q29udGVudChodG1sX2MxMmZmNzlhNGY0NTRkNzliZGJlZjZjMGY4OTFhNTE4KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzQwZjVhY2E2NDE3ZjRmYmU5YmRhM2YxYWNlNDQ0MjY5LmJpbmRQb3B1cChwb3B1cF9jMTk5N2U4NGNiYWY0YzdjYTBkODBiZGM5ODlhZGYzMyk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl80MmE5YmZmNmFiYzA0N2VmOTFhYzJmOTg5Y2YyYmVkOSA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjk4MjI3LC04Ny44MDg2XSwKICAgICAgICAgICAgICAgIDQ4LjE0NDgxNzQ1MTYsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2E5NjQ1ZDgzMjZlNDRjODVhMmQ3NmI2NzY4YmZkMWQ4ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2YxOGQ4MDY2MGMxZTRjZDI5NmZlZjMzMjIwZDVlN2U3ID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF9mMThkODA2NjBjMWU0Y2QyOTZmZWYzMzIyMGQ1ZTdlNyIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgSGFybGVtLU8mIzM5O0hhcmUgLSAyMzE3IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9hOTY0NWQ4MzI2ZTQ0Yzg1YTJkNzZiNjc2OGJmZDFkOC5zZXRDb250ZW50KGh0bWxfZjE4ZDgwNjYwYzFlNGNkMjk2ZmVmMzMyMjBkNWU3ZTcpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfNDJhOWJmZjZhYmMwNDdlZjkxYWMyZjk4OWNmMmJlZDkuYmluZFBvcHVwKHBvcHVwX2E5NjQ1ZDgzMjZlNDRjODVhMmQ3NmI2NzY4YmZkMWQ4KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzAxOTU2MTM4NWZmMzQ2M2FhYTI0YzFiZTFmZTIwYTNhID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODczNzQzNTU3NywtODcuNjI3NDI2OTA1NV0sCiAgICAgICAgICAgICAgICA1NS43NDk2NDI4NzI1LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF84NDczZTgyNjUwNTA0OTkyOTc1OTg2YTYwNTNlNTk2ZiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9mNTY0MjA5NjU2MWY0OTUxYjYxOTc0ZWJiOWUwNTAxMCA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfZjU2NDIwOTY1NjFmNDk1MWI2MTk3NGViYjllMDUwMTAiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEhhcnJpc29uIC0gMzEwOCBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfODQ3M2U4MjY1MDUwNDk5Mjk3NTk4NmE2MDUzZTU5NmYuc2V0Q29udGVudChodG1sX2Y1NjQyMDk2NTYxZjQ5NTFiNjE5NzRlYmI5ZTA1MDEwKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzAxOTU2MTM4NWZmMzQ2M2FhYTI0YzFiZTFmZTIwYTNhLmJpbmRQb3B1cChwb3B1cF84NDczZTgyNjUwNTA0OTkyOTc1OTg2YTYwNTNlNTk2Zik7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9lOTlhZDBlZTNlNDE0YmU2YTU3OTI5YjhlYWIzNDNkMSA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQyLjAxOTE2NTYwNiwtODcuNjczMTczOTA3OF0sCiAgICAgICAgICAgICAgICA3My41MzY1NTE4ODUxLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzUyMjM5OCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzUyMjM5OCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9lMTY0OGZjYzQ2YjY0MzhhOTFkMGY4NDY3Mjc2MDJiZiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9hNDg4Y2MwZDY4OTc0NjNjOWMyOTkzODJkMmE0MDQyYiA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfYTQ4OGNjMGQ2ODk3NDYzYzljMjk5MzgyZDJhNDA0MmIiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEhvd2FyZCAtIDU0MDcgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2UxNjQ4ZmNjNDZiNjQzOGE5MWQwZjg0NjcyNzYwMmJmLnNldENvbnRlbnQoaHRtbF9hNDg4Y2MwZDY4OTc0NjNjOWMyOTkzODJkMmE0MDQyYik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl9lOTlhZDBlZTNlNDE0YmU2YTU3OTI5YjhlYWIzNDNkMS5iaW5kUG9wdXAocG9wdXBfZTE2NDhmY2M0NmI2NDM4YTkxZDBmODQ2NzI3NjAyYmYpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfMDRjOWFmZGQxZTViNDdmN2IwMWVlYmNkY2JlN2E5YjQgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0Mi4wMTg5NjAzOTQsLTg3LjY3MzE3MzkwNzhdLAogICAgICAgICAgICAgICAgNzMuNTM2NTUxODg1MSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyM4ZTU3ZTAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyM4ZTU3ZTAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfMzViZmMxYWNmOWY4NDZjYjljYmFlMmUyNjAwZTYyN2IgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfYTE5OTc0Y2QwMWNiNDRhMzk4ZmY5ODIwZDFhYmYwNGIgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sX2ExOTk3NGNkMDFjYjQ0YTM5OGZmOTgyMGQxYWJmMDRiIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBIb3dhcmQgLSA1NDA3IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8zNWJmYzFhY2Y5Zjg0NmNiOWNiYWUyZTI2MDBlNjI3Yi5zZXRDb250ZW50KGh0bWxfYTE5OTc0Y2QwMWNiNDRhMzk4ZmY5ODIwZDFhYmYwNGIpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfMDRjOWFmZGQxZTViNDdmN2IwMWVlYmNkY2JlN2E5YjQuYmluZFBvcHVwKHBvcHVwXzM1YmZjMWFjZjlmODQ2Y2I5Y2JhZTJlMjYwMGU2MjdiKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2JiYThjNzdjN2U4MDRjNTBiZjVjNWFjNDQ5ODE2OWRmID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDIuMDE4NzY3NTU3NywtODcuNjcyODM5OTA1NV0sCiAgICAgICAgICAgICAgICA3My41MzY1NTE4ODUxLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8zZDAxMjkwZTc0Y2M0M2FjOThkMDBhZjMzYmRjYTg3ZiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8xOTgzOGQxYzljNjQ0ZDAwYjZhYzYzZTJjYWNiNmQxOCA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfMTk4MzhkMWM5YzY0NGQwMGI2YWM2M2UyY2FjYjZkMTgiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEhvd2FyZCAtIDU0MDcgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzNkMDEyOTBlNzRjYzQzYWM5OGQwMGFmMzNiZGNhODdmLnNldENvbnRlbnQoaHRtbF8xOTgzOGQxYzljNjQ0ZDAwYjZhYzYzZTJjYWNiNmQxOCk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl9iYmE4Yzc3YzdlODA0YzUwYmY1YzVhYzQ0OTgxNjlkZi5iaW5kUG9wdXAocG9wdXBfM2QwMTI5MGU3NGNjNDNhYzk4ZDAwYWYzM2JkY2E4N2YpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfMjFjMmMxNDU1M2M0NDQ1YjgyMTc2ZjUyNTI2Y2IyZjMgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0Mi4wMTg4NzAxNjM3LC04Ny42NzI2NjIxODY3XSwKICAgICAgICAgICAgICAgIDczLjUzNjU1MTg4NTEsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjZjllMzAwJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjZjllMzAwJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzMyMWUzMzk3NzNmZDQyOGE4MmVhN2NkN2E0OTI0ZjcyID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzA2YWY2NThiYjFhYTRkN2JiMTZhZjI2ZDg1YjlmZWI3ID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF8wNmFmNjU4YmIxYWE0ZDdiYjE2YWYyNmQ4NWI5ZmViNyIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgSG93YXJkIC0gNTQwNyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMzIxZTMzOTc3M2ZkNDI4YTgyZWE3Y2Q3YTQ5MjRmNzIuc2V0Q29udGVudChodG1sXzA2YWY2NThiYjFhYTRkN2JiMTZhZjI2ZDg1YjlmZWI3KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzIxYzJjMTQ1NTNjNDQ0NWI4MjE3NmY1MjUyNmNiMmYzLmJpbmRQb3B1cChwb3B1cF8zMjFlMzM5NzczZmQ0MjhhODJlYTdjZDdhNDkyNGY3Mik7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8wMTExNGZmMDZkNTI0ODE0ODY1M2E0Y2U4MDMyMzMxZiA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjgyMjAyNzQ0MjMsLTg3LjYyMTMxODkwNTVdLAogICAgICAgICAgICAgICAgMjYuMzE5NTUxMTI1NSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMDliM2EnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwMDliM2EnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfM2E3NWJhZWVkNTE1NDU2Njk2YWQ4MzIwYWY2YWQyMzkgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfNmNlN2UxYjgwNzFkNDE1Njk0NTJiMzIxMDg2ZGJiMzYgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzZjZTdlMWI4MDcxZDQxNTY5NDUyYjMyMTA4NmRiYjM2IiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBJbmRpYW5hIC0gNjkyIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8zYTc1YmFlZWQ1MTU0NTY2OTZhZDgzMjBhZjZhZDIzOS5zZXRDb250ZW50KGh0bWxfNmNlN2UxYjgwNzFkNDE1Njk0NTJiMzIxMDg2ZGJiMzYpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfMDExMTRmZjA2ZDUyNDgxNDg2NTNhNGNlODAzMjMzMWYuYmluZFBvcHVwKHBvcHVwXzNhNzViYWVlZDUxNTQ1NjY5NmFkODMyMGFmNmFkMjM5KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzZiOThmMDA3ODhiZjQ1OGQ4OWRhNjY5ZmUyODFlZWMzID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuOTU0NzEzODM2MywtODcuNjc0NjM4MTg2N10sCiAgICAgICAgICAgICAgICA0NS41MzIxNzAzMjU3LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9mNGUyMWI0ZDk1MGI0Mjk3ODFkZWUzYTI3ZWI0NjUzOSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9iM2FhNDMxMDBhZmQ0NmU2ODNhMGQ2NmMzZmFjYjMzMiA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfYjNhYTQzMTAwYWZkNDZlNjgzYTBkNjZjM2ZhY2IzMzIiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIElydmluZyBQYXJrLUJyb3duIC0gMjA3MyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZjRlMjFiNGQ5NTBiNDI5NzgxZGVlM2EyN2ViNDY1Mzkuc2V0Q29udGVudChodG1sX2IzYWE0MzEwMGFmZDQ2ZTY4M2EwZDY2YzNmYWNiMzMyKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzZiOThmMDA3ODhiZjQ1OGQ4OWRhNjY5ZmUyODFlZWMzLmJpbmRQb3B1cChwb3B1cF9mNGUyMWI0ZDk1MGI0Mjk3ODFkZWUzYTI3ZWI0NjUzOSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8zZWUxZDhiM2NiMWM0NmQxYjA4YjYxN2Y5ZWQ0NmNkNSA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjk1MjkyNSwtODcuNzI4OTI5XSwKICAgICAgICAgICAgICAgIDU4LjQzNTY1NzExNjksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzg0ZmFhNWQwNDg4NTQxNzQ4M2Y2YmMxZjBkNDJhMTRlID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzdmYTFmYzk5YjE2NjQ1NDZiMGZjZDcwMjQwNjFjYWQwID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF83ZmExZmM5OWIxNjY0NTQ2YjBmY2Q3MDI0MDYxY2FkMCIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgSXJ2aW5nIFBhcmstTyYjMzk7SGFyZSAtIDM0MTQgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzg0ZmFhNWQwNDg4NTQxNzQ4M2Y2YmMxZjBkNDJhMTRlLnNldENvbnRlbnQoaHRtbF83ZmExZmM5OWIxNjY0NTQ2YjBmY2Q3MDI0MDYxY2FkMCk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl8zZWUxZDhiM2NiMWM0NmQxYjA4YjYxN2Y5ZWQ0NmNkNS5iaW5kUG9wdXAocG9wdXBfODRmYWE1ZDA0ODg1NDE3NDgzZjZiYzFmMGQ0MmExNGUpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfNjQ2M2MxZTI1YzcyNDA0OWFlMTQwNjlhYTAzZmI2YzUgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44NzgxODMsLTg3LjYyODk5Nl0sCiAgICAgICAgICAgICAgICA3Ny43MzcwODU3MTQ5LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzAwYTFkZScsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzAwYTFkZScsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8wZTRmNzQ0ZTFjNzk0NTQ3YTI0ZjYzOWZjMTVlNDZlOCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8zZDJmZWUyMmQ3OTU0ZDk0YjNkMmExYjY3ZGZlMGJkOCA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfM2QyZmVlMjJkNzk1NGQ5NGIzZDJhMWI2N2RmZTBiZDgiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEphY2tzb24vRGVhcmJvcm4gLSA2MDQzIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8wZTRmNzQ0ZTFjNzk0NTQ3YTI0ZjYzOWZjMTVlNDZlOC5zZXRDb250ZW50KGh0bWxfM2QyZmVlMjJkNzk1NGQ5NGIzZDJhMWI2N2RmZTBiZDgpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfNjQ2M2MxZTI1YzcyNDA0OWFlMTQwNjlhYTAzZmI2YzUuYmluZFBvcHVwKHBvcHVwXzBlNGY3NDRlMWM3OTQ1NDdhMjRmNjM5ZmMxNWU0NmU4KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzNjMTZiMzNkMDYzNTQ0MGJiOTBkZjQzM2FkZmI2MGIxID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODc3ODU3NTU3NywtODcuNjI3NTQzOTA1NV0sCiAgICAgICAgICAgICAgICA5NC43NzM1ODE2NjQzLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9hNjAwYjFmZThiNjk0ZTk5YTdjNWRjMTJhZTRkYWJhYiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF83NzNjYzY2ZDljOGY0NDg4ODAzN2ZmYjk3OGQ3MTJlNiA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfNzczY2M2NmQ5YzhmNDQ4ODgwMzdmZmI5NzhkNzEyZTYiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEphY2tzb24vU3RhdGUgLSA4OTgyIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9hNjAwYjFmZThiNjk0ZTk5YTdjNWRjMTJhZTRkYWJhYi5zZXRDb250ZW50KGh0bWxfNzczY2M2NmQ5YzhmNDQ4ODgwMzdmZmI5NzhkNzEyZTYpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfM2MxNmIzM2QwNjM1NDQwYmI5MGRmNDMzYWRmYjYwYjEuYmluZFBvcHVwKHBvcHVwX2E2MDBiMWZlOGI2OTRlOTlhN2M1ZGMxMmFlNGRhYmFiKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzZmOTFhZThmOTA5YjQ5Y2M4Y2JjYzkzNDQzOThkOTQ4ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDIuMDE1NTgwNTU3NywtODcuNjY5MDM5OTA1NV0sCiAgICAgICAgICAgICAgICAzNi41NTg2MTExNjMyLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF81MmRhZjQwZDhiNDc0NzFkYWNkY2ZiZWYzZDFmZjdhYSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF85OTA2ZmIwOTE3M2Y0NTc3OTJhZmIyMDgxNzBjMjE1MyA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfOTkwNmZiMDkxNzNmNDU3NzkyYWZiMjA4MTcwYzIxNTMiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEphcnZpcyAtIDEzMzYgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzUyZGFmNDBkOGI0NzQ3MWRhY2RjZmJlZjNkMWZmN2FhLnNldENvbnRlbnQoaHRtbF85OTA2ZmIwOTE3M2Y0NTc3OTJhZmIyMDgxNzBjMjE1Myk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl82ZjkxYWU4ZjkwOWI0OWNjOGNiY2M5MzQ0Mzk4ZDk0OC5iaW5kUG9wdXAocG9wdXBfNTJkYWY0MGQ4YjQ3NDcxZGFjZGNmYmVmM2QxZmY3YWEpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfZjY3MTkxNTEwY2Q2NGRlYWExNmNmZTkxMGRjOTg1NzIgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS45NzA2MzQsLTg3Ljc2MDU5Ml0sCiAgICAgICAgICAgICAgICA3My41MDU2Njg5MTA1LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzAwYTFkZScsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzAwYTFkZScsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF85MGVlODE2OGY4NTA0MDI0OGNhODU2M2I1ZjVjYThlMSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8wOTIzOGVjNjk4Zjc0ODkyODMzNzhlNjc5NzU1ZDk3NCA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfMDkyMzhlYzY5OGY3NDg5MjgzMzc4ZTY3OTc1NWQ5NzQiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEplZmZlcnNvbiBQYXJrIC0gNTQwMyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfOTBlZTgxNjhmODUwNDAyNDhjYTg1NjNiNWY1Y2E4ZTEuc2V0Q29udGVudChodG1sXzA5MjM4ZWM2OThmNzQ4OTI4MzM3OGU2Nzk3NTVkOTc0KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2Y2NzE5MTUxMGNkNjRkZWFhMTZjZmU5MTBkYzk4NTcyLmJpbmRQb3B1cChwb3B1cF85MGVlODE2OGY4NTA0MDI0OGNhODU2M2I1ZjVjYThlMSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8wYjNjYzk5ZDQ1Njc0YTYxYjliYWExZjdlOTBmMGMxYSA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjk2NjE4ODgzNjMsLTg3LjcwODU5MTE4NjddLAogICAgICAgICAgICAgICAgMzkuNTUxMzkwMzQ4NywKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyM2MjM2MWInLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyM2MjM2MWInLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfOGE2ZDljZDQyYjZkNGRmMzhiNTIwNjE1YTZiOTQ0NGMgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMjk4NDFlMWRlZWI2NGUwZjhjZjE3ZTZlMTljMGQxMzMgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzI5ODQxZTFkZWViNjRlMGY4Y2YxN2U2ZTE5YzBkMTMzIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBLZWR6aWUtQnJvd24gLSAxNTY0IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF84YTZkOWNkNDJiNmQ0ZGYzOGI1MjA2MTVhNmI5NDQ0Yy5zZXRDb250ZW50KGh0bWxfMjk4NDFlMWRlZWI2NGUwZjhjZjE3ZTZlMTljMGQxMzMpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfMGIzY2M5OWQ0NTY3NGE2MWI5YmFhMWY3ZTkwZjBjMWEuYmluZFBvcHVwKHBvcHVwXzhhNmQ5Y2Q0MmI2ZDRkZjM4YjUyMDYxNWE2Yjk0NDRjKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzAzZjU5NTc0MjBkNzQ4ZmE4OGVlNTY4NmM3Y2E5Mjk4ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODUzNzA0MTkyNCwtODcuNzA1NTU4XSwKICAgICAgICAgICAgICAgIDI1LjM1NjQyNzIwMTMsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjZTI3ZWE2JywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjZTI3ZWE2JywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzkyNzMxOTYxMjNmYjQxZjdhMDlmM2M0YmJkY2ZlYzg1ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzQwOTNjYjlhN2Q5ODQ5MDE5ODcwNGI5NTA0NDJkYWUyID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF80MDkzY2I5YTdkOTg0OTAxOTg3MDRiOTUwNDQyZGFlMiIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgS2VkemllLUNlcm1hayAtIDY0MiBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfOTI3MzE5NjEyM2ZiNDFmN2EwOWYzYzRiYmRjZmVjODUuc2V0Q29udGVudChodG1sXzQwOTNjYjlhN2Q5ODQ5MDE5ODcwNGI5NTA0NDJkYWUyKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzAzZjU5NTc0MjBkNzQ4ZmE4OGVlNTY4NmM3Y2E5Mjk4LmJpbmRQb3B1cChwb3B1cF85MjczMTk2MTIzZmI0MWY3YTA5ZjNjNGJiZGNmZWM4NSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl83NjgzOWQ2OGIxZjI0ZmRjYmFmMmZjMzk2NDQ2MWI1NCA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg3NDM0MSwtODcuNzA1NzRdLAogICAgICAgICAgICAgICAgNDAuMzU3NjExMTYzOCwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMGExZGUnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwMGExZGUnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfZjAzMmIyYzc5NDMzNDVlNjk2ZmE1NGYzZGQ2MzM3ODMgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfOGE0ZDlkMzlkMWY4NGI4Y2JiOGY4NTgwZWU3YTZjYzQgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzhhNGQ5ZDM5ZDFmODRiOGNiYjhmODU4MGVlN2E2Y2M0IiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBLZWR6aWUtSG9tYW4tRm9yZXN0IFBhcmsgLSAxNjI4IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9mMDMyYjJjNzk0MzM0NWU2OTZmYTU0ZjNkZDYzMzc4My5zZXRDb250ZW50KGh0bWxfOGE0ZDlkMzlkMWY4NGI4Y2JiOGY4NTgwZWU3YTZjYzQpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfNzY4MzlkNjhiMWYyNGZkY2JhZjJmYzM5NjQ0NjFiNTQuYmluZFBvcHVwKHBvcHVwX2YwMzJiMmM3OTQzMzQ1ZTY5NmZhNTRmM2RkNjMzNzgzKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2E2N2YzM2NjNjFjYzQ0NmNiMDc1ZmNiMjRiZDQwY2ZmID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODg0NjE2NDQyMywtODcuNzA2MTAyOTA1NV0sCiAgICAgICAgICAgICAgICAzNC4yODI4OTc2Nzc2LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzAwOWIzYScsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzAwOWIzYScsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9kNDhiMmNhMjlmYjk0OGM0ODNiNTQyZmE3ZmI1ODNlOSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9jMWNlZDkwODJmNGQ0ZTM4YjA2YmQ4OWE3ODIwYTE2NSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfYzFjZWQ5MDgyZjRkNGUzOGIwNmJkODlhNzgyMGExNjUiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEtlZHppZS1MYWtlIC0gMTE3NSBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZDQ4YjJjYTI5ZmI5NDhjNDgzYjU0MmZhN2ZiNTgzZTkuc2V0Q29udGVudChodG1sX2MxY2VkOTA4MmY0ZDRlMzhiMDZiZDg5YTc4MjBhMTY1KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2E2N2YzM2NjNjFjYzQ0NmNiMDc1ZmNiMjRiZDQwY2ZmLmJpbmRQb3B1cChwb3B1cF9kNDhiMmNhMjlmYjk0OGM0ODNiNTQyZmE3ZmI1ODNlOSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9hODhjMjJhZGE1YWE0YzEzYTk2ZTY4YjQ5N2MxM2ExOCA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjgwNDQ5NTgwNzYsLTg3LjcwNDU1Nl0sCiAgICAgICAgICAgICAgICA1MC4zMDA1NTE3NjI4LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2Y5NDYxYycsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2Y5NDYxYycsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF85ZWRhNmNkMDVjNDc0NDgyYTUwYTRmOTM4MTA3ZWE5YSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9lNDYwNjkxZjVkN2I0MzljODU1NDVmZjczYTU5MTI3NSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfZTQ2MDY5MWY1ZDdiNDM5Yzg1NTQ1ZmY3M2E1OTEyNzUiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEtlZHppZS1NaWR3YXkgLSAyNTMwIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF85ZWRhNmNkMDVjNDc0NDgyYTUwYTRmOTM4MTA3ZWE5YS5zZXRDb250ZW50KGh0bWxfZTQ2MDY5MWY1ZDdiNDM5Yzg1NTQ1ZmY3M2E1OTEyNzUpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfYTg4YzIyYWRhNWFhNGMxM2E5NmU2OGI0OTdjMTNhMTguYmluZFBvcHVwKHBvcHVwXzllZGE2Y2QwNWM0NzQ0ODJhNTBhNGY5MzgxMDdlYTlhKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzg3NTM4N2E3ZTVhYTRkMGNiOWU5MzlkYTY0NGY4MWM0ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuOTY4MDkzODM2MywtODcuNzEyODM1MTg2N10sCiAgICAgICAgICAgICAgICA1Ny4wNTI3NTM1MTcsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjNjIzNjFiJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjNjIzNjFiJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2Q3NjA2YWM0MmQ1NjRmMmY4MWQ3ZDEzNDllN2Y5MjIxID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzMxNjUxMDU1NmMzYTRmOTc5NzAwOWU4NmMxMTEyZTdhID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF8zMTY1MTA1NTZjM2E0Zjk3OTcwMDllODZjMTExMmU3YSIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgS2ltYmFsbCAtIDMyNTUgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2Q3NjA2YWM0MmQ1NjRmMmY4MWQ3ZDEzNDllN2Y5MjIxLnNldENvbnRlbnQoaHRtbF8zMTY1MTA1NTZjM2E0Zjk3OTcwMDllODZjMTExMmU3YSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl84NzUzODdhN2U1YWE0ZDBjYjllOTM5ZGE2NDRmODFjNC5iaW5kUG9wdXAocG9wdXBfZDc2MDZhYzQyZDU2NGYyZjgxZDdkMTM0OWU3ZjkyMjEpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfMTczYTI2NjM0MmQwNGFjMWJhNzkwYmE3ZTczYzE2YzEgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS43ODA0MjU0NDIzLC04Ny42MTU0OTM5MDU1XSwKICAgICAgICAgICAgICAgIDIzLjkyODU1MzY0MTksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDA5YjNhJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDA5YjNhJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzY2YWYwYjZlZmE2YzQ3MDVhMDI4ZmFiMTY0NzM3ZDcwID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2Y1Mjk5NmFlZGNiODQ0ZDJiODNiMzM5ZGMxNmQwMzFkID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF9mNTI5OTZhZWRjYjg0NGQyYjgzYjMzOWRjMTZkMDMxZCIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgS2luZyBEcml2ZSAtIDU3MiBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNjZhZjBiNmVmYTZjNDcwNWEwMjhmYWIxNjQ3MzdkNzAuc2V0Q29udGVudChodG1sX2Y1Mjk5NmFlZGNiODQ0ZDJiODNiMzM5ZGMxNmQwMzFkKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzE3M2EyNjYzNDJkMDRhYzFiYTc5MGJhN2U3M2MxNmMxLmJpbmRQb3B1cChwb3B1cF82NmFmMGI2ZWZhNmM0NzA1YTAyOGZhYjE2NDczN2Q3MCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8xMTExOThhNzk0MzI0MDRlYmYzYmViNWE4N2Y3NzQ4MiA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg1MzQ5MTE5MjQsLTg3LjczMzQwOF0sCiAgICAgICAgICAgICAgICAxOC4wODk3NTMxMTY0LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2UyN2VhNicsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2UyN2VhNicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF80ZmNiN2NlOTFhMDA0ZGE3OTFmYzRkNmUxYWQ0YjFlOSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8yMzIyMzQ1OTYzZTk0YTk4YjNhNzBhMWJmZWQ3NTAyYSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfMjMyMjM0NTk2M2U5NGE5OGIzYTcwYTFiZmVkNzUwMmEiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIEtvc3RuZXIgLSAzMjcgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzRmY2I3Y2U5MWEwMDRkYTc5MWZjNGQ2ZTFhZDRiMWU5LnNldENvbnRlbnQoaHRtbF8yMzIyMzQ1OTYzZTk0YTk4YjNhNzBhMWJmZWQ3NTAyYSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl8xMTExOThhNzk0MzI0MDRlYmYzYmViNWE4N2Y3NzQ4Mi5iaW5kUG9wdXAocG9wdXBfNGZjYjdjZTkxYTAwNGRhNzkxZmM0ZDZlMWFkNGIxZTkpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfOWU2YjhjODQ3ODgwNGM0ODhmY2FlMzE2YmI2ZDc4ZWUgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44NzU1NjgsLTg3LjYzMTQyMl0sCiAgICAgICAgICAgICAgICA0Ni4zMzI3MDE0NDExLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzAwYTFkZScsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzAwYTFkZScsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF82NWYwMDIzOTg3MzA0NmMxODBmNjhkZTU2ZDhkYzYxNCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF84ZTBmZDE3MDYyNjY0ZGU0YmUyYzc0NWE3ZWQ4MzE5ZSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfOGUwZmQxNzA2MjY2NGRlNGJlMmM3NDVhN2VkODMxOWUiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIExhU2FsbGUgLSAyMTQ2IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF82NWYwMDIzOTg3MzA0NmMxODBmNjhkZTU2ZDhkYzYxNC5zZXRDb250ZW50KGh0bWxfOGUwZmQxNzA2MjY2NGRlNGJlMmM3NDVhN2VkODMxOWUpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfOWU2YjhjODQ3ODgwNGM0ODhmY2FlMzE2YmI2ZDc4ZWUuYmluZFBvcHVwKHBvcHVwXzY1ZjAwMjM5ODczMDQ2YzE4MGY2OGRlNTZkOGRjNjE0KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2ZiOGZkOTI1NmRlMzQ3MmU4MTUxNzYwZjIxNGVkMDAwID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODc2OTkyODM2MywtODcuNjMxNTA5MTg2N10sCiAgICAgICAgICAgICAgICA0Ny4zMDQwMDAyODI5LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9hNzc5NTNjMmYxNzE0NGVjYWZlYjJlZDdhZDBkNjRlNCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9kZTk2MjlkMjYyNDg0MWExYmJmM2EwN2M3NWE4ZGJhMyA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfZGU5NjI5ZDI2MjQ4NDFhMWJiZjNhMDdjNzVhOGRiYTMiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIExhU2FsbGUvVmFuIEJ1cmVuIC0gMjIzNyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfYTc3OTUzYzJmMTcxNDRlY2FmZWIyZWQ3YWQwZDY0ZTQuc2V0Q29udGVudChodG1sX2RlOTYyOWQyNjI0ODQxYTFiYmYzYTA3Yzc1YThkYmEzKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2ZiOGZkOTI1NmRlMzQ3MmU4MTUxNzYwZjIxNGVkMDAwLmJpbmRQb3B1cChwb3B1cF9hNzc5NTNjMmYxNzE0NGVjYWZlYjJlZDdhZDBkNjRlNCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl82YzEzNzc5ZmQ4Nzc0NjdiOTM1OTlmYjMzNzhkNjIxMSA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg3NzA1OTgwNzYsLTg3LjYzMTg4OV0sCiAgICAgICAgICAgICAgICA0Ny4zMDQwMDAyODI5LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2Y5NDYxYycsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2Y5NDYxYycsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8xOGZlOTkwZjVhMTU0NjY1OWEzNjdkYjZhMGNmY2QwNiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF84NmIzNGFhMmZjNTM0OTBiYTY4ZDk3MjY4ZTBlYTMzMiA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfODZiMzRhYTJmYzUzNDkwYmE2OGQ5NzI2OGUwZWEzMzIiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIExhU2FsbGUvVmFuIEJ1cmVuIC0gMjIzNyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMThmZTk5MGY1YTE1NDY2NTlhMzY3ZGI2YTBjZmNkMDYuc2V0Q29udGVudChodG1sXzg2YjM0YWEyZmM1MzQ5MGJhNjhkOTcyNjhlMGVhMzMyKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzZjMTM3NzlmZDg3NzQ2N2I5MzU5OWZiMzM3OGQ2MjExLmJpbmRQb3B1cChwb3B1cF8xOGZlOTkwZjVhMTU0NjY1OWEzNjdkYjZhMGNmY2QwNik7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl80YThiOGFlNzQwZTc0ZDk1YWE5OTkxN2I0ODI1MzM4YiA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg3NjY5NzM5NCwtODcuNjMyMDIwOTA3OF0sCiAgICAgICAgICAgICAgICA0Ny4zMDQwMDAyODI5LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzhlNTdlMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzhlNTdlMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF81OTk3NDc0OWY0MmU0YjY4ODIwMTBiMTNjNWFlYzM1YyA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9mMDZhMzg4NGExMDE0Y2U0OWE2MzI0NzZlMjhmMDgzZCA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfZjA2YTM4ODRhMTAxNGNlNDlhNjMyNDc2ZTI4ZjA4M2QiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIExhU2FsbGUvVmFuIEJ1cmVuIC0gMjIzNyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNTk5NzQ3NDlmNDJlNGI2ODgyMDEwYjEzYzVhZWMzNWMuc2V0Q29udGVudChodG1sX2YwNmEzODg0YTEwMTRjZTQ5YTYzMjQ3NmUyOGYwODNkKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzRhOGI4YWU3NDBlNzRkOTVhYTk5OTE3YjQ4MjUzMzhiLmJpbmRQb3B1cChwb3B1cF81OTk3NDc0OWY0MmU0YjY4ODIwMTBiMTNjNWFlYzM1Yyk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8wNmY4NmEwMDc3MzU0ZmE4YTljYWFlMDNkMDllMWVjYyA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg3NjU0MDE5MjQsLTg3LjYzMTg4OV0sCiAgICAgICAgICAgICAgICA0Ny4zMDQwMDAyODI5LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2UyN2VhNicsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2UyN2VhNicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9hNjMwNzJmNTgwMDM0MGM3YTY5N2I5YTBkNDAwOGExZiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF85OWQwZWM5ODIzY2Q0ZmE5OGUxOWVlMWUzYWRhZDA4MSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfOTlkMGVjOTgyM2NkNGZhOThlMTllZTFlM2FkYWQwODEiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIExhU2FsbGUvVmFuIEJ1cmVuIC0gMjIzNyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfYTYzMDcyZjU4MDAzNDBjN2E2OTdiOWEwZDQwMDhhMWYuc2V0Q29udGVudChodG1sXzk5ZDBlYzk4MjNjZDRmYTk4ZTE5ZWUxZTNhZGFkMDgxKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzA2Zjg2YTAwNzczNTRmYThhOWNhYWUwM2QwOWUxZWNjLmJpbmRQb3B1cChwb3B1cF9hNjMwNzJmNTgwMDM0MGM3YTY5N2I5YTBkNDAwOGExZik7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9mNjNhMWMzNWZiNDE0MTc4OTU2YTk4NTg4Y2ExNjViMCA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg4NDUxMzU1NzcsLTg3LjYyNzc2MDkwNTVdLAogICAgICAgICAgICAgICAgMTE1LjMyMzg4MTI3NSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyNjNjBjMzAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNjNjBjMzAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfOWI0NWYxMDZmYmVmNDI4OTg4NGUwYzVkOTllNGQxZmUgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZWY1NmVkNWM5NmE0NGQ0Y2EwMTNmMzEzYzYyYjhiODcgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sX2VmNTZlZDVjOTZhNDRkNGNhMDEzZjMxM2M2MmI4Yjg3IiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBMYWtlL1N0YXRlIC0gMTMyOTkgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzliNDVmMTA2ZmJlZjQyODk4ODRlMGM1ZDk5ZTRkMWZlLnNldENvbnRlbnQoaHRtbF9lZjU2ZWQ1Yzk2YTQ0ZDRjYTAxM2YzMTNjNjJiOGI4Nyk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl9mNjNhMWMzNWZiNDE0MTc4OTU2YTk4NTg4Y2ExNjViMC5iaW5kUG9wdXAocG9wdXBfOWI0NWYxMDZmYmVmNDI4OTg4NGUwYzVkOTllNGQxZmUpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfNjM1Y2M2OGRjZjQ3NDE0MmE2Y2Y1MzQxYzgwMmEwMzQgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44ODc0NTg0NDIzLC04Ny43NTQ5MzM5MDU1XSwKICAgICAgICAgICAgICAgIDM0LjE3OTk5MDM4NzIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDA5YjNhJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDA5YjNhJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzc5ODM1OTE1MWI4ZDRjMWVhZWU0MTgwMGY0Nzc0Mzg3ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2ZlMDQzM2ExYzMzZDQ3ZDVhYzM4MDQxZTRiZjUwMDgxID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF9mZTA0MzNhMWMzM2Q0N2Q1YWMzODA0MWU0YmY1MDA4MSIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgTGFyYW1pZSAtIDExNjggZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzc5ODM1OTE1MWI4ZDRjMWVhZWU0MTgwMGY0Nzc0Mzg3LnNldENvbnRlbnQoaHRtbF9mZTA0MzNhMWMzM2Q0N2Q1YWMzODA0MWU0YmY1MDA4MSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl82MzVjYzY4ZGNmNDc0MTQyYTZjZjUzNDFjODAyYTAzNC5iaW5kUG9wdXAocG9wdXBfNzk4MzU5MTUxYjhkNGMxZWFlZTQxODAwZjQ3NzQzODcpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfNzkzZTBhYWQ0YzQ3NDI4NWIxM2M0YWUzYmZjZTgxN2EgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS45Njg4NDM1NTc3LC04Ny42NTg0NDA5MDU1XSwKICAgICAgICAgICAgICAgIDUyLjY5MTk1NzI5NzYsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjYzYwYzMwJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjYzYwYzMwJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzFhOTVlMmE0ODJhOTRlZWQ5ODkwYjNkNTMzYTY2MzY2ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzFmODlmNTAxN2ZmMDRjMGRhY2Q4OTg1OTdiMmYyZTJiID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF8xZjg5ZjUwMTdmZjA0YzBkYWNkODk4NTk3YjJmMmUyYiIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgTGF3cmVuY2UgLSAyNzc2IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8xYTk1ZTJhNDgyYTk0ZWVkOTg5MGIzZDUzM2E2NjM2Ni5zZXRDb250ZW50KGh0bWxfMWY4OWY1MDE3ZmYwNGMwZGFjZDg5ODU5N2IyZjJlMmIpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfNzkzZTBhYWQ0YzQ3NDI4NWIxM2M0YWUzYmZjZTgxN2EuYmluZFBvcHVwKHBvcHVwXzFhOTVlMmE0ODJhOTRlZWQ5ODkwYjNkNTMzYTY2MzY2KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2EzZGRmZjcyNGNlZTRkYjE4NTBlN2ZkMTVmMmI1ZDNjID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODc3MDU0ODM2MywtODcuNjI3OTY2MTg2N10sCiAgICAgICAgICAgICAgICA1My42NTAzMzEyMTU3LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9mZDdmNTRlMDQ1MmI0YTI1OTEwZjA4ZjJjODY4Yzk4YSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF82NDI1NzNkMWQ4ZjI0M2U0OWI2MWJlYTNkOWU2YWM0MSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfNjQyNTczZDFkOGYyNDNlNDliNjFiZWEzZDllNmFjNDEiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIExpYnJhcnkgLSAyODc4IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9mZDdmNTRlMDQ1MmI0YTI1OTEwZjA4ZjJjODY4Yzk4YS5zZXRDb250ZW50KGh0bWxfNjQyNTczZDFkOGYyNDNlNDliNjFiZWEzZDllNmFjNDEpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfYTNkZGZmNzI0Y2VlNGRiMTg1MGU3ZmQxNWYyYjVkM2MuYmluZFBvcHVwKHBvcHVwX2ZkN2Y1NGUwNDUyYjRhMjU5MTBmMDhmMmM4NjhjOThhKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzY2NTRmZWUzYjE1NDQzZmNhNGEzODU2N2E2NmUzMDM0ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODc3MTIxODA3NiwtODcuNjI4MzQ2XSwKICAgICAgICAgICAgICAgIDUzLjY1MDMzMTIxNTcsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjZjk0NjFjJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjZjk0NjFjJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2QzZDU1YTAyYWRkYjRmNWI4NjFlNTQ1NzVmNDI2ODEwID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzI2MTFmNzZhM2MxNjRiYWM5OGNkYWZkYjExMzJkY2I0ID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF8yNjExZjc2YTNjMTY0YmFjOThjZGFmZGIxMTMyZGNiNCIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgTGlicmFyeSAtIDI4NzggZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2QzZDU1YTAyYWRkYjRmNWI4NjFlNTQ1NzVmNDI2ODEwLnNldENvbnRlbnQoaHRtbF8yNjExZjc2YTNjMTY0YmFjOThjZGFmZGIxMTMyZGNiNCk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl82NjU0ZmVlM2IxNTQ0M2ZjYTRhMzg1NjdhNjZlMzAzNC5iaW5kUG9wdXAocG9wdXBfZDNkNTVhMDJhZGRiNGY1Yjg2MWU1NDU3NWY0MjY4MTApOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfMTMyNjU3YWQyMmVmNDg2YmFmOGIxOWFjMDY2ODBiYmQgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44NzY3NTkzOTQsLTg3LjYyODQ3NzkwNzhdLAogICAgICAgICAgICAgICAgNTMuNjUwMzMxMjE1NywKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyM4ZTU3ZTAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyM4ZTU3ZTAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfZjdjODY5YzRhNjAzNDE2Nzg1MDdkNTViYTQwNGMwYzAgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfOWM5YmFkOTgwYTI0NDAzN2FjOTEyYmM5MTZiZWY3NTMgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzljOWJhZDk4MGEyNDQwMzdhYzkxMmJjOTE2YmVmNzUzIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBMaWJyYXJ5IC0gMjg3OCBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZjdjODY5YzRhNjAzNDE2Nzg1MDdkNTViYTQwNGMwYzAuc2V0Q29udGVudChodG1sXzljOWJhZDk4MGEyNDQwMzdhYzkxMmJjOTE2YmVmNzUzKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzEzMjY1N2FkMjJlZjQ4NmJhZjhiMTlhYzA2NjgwYmJkLmJpbmRQb3B1cChwb3B1cF9mN2M4NjljNGE2MDM0MTY3ODUwN2Q1NWJhNDA0YzBjMCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl85YTRlZTJmMmVjYmI0NmUzYjNlOTgwZTNhZjY0YzczYiA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg3NjYwMjE5MjQsLTg3LjYyODM0Nl0sCiAgICAgICAgICAgICAgICA1My42NTAzMzEyMTU3LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2UyN2VhNicsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2UyN2VhNicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9lOTY4ZTEwZWRkZjU0MjM5YTNjNjk3M2M1NDhhODIxNyA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9kZjRiMWJmYjg0MDk0YTY5YWU2MzRjZmQ0ZjdmNDZmNyA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfZGY0YjFiZmI4NDA5NGE2OWFlNjM0Y2ZkNGY3ZjQ2ZjciICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIExpYnJhcnkgLSAyODc4IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9lOTY4ZTEwZWRkZjU0MjM5YTNjNjk3M2M1NDhhODIxNy5zZXRDb250ZW50KGh0bWxfZGY0YjFiZmI4NDA5NGE2OWFlNjM0Y2ZkNGY3ZjQ2ZjcpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfOWE0ZWUyZjJlY2JiNDZlM2IzZTk4MGUzYWY2NGM3M2IuYmluZFBvcHVwKHBvcHVwX2U5NjhlMTBlZGRmNTQyMzlhM2M2OTczYzU0OGE4MjE3KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzE1NjE0MzBlOWFkODQ0ZTVhMjI3YTA0MzIxOTBkYzBlID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDIuMDczMjU1NjA2LC04Ny42OTEwMTE5MDc4XSwKICAgICAgICAgICAgICAgIDMwLjA4MTkyOTQ5MTgsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjNTIyMzk4JywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjNTIyMzk4JywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2ZlNDcwOWVhNjU1ODQ5YmZiYTE4YmVkYjJmMzgxNDhlID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzFkZjY0NmNjZjcyNDRiZjhiYWQ3MzgwNzQzY2QxYmY0ID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF8xZGY2NDZjY2Y3MjQ0YmY4YmFkNzM4MDc0M2NkMWJmNCIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgTGluZGVuIC0gOTA0IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9mZTQ3MDllYTY1NTg0OWJmYmExOGJlZGIyZjM4MTQ4ZS5zZXRDb250ZW50KGh0bWxfMWRmNjQ2Y2NmNzI0NGJmOGJhZDczODA3NDNjZDFiZjQpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfMTU2MTQzMGU5YWQ4NDRlNWEyMjdhMDQzMjE5MGRjMGUuYmluZFBvcHVwKHBvcHVwX2ZlNDcwOWVhNjU1ODQ5YmZiYTE4YmVkYjJmMzgxNDhlKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzA3Yjc5ZWU3YzBhYzQ4NGQ4YzAzYmExOWRkNDU4MGJjID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDIuMDczMDUwMzk0LC04Ny42OTEwMTE5MDc4XSwKICAgICAgICAgICAgICAgIDMwLjA4MTkyOTQ5MTgsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjOGU1N2UwJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjOGU1N2UwJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzViMTUzNTZlMjE0ZjRkMzlhMmNmZDk1MTZiZGUyMjNiID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzQyNTNmMzY2NjI0NjQ1ODhhOGIyOTAwZTI4ZGFmMjNiID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF80MjUzZjM2NjYyNDY0NTg4YThiMjkwMGUyOGRhZjIzYiIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgTGluZGVuIC0gOTA0IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF81YjE1MzU2ZTIxNGY0ZDM5YTJjZmQ5NTE2YmRlMjIzYi5zZXRDb250ZW50KGh0bWxfNDI1M2YzNjY2MjQ2NDU4OGE4YjI5MDBlMjhkYWYyM2IpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfMDdiNzllZTdjMGFjNDg0ZDhjMDNiYTE5ZGQ0NTgwYmMuYmluZFBvcHVwKHBvcHVwXzViMTUzNTZlMjE0ZjRkMzlhMmNmZDk1MTZiZGUyMjNiKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2M5Mzc2ZWMzOTQzMjRhYWY4NGQ0N2MxM2VlNjFjNWE2ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuOTI5NzI4LC04Ny43MDgyNDFdLAogICAgICAgICAgICAgICAgNjkuOTE3NjQ1OTk4MiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMGExZGUnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwMGExZGUnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfYTViODRiMzVjMmU4NDQ1OGEzYWU3M2MxNzk3MDRhMWQgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfNGI0NjQwZDNmYzFhNGM5NDkzNzM1YzAyZWVmZjllODEgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzRiNDY0MGQzZmMxYTRjOTQ5MzczNWMwMmVlZmY5ZTgxIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBMb2dhbiBTcXVhcmUgLSA0ODg4IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9hNWI4NGIzNWMyZTg0NDU4YTNhZTczYzE3OTcwNGExZC5zZXRDb250ZW50KGh0bWxfNGI0NjQwZDNmYzFhNGM5NDkzNzM1YzAyZWVmZjllODEpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfYzkzNzZlYzM5NDMyNGFhZjg0ZDQ3YzEzZWU2MWM1YTYuYmluZFBvcHVwKHBvcHVwX2E1Yjg0YjM1YzJlODQ0NThhM2FlNzNjMTc5NzA0YTFkKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzA4NTU2NjExYWU4MDQ5NTVhY2YwOWNmNGUxOTI5ZjY0ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDIuMDAwNzc3NTU3NywtODcuNjYxMDA4OTA1NV0sCiAgICAgICAgICAgICAgICA2Ny43OTkxNDI2MjU2LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9hNmNjOWUyZWQ2ZDQ0MTNhODQwMWQ1MzJiMzhmNjVhZCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF85NTQzOWU3ODFlZTY0OTIwYTJkZjY0ZGI2MmU5NjFlOCA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfOTU0MzllNzgxZWU2NDkyMGEyZGY2NGRiNjJlOTYxZTgiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIExveW9sYSAtIDQ1OTYgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2E2Y2M5ZTJlZDZkNDQxM2E4NDAxZDUzMmIzOGY2NWFkLnNldENvbnRlbnQoaHRtbF85NTQzOWU3ODFlZTY0OTIwYTJkZjY0ZGI2MmU5NjFlOCk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl8wODU1NjYxMWFlODA0OTU1YWNmMDljZjRlMTkyOWY2NC5iaW5kUG9wdXAocG9wdXBfYTZjYzllMmVkNmQ0NDEzYTg0MDFkNTMyYjM4ZjY1YWQpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfYzUxNzRmYjkzMWM3NDcyNzgzMDM1OWM5M2ZhYWYzOWIgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44ODIyMTU4MzYzLC04Ny42MjU4NjgxODY3XSwKICAgICAgICAgICAgICAgIDYzLjQ2Mjk0OTU4NTUsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjNjIzNjFiJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjNjIzNjFiJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzRhZjlkOGJhZjQ0YTQwOTY5ODViMTNhZTk2Y2JkNDZhID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2EwMmFiYWIxMDZlMTRlMmU5Mjc2ZTg3YWUyMmVmYmZmID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF9hMDJhYmFiMTA2ZTE0ZTJlOTI3NmU4N2FlMjJlZmJmZiIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgTWFkaXNvbi9XYWJhc2ggLSA0MDI3IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF80YWY5ZDhiYWY0NGE0MDk2OTg1YjEzYWU5NmNiZDQ2YS5zZXRDb250ZW50KGh0bWxfYTAyYWJhYjEwNmUxNGUyZTkyNzZlODdhZTIyZWZiZmYpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfYzUxNzRmYjkzMWM3NDcyNzgzMDM1OWM5M2ZhYWYzOWIuYmluZFBvcHVwKHBvcHVwXzRhZjlkOGJhZjQ0YTQwOTY5ODViMTNhZTk2Y2JkNDZhKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2M2YjQ0OTI2YTUwZjQxNjI4MDU4MzY2OTc2MDgzYjVjID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODgyMzE4NDQyMywtODcuNjI2MDQ1OTA1NV0sCiAgICAgICAgICAgICAgICA2My40NjI5NDk1ODU1LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzAwOWIzYScsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzAwOWIzYScsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF84ZjVlODQ5NTNlOTI0ZDc4YTE4YzgyYzkxNDVmNWU1NSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8yMjBkMjg0NGUxNjE0M2FkOWFjZjcyYmM3MjM0N2U3YiA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfMjIwZDI4NDRlMTYxNDNhZDlhY2Y3MmJjNzIzNDdlN2IiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIE1hZGlzb24vV2FiYXNoIC0gNDAyNyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfOGY1ZTg0OTUzZTkyNGQ3OGExOGM4MmM5MTQ1ZjVlNTUuc2V0Q29udGVudChodG1sXzIyMGQyODQ0ZTE2MTQzYWQ5YWNmNzJiYzcyMzQ3ZTdiKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2M2YjQ0OTI2YTUwZjQxNjI4MDU4MzY2OTc2MDgzYjVjLmJpbmRQb3B1cChwb3B1cF84ZjVlODQ5NTNlOTI0ZDc4YTE4YzgyYzkxNDVmNWU1NSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9jNmM3MGE1ZjI0YzI0YjkwODUzODZkMmZiNmE0ODQzZSA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg4MjI4MjgwNzYsLTg3LjYyNjI0OF0sCiAgICAgICAgICAgICAgICA2My40NjI5NDk1ODU1LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2Y5NDYxYycsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2Y5NDYxYycsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF85MmFkNGM4ZmFhZDU0ODg2OWNjM2ZiYzU3ZjIxZDUyOCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9iYjZmYjgxYTEzZWM0OTU2YTEyMWIzMzkwMGNiNTc3OSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfYmI2ZmI4MWExM2VjNDk1NmExMjFiMzM5MDBjYjU3NzkiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIE1hZGlzb24vV2FiYXNoIC0gNDAyNyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfOTJhZDRjOGZhYWQ1NDg4NjljYzNmYmM1N2YyMWQ1Mjguc2V0Q29udGVudChodG1sX2JiNmZiODFhMTNlYzQ5NTZhMTIxYjMzOTAwY2I1Nzc5KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2M2YzcwYTVmMjRjMjRiOTA4NTM4NmQyZmI2YTQ4NDNlLmJpbmRQb3B1cChwb3B1cF85MmFkNGM4ZmFhZDU0ODg2OWNjM2ZiYzU3ZjIxZDUyOCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8xNmJiMzlhYmYxNDU0MGE5OWE3MDIwYTM2NTdiMDJhZiA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg4MTkyMDM5NCwtODcuNjI2Mzc5OTA3OF0sCiAgICAgICAgICAgICAgICA2My40NjI5NDk1ODU1LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzhlNTdlMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzhlNTdlMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8yZGRiM2JmYmViYzU0Y2I0YmQ0YjNkZmU5ZmFmZDQ0NSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF82OWU0ZWYzYmZjNTk0OWJkYjE3YjhkNDk2MzRlM2QzNyA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfNjllNGVmM2JmYzU5NDliZGIxN2I4ZDQ5NjM0ZTNkMzciICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIE1hZGlzb24vV2FiYXNoIC0gNDAyNyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMmRkYjNiZmJlYmM1NGNiNGJkNGIzZGZlOWZhZmQ0NDUuc2V0Q29udGVudChodG1sXzY5ZTRlZjNiZmM1OTQ5YmRiMTdiOGQ0OTYzNGUzZDM3KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzE2YmIzOWFiZjE0NTQwYTk5YTcwMjBhMzY1N2IwMmFmLmJpbmRQb3B1cChwb3B1cF8yZGRiM2JmYmViYzU0Y2I0YmQ0YjNkZmU5ZmFmZDQ0NSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9jN2VkNjMzNDNmM2I0MTYwOGVjMDRjNThkYjZkMTgxZiA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg4MTc2MzE5MjQsLTg3LjYyNjI0OF0sCiAgICAgICAgICAgICAgICA2My40NjI5NDk1ODU1LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2UyN2VhNicsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2UyN2VhNicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8wMjQwMzZkNjhjMDY0NWQ4OGI4NzI0MjViYWJmZWYxNiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9lYzA3MjNhMjlhMDY0NTBhOTkxYjBiYjZhNmY3MWQwNiA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfZWMwNzIzYTI5YTA2NDUwYTk5MWIwYmI2YTZmNzFkMDYiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIE1hZGlzb24vV2FiYXNoIC0gNDAyNyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMDI0MDM2ZDY4YzA2NDVkODhiODcyNDI1YmFiZmVmMTYuc2V0Q29udGVudChodG1sX2VjMDcyM2EyOWEwNjQ1MGE5OTFiMGJiNmE2ZjcxZDA2KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2M3ZWQ2MzM0M2YzYjQxNjA4ZWMwNGM1OGRiNmQxODFmLmJpbmRQb3B1cChwb3B1cF8wMjQwMzZkNjhjMDY0NWQ4OGI4NzI0MjViYWJmZWYxNik7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9hNGZjOWY3MmNhOTE0MzJmOTQwM2FkZTE1ODBkNmUyZSA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQyLjAzMzU1ODYwNiwtODcuNjc5ODE5OTA3OF0sCiAgICAgICAgICAgICAgICAzMi4xNTQzMjIxMDMzLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzUyMjM5OCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzUyMjM5OCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9jZjg0YTBmOTk3NWY0Y2M4YjgyN2M5MDkyYzc1NjRkZCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9jMWZhZmZhNTZjOWY0OTk4Yjc2NzU0MmU2OGE1ZWQzOSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfYzFmYWZmYTU2YzlmNDk5OGI3Njc1NDJlNjhhNWVkMzkiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIE1haW4gLSAxMDMzIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9jZjg0YTBmOTk3NWY0Y2M4YjgyN2M5MDkyYzc1NjRkZC5zZXRDb250ZW50KGh0bWxfYzFmYWZmYTU2YzlmNDk5OGI3Njc1NDJlNjhhNWVkMzkpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfYTRmYzlmNzJjYTkxNDMyZjk0MDNhZGUxNTgwZDZlMmUuYmluZFBvcHVwKHBvcHVwX2NmODRhMGY5OTc1ZjRjYzhiODI3YzkwOTJjNzU2NGRkKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzA5MjBmZTExZjFlZTQwYjJhNzMzZWQ3ZTZhOWE0ZTJjID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDIuMDMzMzUzMzk0LC04Ny42Nzk4MTk5MDc4XSwKICAgICAgICAgICAgICAgIDMyLjE1NDMyMjEwMzMsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjOGU1N2UwJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjOGU1N2UwJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzhkMWRlNzM1MDlkNDQ0NmI5ZDYwZDAxOTgyN2U5OTg3ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzc5YjBjZjFmZjg1YTQwZTc4YjUwZTQwMTE2M2EwN2NlID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF83OWIwY2YxZmY4NWE0MGU3OGI1MGU0MDExNjNhMDdjZSIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgTWFpbiAtIDEwMzMgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzhkMWRlNzM1MDlkNDQ0NmI5ZDYwZDAxOTgyN2U5OTg3LnNldENvbnRlbnQoaHRtbF83OWIwY2YxZmY4NWE0MGU3OGI1MGU0MDExNjNhMDdjZSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl8wOTIwZmUxMWYxZWU0MGIyYTczM2VkN2U2YTlhNGUyYy5iaW5kUG9wdXAocG9wdXBfOGQxZGU3MzUwOWQ0NDQ2YjlkNjBkMDE5ODI3ZTk5ODcpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfZjgwMjAwZTlhNzllNDM1MmIyY2FiNTcyY2E3MjMwYzQgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44NzU3MDYsLTg3LjY3MzYzMl0sCiAgICAgICAgICAgICAgICA0Ny44MTQzNzQ0OTY5LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzAwYTFkZScsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzAwYTFkZScsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF82NzZjODhiNzIwMTg0MDBhOWM5ZTg4OGI1M2I5YTRlOCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF85Zjg0ODY0ODI2YTk0M2ViOWJkNTdjZjI2MjJiMmE0NyA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfOWY4NDg2NDgyNmE5NDNlYjliZDU3Y2YyNjIyYjJhNDciICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIE1lZGljYWwgQ2VudGVyIC0gMjI4NiBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNjc2Yzg4YjcyMDE4NDAwYTljOWU4ODhiNTNiOWE0ZTguc2V0Q29udGVudChodG1sXzlmODQ4NjQ4MjZhOTQzZWI5YmQ1N2NmMjYyMmIyYTQ3KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2Y4MDIwMGU5YTc5ZTQzNTJiMmNhYjU3MmNhNzIzMGM0LmJpbmRQb3B1cChwb3B1cF82NzZjODhiNzIwMTg0MDBhOWM5ZTg4OGI1M2I5YTRlOCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9kOWMwNDA1MTczNTk0NzUyYWE4NDhhMWNhZjlmZTU5NyA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg4OTE2MTgzNjMsLTg3LjYzMzY5NDE4NjddLAogICAgICAgICAgICAgICAgNjguNTUzNDYxMjk0LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF80MTM5ZDY0YjM0ZGQ0MzM5ODE5NmUxYTlmNjU1ODBjZCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF81ODVjYTYxMGIzNWU0ZDJhYjAzODRkNTVlNmNmZTAxMyA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfNTg1Y2E2MTBiMzVlNGQyYWIwMzg0ZDU1ZTZjZmUwMTMiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIE1lcmNoYW5kaXNlIE1hcnQgLSA0Njk5IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF80MTM5ZDY0YjM0ZGQ0MzM5ODE5NmUxYTlmNjU1ODBjZC5zZXRDb250ZW50KGh0bWxfNTg1Y2E2MTBiMzVlNGQyYWIwMzg0ZDU1ZTZjZmUwMTMpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfZDljMDQwNTE3MzU5NDc1MmFhODQ4YTFjYWY5ZmU1OTcuYmluZFBvcHVwKHBvcHVwXzQxMzlkNjRiMzRkZDQzMzk4MTk2ZTFhOWY2NTU4MGNkKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzIyYWIwYzM5ODFhOTRmZDRiMjcwMmE5N2Q4YjA1ZTk1ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODg4ODY2Mzk0LC04Ny42MzQyMDU5MDc4XSwKICAgICAgICAgICAgICAgIDY4LjU1MzQ2MTI5NCwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyM4ZTU3ZTAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyM4ZTU3ZTAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfNDU5NWE0MzNmYmQzNGNkYWEyN2VjNDZkZGVmOTJhMGMgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMzAyMTljYzY4NGM1NGQ4NGI5MmFkZWE5NTYxYWVmMTYgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzMwMjE5Y2M2ODRjNTRkODRiOTJhZGVhOTU2MWFlZjE2IiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBNZXJjaGFuZGlzZSBNYXJ0IC0gNDY5OSBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNDU5NWE0MzNmYmQzNGNkYWEyN2VjNDZkZGVmOTJhMGMuc2V0Q29udGVudChodG1sXzMwMjE5Y2M2ODRjNTRkODRiOTJhZGVhOTU2MWFlZjE2KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzIyYWIwYzM5ODFhOTRmZDRiMjcwMmE5N2Q4YjA1ZTk1LmJpbmRQb3B1cChwb3B1cF80NTk1YTQzM2ZiZDM0Y2RhYTI3ZWM0NmRkZWY5MmEwYyk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl81NDc5NGJmYTdiZGE0YTQzODlhOWVjZjk1OTJjNjM5NSA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjc4Njg2OTgwNzYsLTg3LjczODAyNV0sCiAgICAgICAgICAgICAgICA4NS42NTc1OTkxMTUzLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2Y5NDYxYycsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2Y5NDYxYycsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF80MTA5MzViN2M2ZWE0NDVkYTk5OGE2Yjg5MThlMmYzMCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9jYmZmYzM0NGExYmU0N2Y0ODg1ZjVmZDhiN2E4NzBiMSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfY2JmZmMzNDRhMWJlNDdmNDg4NWY1ZmQ4YjdhODcwYjEiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIE1pZHdheSBBaXJwb3J0IC0gNzMzNyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNDEwOTM1YjdjNmVhNDQ1ZGE5OThhNmI4OTE4ZTJmMzAuc2V0Q29udGVudChodG1sX2NiZmZjMzQ0YTFiZTQ3ZjQ4ODVmNWZkOGI3YTg3MGIxKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzU0Nzk0YmZhN2JkYTRhNDM4OWE5ZWNmOTU5MmM2Mzk1LmJpbmRQb3B1cChwb3B1cF80MTA5MzViN2M2ZWE0NDVkYTk5OGE2Yjg5MThlMmYzMCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl84MTAxYjAxMjQ2YjQ0NzkzYmE1NTU1ZThhNzBjOTYxZCA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg4MDcwMywtODcuNjI5MDc4XSwKICAgICAgICAgICAgICAgIDY5LjgyNDkwMjI5OTUsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2M2ZjJhZmNhMzA5OTQxY2VhMTM3NDE1OWViZDdiMWRjID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzk3YTI3ZTRjZjZhODQ4MWViODg0ZTEwOTVjMjE5ODY3ID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF85N2EyN2U0Y2Y2YTg0ODFlYjg4NGUxMDk1YzIxOTg2NyIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgTW9ucm9lL0RlYXJib3JuIC0gNDg3NSBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfYzZmMmFmY2EzMDk5NDFjZWExMzc0MTU5ZWJkN2IxZGMuc2V0Q29udGVudChodG1sXzk3YTI3ZTRjZjZhODQ4MWViODg0ZTEwOTVjMjE5ODY3KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzgxMDFiMDEyNDZiNDQ3OTNiYTU1NTVlOGE3MGM5NjFkLmJpbmRQb3B1cChwb3B1cF9jNmYyYWZjYTMwOTk0MWNlYTEzNzQxNTllYmQ3YjFkYyk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9jM2ZjZTU3ODY0Yjg0OTVhYTQ4MjY5OTVhMWFjZGY4ZiA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg4MDQ0OTU1NzcsLTg3LjYyNzY0MzkwNTVdLAogICAgICAgICAgICAgICAgODQuODU4OTE5NzA5NywKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyNjNjBjMzAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNjNjBjMzAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfNTE5ZWZmNmFlMDA1NDk2NGFjZDgzNjU4NGRjZWU3N2UgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMTRjNmUzODdmZGQwNDZiMDkyOGJiNGU3ZDU5OTI5MTEgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzE0YzZlMzg3ZmRkMDQ2YjA5MjhiYjRlN2Q1OTkyOTExIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBNb25yb2UvU3RhdGUgLSA3MjAxIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF81MTllZmY2YWUwMDU0OTY0YWNkODM2NTg0ZGNlZTc3ZS5zZXRDb250ZW50KGh0bWxfMTRjNmUzODdmZGQwNDZiMDkyOGJiNGU3ZDU5OTI5MTEpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfYzNmY2U1Nzg2NGI4NDk1YWE0ODI2OTk1YTFhY2RmOGYuYmluZFBvcHVwKHBvcHVwXzUxOWVmZjZhZTAwNTQ5NjRhY2Q4MzY1ODRkY2VlNzdlKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2U5OTk1OTBlOTAzODRlODlhZmYxM2JiNjFjZGYwNmZhID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuOTYxOTQ4ODM2MywtODcuNjc0ODE3MTg2N10sCiAgICAgICAgICAgICAgICA0My43MDEyNzg1NzcxLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF82NjlkMjM3ODVlZjc0NTE4OTY1MWE5N2Q3MTQ0NzU3OCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF83ZjIzODVjODgyYzM0MzhiYTJjM2Y5YzQ3NDIwMWJhNCA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfN2YyMzg1Yzg4MmMzNDM4YmEyYzNmOWM0NzQyMDFiYTQiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIE1vbnRyb3NlLUJyb3duIC0gMTkwOSBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNjY5ZDIzNzg1ZWY3NDUxODk2NTFhOTdkNzE0NDc1Nzguc2V0Q29udGVudChodG1sXzdmMjM4NWM4ODJjMzQzOGJhMmMzZjljNDc0MjAxYmE0KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2U5OTk1OTBlOTAzODRlODlhZmYxM2JiNjFjZGYwNmZhLmJpbmRQb3B1cChwb3B1cF82NjlkMjM3ODVlZjc0NTE4OTY1MWE5N2Q3MTQ0NzU3OCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9hNzhiNWJiMTgzNWM0M2FkYjRiNGJjYzczZjVjY2ZkZSA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjk2MTUzOSwtODcuNzQzMjc0XSwKICAgICAgICAgICAgICAgIDQxLjUyNDQxMzE5NzYsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2U4MjFiNDVhNWUwZDRlZDY5ZjQ3NDMwNTc1OWM0OTI3ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzU5ZWI4YjYxYTI1YTQ4YjVhNTBlMDNlMjUwNGFiOWY1ID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF81OWViOGI2MWEyNWE0OGI1YTUwZTAzZTI1MDRhYjlmNSIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgTW9udHJvc2UtTyYjMzk7SGFyZSAtIDE3MjQgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2U4MjFiNDVhNWUwZDRlZDY5ZjQ3NDMwNTc1OWM0OTI3LnNldENvbnRlbnQoaHRtbF81OWViOGI2MWEyNWE0OGI1YTUwZTAzZTI1MDRhYjlmNSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl9hNzhiNWJiMTgzNWM0M2FkYjRiNGJjYzczZjVjY2ZkZS5iaW5kUG9wdXAocG9wdXBfZTgyMWI0NWE1ZTBkNGVkNjlmNDc0MzA1NzU5YzQ5MjcpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfZTgwOGMxOTdlMmU4NGQwMmJkNTFkMGE5M2FlYmIwMTQgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44ODU4ODE0NDIzLC04Ny42NTIxNDA5MDU1XSwKICAgICAgICAgICAgICAgIDQzLjc1OTI2NjgyMjQsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDA5YjNhJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDA5YjNhJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzBjYTBlNzRjMWE2NDRjYTdiOWZmNTkwNDI1MmIyZWNlID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2UxODczOWVhZThiODQ5NjliYzc2ZjY5ZTgyNDg5OTVkID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF9lMTg3MzllYWU4Yjg0OTY5YmM3NmY2OWU4MjQ4OTk1ZCIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgTW9yZ2FuLUxha2UgLSAxOTE0IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8wY2EwZTc0YzFhNjQ0Y2E3YjlmZjU5MDQyNTJiMmVjZS5zZXRDb250ZW50KGh0bWxfZTE4NzM5ZWFlOGI4NDk2OWJjNzZmNjllODI0ODk5NWQpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfZTgwOGMxOTdlMmU4NGQwMmJkNTFkMGE5M2FlYmIwMTQuYmluZFBvcHVwKHBvcHVwXzBjYTBlNzRjMWE2NDRjYTdiOWZmNTkwNDI1MmIyZWNlKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2FlMDhlMjNiN2I1MDQ0ZjFiNDg5ZTcxYWVhMDhmZGU3ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODg1MzI2MTkyNCwtODcuNjUyMzQzXSwKICAgICAgICAgICAgICAgIDQzLjc1OTI2NjgyMjQsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjZTI3ZWE2JywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjZTI3ZWE2JywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzE1MjY2NWE1NTdlNzRjNzU4NGQ5ZTU0NjkxOTFkMjQyID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2QxZmNkZmEyN2Y2ZDQxMGViMjg4NTM1MjdjODQ0MmVjID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF9kMWZjZGZhMjdmNmQ0MTBlYjI4ODUzNTI3Yzg0NDJlYyIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgTW9yZ2FuLUxha2UgLSAxOTE0IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8xNTI2NjVhNTU3ZTc0Yzc1ODRkOWU1NDY5MTkxZDI0Mi5zZXRDb250ZW50KGh0bWxfZDFmY2RmYTI3ZjZkNDEwZWIyODg1MzUyN2M4NDQyZWMpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfYWUwOGUyM2I3YjUwNDRmMWI0ODllNzFhZWEwOGZkZTcuYmluZFBvcHVwKHBvcHVwXzE1MjY2NWE1NTdlNzRjNzU4NGQ5ZTU0NjkxOTFkMjQyKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2ZlZWYyOWVlNzEwYzQzNjg4YTU3ZDg5NTdkMTU2ODQ2ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDIuMDA4MDY2NTU3NywtODcuNjY1ODU2OTA1NV0sCiAgICAgICAgICAgICAgICA2MS43NTkxNjk1MzM0LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8wYjgzNThkMDhjZTU0YTY4YjdkNmMzMzBlMGE1OGQ4OSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9jYjdhODhlMjAzYWE0OGFjODI4MDM0NmNhZTE3NTc1ZiA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfY2I3YTg4ZTIwM2FhNDhhYzgyODAzNDZjYWUxNzU3NWYiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIE1vcnNlIC0gMzgxNCBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMGI4MzU4ZDA4Y2U1NGE2OGI3ZDZjMzMwZTBhNThkODkuc2V0Q29udGVudChodG1sX2NiN2E4OGUyMDNhYTQ4YWM4MjgwMzQ2Y2FlMTc1NzVmKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2ZlZWYyOWVlNzEwYzQzNjg4YTU3ZDg5NTdkMTU2ODQ2LmJpbmRQb3B1cChwb3B1cF8wYjgzNThkMDhjZTU0YTY4YjdkNmMzMzBlMGE1OGQ4OSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl84ZDI3OWQ5NzA1Mzg0MjBiODlkYjU3YmRhYTg5ODM1NiA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjkxMDM1OTU1NzcsLTg3LjY0OTEyNDkwNTVdLAogICAgICAgICAgICAgICAgNjUuOTYzMzIxMzE3NiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyNjNjBjMzAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNjNjBjMzAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfYjhiNzYzZGRiMWRiNDVlM2FiZGU0NTc2YTc2MDJkNzQgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfNjYyMTBkYmFhMTE2NDQ5Y2FiNjVkMjRiZWU5YTMyMmUgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzY2MjEwZGJhYTExNjQ0OWNhYjY1ZDI0YmVlOWEzMjJlIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBOb3J0aC9DbHlib3VybiAtIDQzNTEgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2I4Yjc2M2RkYjFkYjQ1ZTNhYmRlNDU3NmE3NjAyZDc0LnNldENvbnRlbnQoaHRtbF82NjIxMGRiYWExMTY0NDljYWI2NWQyNGJlZTlhMzIyZSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl84ZDI3OWQ5NzA1Mzg0MjBiODlkYjU3YmRhYTg5ODM1Ni5iaW5kUG9wdXAocG9wdXBfYjhiNzYzZGRiMWRiNDVlM2FiZGU0NTc2YTc2MDJkNzQpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfMGU2ZDVlNDFlZGQwNGEwMjk4YThlY2JjNzkzYjI0ZTAgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0Mi4wNTgzODQ2MDYsLTg3LjY4MzYxODkwNzhdLAogICAgICAgICAgICAgICAgMjQuNTIzNDYxNjU3NiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyM1MjIzOTgnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyM1MjIzOTgnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfNDA4NWFkZDI1OTJhNGM2NmJkYWU3MTk3MmJmYWJlZTQgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMTQ5MGQ1MTMwNjQ5NDdjMjkxZTU1MDViNWE4NTQwY2MgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzE0OTBkNTEzMDY0OTQ3YzI5MWU1NTA1YjVhODU0MGNjIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBOb3llcyAtIDYwMSBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNDA4NWFkZDI1OTJhNGM2NmJkYWU3MTk3MmJmYWJlZTQuc2V0Q29udGVudChodG1sXzE0OTBkNTEzMDY0OTQ3YzI5MWU1NTA1YjVhODU0MGNjKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzBlNmQ1ZTQxZWRkMDRhMDI5OGE4ZWNiYzc5M2IyNGUwLmJpbmRQb3B1cChwb3B1cF80MDg1YWRkMjU5MmE0YzY2YmRhZTcxOTcyYmZhYmVlNCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl83YTNiZjIwYmY2YTk0ZGIyYmJiZWJhMjdhMWU5MzM2ZiA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQyLjA1ODE3OTM5NCwtODcuNjgzNjE4OTA3OF0sCiAgICAgICAgICAgICAgICAyNC41MjM0NjE2NTc2LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzhlNTdlMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzhlNTdlMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8xOGQ0ZWI0NDY2YzU0MDI4YTk3ZGNkNGZhMzI5ZGQ4YiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF80MDZlYjhkMmYwMGU0ZGMwYWQwNzFjMmU3YWQ4Y2Q1ZiA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfNDA2ZWI4ZDJmMDBlNGRjMGFkMDcxYzJlN2FkOGNkNWYiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIE5veWVzIC0gNjAxIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8xOGQ0ZWI0NDY2YzU0MDI4YTk3ZGNkNGZhMzI5ZGQ4Yi5zZXRDb250ZW50KGh0bWxfNDA2ZWI4ZDJmMDBlNGRjMGFkMDcxYzJlN2FkOGNkNWYpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfN2EzYmYyMGJmNmE5NGRiMmJiYmViYTI3YTFlOTMzNmYuYmluZFBvcHVwKHBvcHVwXzE4ZDRlYjQ0NjZjNTQwMjhhOTdkY2Q0ZmEzMjlkZDhiKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2UyMTY0ZGRhOGQ5YjQyODNhNjYxODRkNGI2OWQ3YjU1ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuOTc3NjY1MjYsLTg3LjkwMzkyMzA3XSwKICAgICAgICAgICAgICAgIDk0LjcxMzQxNjAwNTksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzc5NmI1NDE2NjQ3NTQzYzU5YzIwYWU4YWRkNmVlNDQwID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2U1NGU4MmE2M2FhYzQ0MTdiNmM0ODg5YjQwODE1N2I0ID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF9lNTRlODJhNjNhYWM0NDE3YjZjNDg4OWI0MDgxNTdiNCIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgTyYjMzk7SGFyZSBBaXJwb3J0IC0gODk3MCBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNzk2YjU0MTY2NDc1NDNjNTljMjBhZThhZGQ2ZWU0NDAuc2V0Q29udGVudChodG1sX2U1NGU4MmE2M2FhYzQ0MTdiNmM0ODg5YjQwODE1N2I0KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2UyMTY0ZGRhOGQ5YjQyODNhNjYxODRkNGI2OWQ3YjU1LmJpbmRQb3B1cChwb3B1cF83OTZiNTQxNjY0NzU0M2M1OWMyMGFlOGFkZDZlZTQ0MCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8wZmEyNmFmNWFmOTY0ZjNkYjJiNjdhNzNkYTg1M2MzMyA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg3MjEwOCwtODcuNzkxMzAyXSwKICAgICAgICAgICAgICAgIDM2LjQzMDAwOTMyNDcsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzk2ZmRlYzQ3NWI5NTRkMDliYzg5N2UxM2E2NjY3OTNhID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzJmNzU4MzVhMGE3MjQyODg4MzA4NTJiODE4ZjMwN2IyID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF8yZjc1ODM1YTBhNzI0Mjg4ODMwODUyYjgxOGYzMDdiMiIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgT2FrIFBhcmstRm9yZXN0IFBhcmsgLSAxMzI3IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF85NmZkZWM0NzViOTU0ZDA5YmM4OTdlMTNhNjY2NzkzYS5zZXRDb250ZW50KGh0bWxfMmY3NTgzNWEwYTcyNDI4ODgzMDg1MmI4MThmMzA3YjIpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfMGZhMjZhZjVhZjk2NGYzZGIyYjY3YTczZGE4NTNjMzMuYmluZFBvcHVwKHBvcHVwXzk2ZmRlYzQ3NWI5NTRkMDliYzg5N2UxM2E2NjY3OTNhKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2Q4YzQxNmViMjY5ZTQ0YWE5ZjZlNDRmNjQxZTAwNWMyID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODg3MjgzNDQyMywtODcuNzkzNzMwOTA1NV0sCiAgICAgICAgICAgICAgICAzNS45MTA5OTU4MzQxLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzAwOWIzYScsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzAwOWIzYScsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8zYjg5ZmI1MGM4NGM0YTJhYTQwODEyZWNlMTllNGNiMSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF82NzA0MTg0MGNiYmY0Nzc5ODJjZTljNWQzMTI4MDc4ZCA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfNjcwNDE4NDBjYmJmNDc3OTgyY2U5YzVkMzEyODA3OGQiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIE9hayBQYXJrLUxha2UgLSAxMjg5IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8zYjg5ZmI1MGM4NGM0YTJhYTQwODEyZWNlMTllNGNiMS5zZXRDb250ZW50KGh0bWxfNjcwNDE4NDBjYmJmNDc3OTgyY2U5YzVkMzEyODA3OGQpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfZDhjNDE2ZWIyNjllNDRhYTlmNmU0NGY2NDFlMDA1YzIuYmluZFBvcHVwKHBvcHVwXzNiODlmYjUwYzg0YzRhMmFhNDA4MTJlY2UxOWU0Y2IxKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzkxYTU5OGQyNmVjNjQ2Mjg4YjI5ZGZiMjU0NmYzYTA5ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDIuMDI2MDUwNjQzNywtODcuNzQ2OTkxMDI2N10sCiAgICAgICAgICAgICAgICAyNi4xMzEyMTYzNzQ0LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2Y5ZTMwMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2Y5ZTMwMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF85ZmY4NTcyNzQ1MDU0ODQ3YTM0MDFhYmE2N2MyZWY1ZiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9kYWZhZGQyZWNlZWQ0MzA0OWRlMDExMGI3MDgxMzVlYyA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfZGFmYWRkMmVjZWVkNDMwNDlkZTAxMTBiNzA4MTM1ZWMiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIE9ha3Rvbi1Ta29raWUgLSA2ODIgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzlmZjg1NzI3NDUwNTQ4NDdhMzQwMWFiYTY3YzJlZjVmLnNldENvbnRlbnQoaHRtbF9kYWZhZGQyZWNlZWQ0MzA0OWRlMDExMGI3MDgxMzVlYyk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl85MWE1OThkMjZlYzY0NjI4OGIyOWRmYjI1NDZmM2EwOS5iaW5kUG9wdXAocG9wdXBfOWZmODU3Mjc0NTA1NDg0N2EzNDAxYWJhNjdjMmVmNWYpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfNTMwYTcwZWRmYjQ4NGQ1MWI0MjQ1Nzk2ZThhYjA4NDcgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS45NDM4MTU4MzYzLC04Ny42NzA2NzcxODY3XSwKICAgICAgICAgICAgICAgIDQ0LjA4MzQ1MDgxNzMsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjNjIzNjFiJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjNjIzNjFiJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzBjMzE4MTVjZjEzODQ0YWFhMWNjNTZmNmQzNjJiMDgwID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzc3NGNlNjNlNjI1ZjQ3ZDZhMzEyYTkwMmQxNzQ2NjhkID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF83NzRjZTYzZTYyNWY0N2Q2YTMxMmE5MDJkMTc0NjY4ZCIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgUGF1bGluYSAtIDE5NDMgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzBjMzE4MTVjZjEzODQ0YWFhMWNjNTZmNmQzNjJiMDgwLnNldENvbnRlbnQoaHRtbF83NzRjZTYzZTYyNWY0N2Q2YTMxMmE5MDJkMTc0NjY4ZCk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl81MzBhNzBlZGZiNDg0ZDUxYjQyNDU3OTZlOGFiMDg0Ny5iaW5kUG9wdXAocG9wdXBfMGMzMTgxNWNmMTM4NDRhYWExY2M1NmY2ZDM2MmIwODApOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfZjg3MTI0NjM3ZjA1NGE5Zjk5NmZmMDkwY2RjOGYwM2MgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44NzEyOTExOTI0LC04Ny42Njk2OF0sCiAgICAgICAgICAgICAgICA0OC4xODk2MjE4MDMzLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2UyN2VhNicsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2UyN2VhNicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9kZDJmZDEwMmRkZWY0OTJhODIyMTgzZGEwMzAzNTk5OCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF84MWY2MWQ5MzBiNjY0YzI4YTEzYTVlMGM2ODE1MDFjMSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfODFmNjFkOTMwYjY2NGMyOGExM2E1ZTBjNjgxNTAxYzEiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIFBvbGsgLSAyMzIyIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9kZDJmZDEwMmRkZWY0OTJhODIyMTgzZGEwMzAzNTk5OC5zZXRDb250ZW50KGh0bWxfODFmNjFkOTMwYjY2NGMyOGExM2E1ZTBjNjgxNTAxYzEpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfZjg3MTI0NjM3ZjA1NGE5Zjk5NmZmMDkwY2RjOGYwM2MuYmluZFBvcHVwKHBvcHVwX2RkMmZkMTAyZGRlZjQ5MmE4MjIxODNkYTAzMDM1OTk4KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2ZlMmYyYjg3MjE2MzQ4NDU4NjE0ZTBmY2VhZDBjOTg2ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODUzNDcyMTkyNCwtODcuNzI0NDYxXSwKICAgICAgICAgICAgICAgIDI3LjU2NjczNDIzOSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyNlMjdlYTYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNlMjdlYTYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfZTBiYzIyYjI5ZjBkNGVkNzlhZjM5MzgyZjUyZTk0OWEgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZmZlZTZmYTU5MDY4NDI0ZjgzN2U1NjM3ZWU1ZGRhMzcgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sX2ZmZWU2ZmE1OTA2ODQyNGY4MzdlNTYzN2VlNWRkYTM3IiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBQdWxhc2tpLUNlcm1hayAtIDc1OSBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZTBiYzIyYjI5ZjBkNGVkNzlhZjM5MzgyZjUyZTk0OWEuc2V0Q29udGVudChodG1sX2ZmZWU2ZmE1OTA2ODQyNGY4MzdlNTYzN2VlNWRkYTM3KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2ZlMmYyYjg3MjE2MzQ4NDU4NjE0ZTBmY2VhZDBjOTg2LmJpbmRQb3B1cChwb3B1cF9lMGJjMjJiMjlmMGQ0ZWQ3OWFmMzkzODJmNTJlOTQ5YSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl85NTQxNzI2MGIzYzI0YTMwYmMxMmVjODJjNmUxYWMzYSA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg3Mzc5NywtODcuNzI1MzYzXSwKICAgICAgICAgICAgICAgIDM3LjQ2OTQ0OTU1MTksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2E3ZmM1Mzc5NWQ3MDQ1YzNiMGI2NzgzMTU3ZGY4MWZmID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzlkZWZkMDIxYWY2OTQyN2ZhMTI2NWVhNGZlNDJiOGUyID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF85ZGVmZDAyMWFmNjk0MjdmYTEyNjVlYTRmZTQyYjhlMiIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgUHVsYXNraS1Gb3Jlc3QgUGFyayAtIDE0MDMgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2E3ZmM1Mzc5NWQ3MDQ1YzNiMGI2NzgzMTU3ZGY4MWZmLnNldENvbnRlbnQoaHRtbF85ZGVmZDAyMWFmNjk0MjdmYTEyNjVlYTRmZTQyYjhlMik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl85NTQxNzI2MGIzYzI0YTMwYmMxMmVjODJjNmUxYWMzYS5iaW5kUG9wdXAocG9wdXBfYTdmYzUzNzk1ZDcwNDVjM2IwYjY3ODMxNTdkZjgxZmYpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfOTJkNDMxODJjYTRkNDAwNThkNTk2ZWZiZDA5NGRkYmYgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44ODU3MDc0NDIzLC04Ny43MjUzNTE5MDU1XSwKICAgICAgICAgICAgICAgIDM4LjA1MDUzNjExOTMsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDA5YjNhJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDA5YjNhJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2FhZTBkMjM0ODZiMzQ1ODFhYzdjNWMzOGMxYTAzMWQ5ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzQ5NWEyMTE5NTk5ODQ3YjdhNTc5ZjVhZDc2ZTJmYzMxID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF80OTVhMjExOTU5OTg0N2I3YTU3OWY1YWQ3NmUyZmMzMSIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgUHVsYXNraS1MYWtlIC0gMTQ0NyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfYWFlMGQyMzQ4NmIzNDU4MWFjN2M1YzM4YzFhMDMxZDkuc2V0Q29udGVudChodG1sXzQ5NWEyMTE5NTk5ODQ3YjdhNTc5ZjVhZDc2ZTJmYzMxKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzkyZDQzMTgyY2E0ZDQwMDU4ZDU5NmVmYmQwOTRkZGJmLmJpbmRQb3B1cChwb3B1cF9hYWUwZDIzNDg2YjM0NTgxYWM3YzVjMzhjMWEwMzFkOSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl81NmU3OWMyNjdiY2I0YzcxOTg2YWI5YmQ5MTEyMDg4YiA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjgwMDAxNTgwNzYsLTg3LjcyNDY0M10sCiAgICAgICAgICAgICAgICA2My45NjE5NzU0ODQxLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2Y5NDYxYycsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2Y5NDYxYycsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF81YWFjYmM4ODU1Mjg0NGZkOTBkOTAwYmJmM2RjOGIxNSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9lZWY1NjI4NTYyMzc0ZGI4OGYyMmQ2MTRmODBjYzAzNSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfZWVmNTYyODU2MjM3NGRiODhmMjJkNjE0ZjgwY2MwMzUiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIFB1bGFza2ktT3JhbmdlIC0gNDA5MSBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNWFhY2JjODg1NTI4NDRmZDkwZDkwMGJiZjNkYzhiMTUuc2V0Q29udGVudChodG1sX2VlZjU2Mjg1NjIzNzRkYjg4ZjIyZDYxNGY4MGNjMDM1KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzU2ZTc5YzI2N2JjYjRjNzE5ODZhYjliZDkxMTIwODhiLmJpbmRQb3B1cChwb3B1cF81YWFjYmM4ODU1Mjg0NGZkOTBkOTAwYmJmM2RjOGIxNSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl82MDA0MjhmNmIzY2Q0MjcwODUwOGZjYzVhM2U2OTBmYiA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg3ODkxNTgzNjMsLTg3LjYzMzUxMDE4NjddLAogICAgICAgICAgICAgICAgNzQuNzk3Mjg5MDEyOSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyM2MjM2MWInLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyM2MjM2MWInLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfOWExYjNlM2UzNDE5NDM2OThlMzcxYmY3NjZlYWJlY2UgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMzlkZmFhZDY1MDcxNDZmOTkwNzQ5NzUyMTMwZjRkM2IgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzM5ZGZhYWQ2NTA3MTQ2Zjk5MDc0OTc1MjEzMGY0ZDNiIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBRdWluY3kvV2VsbHMgLSA1NTk0IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF85YTFiM2UzZTM0MTk0MzY5OGUzNzFiZjc2NmVhYmVjZS5zZXRDb250ZW50KGh0bWxfMzlkZmFhZDY1MDcxNDZmOTkwNzQ5NzUyMTMwZjRkM2IpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfNjAwNDI4ZjZiM2NkNDI3MDg1MDhmY2M1YTNlNjkwZmIuYmluZFBvcHVwKHBvcHVwXzlhMWIzZTNlMzQxOTQzNjk4ZTM3MWJmNzY2ZWFiZWNlKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzdjZjk4YjhkOTJmYjRiZDVhMjVmYTVjNDU1ODgxNjMwID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODc4OTgyODA3NiwtODcuNjMzODldLAogICAgICAgICAgICAgICAgNzQuNzk3Mjg5MDEyOSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyNmOTQ2MWMnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNmOTQ2MWMnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfOTc0YjM3ODkwNzJjNGZhNThmZDZjZDU3ZmMxNzdkNTUgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfOTUzOWRmMzI2NzM2NDFmOWEwMjhhZDE0YWQwNzQxMmYgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzk1MzlkZjMyNjczNjQxZjlhMDI4YWQxNGFkMDc0MTJmIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBRdWluY3kvV2VsbHMgLSA1NTk0IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF85NzRiMzc4OTA3MmM0ZmE1OGZkNmNkNTdmYzE3N2Q1NS5zZXRDb250ZW50KGh0bWxfOTUzOWRmMzI2NzM2NDFmOWEwMjhhZDE0YWQwNzQxMmYpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfN2NmOThiOGQ5MmZiNGJkNWEyNWZhNWM0NTU4ODE2MzAuYmluZFBvcHVwKHBvcHVwXzk3NGIzNzg5MDcyYzRmYTU4ZmQ2Y2Q1N2ZjMTc3ZDU1KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2IzZGI2N2NmNWMxYjQ5NjU5NTE5ZjAxMTQ3N2Q3YTg1ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODc4NjIwMzk0LC04Ny42MzQwMjE5MDc4XSwKICAgICAgICAgICAgICAgIDc0Ljc5NzI4OTAxMjksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjOGU1N2UwJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjOGU1N2UwJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2ZiMzgwZjYzNTcyNjQzYzk5MTk5YTBmZTllOTNmZTgxID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2ExN2QwMjQyODQ0OTRhZDQ5MDlhY2MwOWVmOGQyMGI0ID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF9hMTdkMDI0Mjg0NDk0YWQ0OTA5YWNjMDllZjhkMjBiNCIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgUXVpbmN5L1dlbGxzIC0gNTU5NCBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZmIzODBmNjM1NzI2NDNjOTkxOTlhMGZlOWU5M2ZlODEuc2V0Q29udGVudChodG1sX2ExN2QwMjQyODQ0OTRhZDQ5MDlhY2MwOWVmOGQyMGI0KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2IzZGI2N2NmNWMxYjQ5NjU5NTE5ZjAxMTQ3N2Q3YTg1LmJpbmRQb3B1cChwb3B1cF9mYjM4MGY2MzU3MjY0M2M5OTE5OWEwZmU5ZTkzZmU4MSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8wMzIxZTg4Y2JjNjc0YmJiOTU3YmQ2MTNmZjIyOWU1ZSA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg3ODQ2MzE5MjQsLTg3LjYzMzg5XSwKICAgICAgICAgICAgICAgIDc0Ljc5NzI4OTAxMjksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjZTI3ZWE2JywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjZTI3ZWE2JywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2Y2MGQzYjRjYTY4ZDQwY2Y5ODdiZDllMTQxNjY1NTk4ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzBmOGYyNzg2NDE2ZDRkMTg5NzE4MjczNzg0NGViNmE0ID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF8wZjhmMjc4NjQxNmQ0ZDE4OTcxODI3Mzc4NDRlYjZhNCIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgUXVpbmN5L1dlbGxzIC0gNTU5NCBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZjYwZDNiNGNhNjhkNDBjZjk4N2JkOWUxNDE2NjU1OTguc2V0Q29udGVudChodG1sXzBmOGYyNzg2NDE2ZDRkMTg5NzE4MjczNzg0NGViNmE0KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzAzMjFlODhjYmM2NzRiYmI5NTdiZDYxM2ZmMjI5ZTVlLmJpbmRQb3B1cChwb3B1cF9mNjBkM2I0Y2E2OGQ0MGNmOTg3YmQ5ZTE0MTY2NTU5OCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9iMDY0ZjQ4MmIxM2M0NTQzYTYxNWU3ZWFiMzA3YmM3MCA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg3NTkyLC04Ny42NTkxNThdLAogICAgICAgICAgICAgICAgNDIuODQ1NDg5NjY4MywKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMGExZGUnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwMGExZGUnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfMzlhODM1ZWNmOWQ2NDA0NWI1ZTA1MGUwNzM3NjcyYjYgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfNzhjNjVjOWFiYzNkNGYyNWE4ZmM4NWFjN2M1OWNmNDYgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzc4YzY1YzlhYmMzZDRmMjVhOGZjODVhYzdjNTljZjQ2IiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBSYWNpbmUgLSAxODM1IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8zOWE4MzVlY2Y5ZDY0MDQ1YjVlMDUwZTA3Mzc2NzJiNi5zZXRDb250ZW50KGh0bWxfNzhjNjVjOWFiYzNkNGYyNWE4ZmM4NWFjN2M1OWNmNDYpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfYjA2NGY0ODJiMTNjNDU0M2E2MTVlN2VhYjMwN2JjNzAuYmluZFBvcHVwKHBvcHVwXzM5YTgzNWVjZjlkNjQwNDViNWUwNTBlMDczNzY3MmI2KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2IxNDkyZDZkZjA0ZDQyMGFiNjI0NjQzNDdhMWRmMjM1ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODg0NjIzODM2MywtODcuNjI1OTE5MTg2N10sCiAgICAgICAgICAgICAgICA3NS45Mjg0NTQzNTM5LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9hOTc1ZTM0YjkzMWM0YzJjOTk2NTZlYjU2ZWM2ODA0ZSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8zZDUyZGY0NmEyODg0ZjFiODUzNjlmNzNmZjA3NTBhOSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfM2Q1MmRmNDZhMjg4NGYxYjg1MzY5ZjczZmYwNzUwYTkiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIFJhbmRvbHBoL1dhYmFzaCAtIDU3NjUgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2E5NzVlMzRiOTMxYzRjMmM5OTY1NmViNTZlYzY4MDRlLnNldENvbnRlbnQoaHRtbF8zZDUyZGY0NmEyODg0ZjFiODUzNjlmNzNmZjA3NTBhOSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl9iMTQ5MmQ2ZGYwNGQ0MjBhYjYyNDY0MzQ3YTFkZjIzNS5iaW5kUG9wdXAocG9wdXBfYTk3NWUzNGI5MzFjNGMyYzk5NjU2ZWI1NmVjNjgwNGUpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfYWI5NmQ5MjJhZjRmNGM4Njg5OTQ3MjIyYjI4N2Q1YmYgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44ODQ3MjY0NDIzLC04Ny42MjYwOTY5MDU1XSwKICAgICAgICAgICAgICAgIDc1LjkyODQ1NDM1MzksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDA5YjNhJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDA5YjNhJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2ViZTE1ZDI4YWZkZjQ2ODdhZTZlNGFlMmRjNTlhNzY4ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzE1MzhhNTZiNzkzOTQ0MjI5OTU3MjFiMTJhZGU4MTllID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF8xNTM4YTU2Yjc5Mzk0NDIyOTk1NzIxYjEyYWRlODE5ZSIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgUmFuZG9scGgvV2FiYXNoIC0gNTc2NSBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZWJlMTVkMjhhZmRmNDY4N2FlNmU0YWUyZGM1OWE3Njguc2V0Q29udGVudChodG1sXzE1MzhhNTZiNzkzOTQ0MjI5OTU3MjFiMTJhZGU4MTllKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2FiOTZkOTIyYWY0ZjRjODY4OTk0NzIyMmIyODdkNWJmLmJpbmRQb3B1cChwb3B1cF9lYmUxNWQyOGFmZGY0Njg3YWU2ZTRhZTJkYzU5YTc2OCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9iYzliM2U1ZjRkOTE0NmEwOGEzZTY3YjdmMzQ1ZGQ4ZCA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg4NDY5MDgwNzYsLTg3LjYyNjI5OV0sCiAgICAgICAgICAgICAgICA3NS45Mjg0NTQzNTM5LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2Y5NDYxYycsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2Y5NDYxYycsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF81Yzc5ZTQwZmJkMGI0ODExYWFmZDM5OTZiNTU3MWJkMCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF84NDliMDMwNGM4MWY0NThhODJjZDMzZGM0M2VhMDM0YSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfODQ5YjAzMDRjODFmNDU4YTgyY2QzM2RjNDNlYTAzNGEiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIFJhbmRvbHBoL1dhYmFzaCAtIDU3NjUgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzVjNzllNDBmYmQwYjQ4MTFhYWZkMzk5NmI1NTcxYmQwLnNldENvbnRlbnQoaHRtbF84NDliMDMwNGM4MWY0NThhODJjZDMzZGM0M2VhMDM0YSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl9iYzliM2U1ZjRkOTE0NmEwOGEzZTY3YjdmMzQ1ZGQ4ZC5iaW5kUG9wdXAocG9wdXBfNWM3OWU0MGZiZDBiNDgxMWFhZmQzOTk2YjU1NzFiZDApOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfN2QxNmMwYjJjNDI3NDBlZjkwMjFlZWUzMTkxZTgzYmUgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44ODQzMjgzOTQsLTg3LjYyNjQzMDkwNzhdLAogICAgICAgICAgICAgICAgNzUuOTI4NDU0MzUzOSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyM4ZTU3ZTAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyM4ZTU3ZTAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfZGU1ZTRjZTg4NWRlNDAxZGI5NDExMDdiMTgxYjNkZTIgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfYmViMTU3MWY3M2RjNDVhZjg5NDQyNGViMGM2ZTNkMWIgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sX2JlYjE1NzFmNzNkYzQ1YWY4OTQ0MjRlYjBjNmUzZDFiIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBSYW5kb2xwaC9XYWJhc2ggLSA1NzY1IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9kZTVlNGNlODg1ZGU0MDFkYjk0MTEwN2IxODFiM2RlMi5zZXRDb250ZW50KGh0bWxfYmViMTU3MWY3M2RjNDVhZjg5NDQyNGViMGM2ZTNkMWIpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfN2QxNmMwYjJjNDI3NDBlZjkwMjFlZWUzMTkxZTgzYmUuYmluZFBvcHVwKHBvcHVwX2RlNWU0Y2U4ODVkZTQwMWRiOTQxMTA3YjE4MWIzZGUyKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2VjNzg5ZjgxODBmMTRlYjdhOTBiODQ2YzVlODcyYTg5ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODg0MTcxMTkyNCwtODcuNjI2Mjk5XSwKICAgICAgICAgICAgICAgIDc1LjkyODQ1NDM1MzksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjZTI3ZWE2JywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjZTI3ZWE2JywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzI3NGRmYWUyYzA3MzQyYTNhMjg0YTRhYmRiMWU3Y2E0ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzdlNjYyMWQyNzdmMzQzNjU4ZGQ5MWMwMWIwZTVmY2VjID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF83ZTY2MjFkMjc3ZjM0MzY1OGRkOTFjMDFiMGU1ZmNlYyIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgUmFuZG9scGgvV2FiYXNoIC0gNTc2NSBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMjc0ZGZhZTJjMDczNDJhM2EyODRhNGFiZGIxZTdjYTQuc2V0Q29udGVudChodG1sXzdlNjYyMWQyNzdmMzQzNjU4ZGQ5MWMwMWIwZTVmY2VjKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2VjNzg5ZjgxODBmMTRlYjdhOTBiODQ2YzVlODcyYTg5LmJpbmRQb3B1cChwb3B1cF8yNzRkZmFlMmMwNzM0MmEzYTI4NGE0YWJkYjFlN2NhNCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9jMDM2NmExMmYyYjI0MDUxOTQ2M2ZkYmEwMmYxZGI3YyA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg4NzQ1NDQ0MjMsLTg3Ljc4MzYwODkwNTVdLAogICAgICAgICAgICAgICAgMzIuNzEzNDQ2MTg3OCwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMDliM2EnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwMDliM2EnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfYzVlNTFkYTU4NTUxNGUwYmI1NjE2YTMzOTYyMjNlYTcgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMjliMGU5NjVlMmQyNGI1ZmJhMmNjMDVlNGJkNGJiNTQgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzI5YjBlOTY1ZTJkMjRiNWZiYTJjYzA1ZTRiZDRiYjU0IiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBSaWRnZWxhbmQgLSAxMDcwIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9jNWU1MWRhNTg1NTE0ZTBiYjU2MTZhMzM5NjIyM2VhNy5zZXRDb250ZW50KGh0bWxfMjliMGU5NjVlMmQyNGI1ZmJhMmNjMDVlNGJkNGJiNTQpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfYzAzNjZhMTJmMmIyNDA1MTk0NjNmZGJhMDJmMWRiN2MuYmluZFBvcHVwKHBvcHVwX2M1ZTUxZGE1ODU1MTRlMGJiNTYxNmEzMzk2MjIzZWE3KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzBiZjFkNTE2M2U3YTQwOTJhODcyNjFhNDYyMmFiOWUxID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuOTY2MzA3ODM2MywtODcuNjkzODcwMTg2N10sCiAgICAgICAgICAgICAgICAzNS42NDEzNzU3NTcyLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8zN2ZhMTM5N2YxYTU0MzM3YjllNmI1NGI2NTc2MzJlYyA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF83MjZmMTk2ZjJkY2M0MTdjOWIxYjk2MTE5OTY2NjMxNiA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfNzI2ZjE5NmYyZGNjNDE3YzliMWI5NjExOTk2NjYzMTYiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIFJvY2t3ZWxsIC0gMTI3MCBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMzdmYTEzOTdmMWE1NDMzN2I5ZTZiNTRiNjU3NjMyZWMuc2V0Q29udGVudChodG1sXzcyNmYxOTZmMmRjYzQxN2M5YjFiOTYxMTk5NjY2MzE2KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzBiZjFkNTE2M2U3YTQwOTJhODcyNjFhNDYyMmFiOWUxLmJpbmRQb3B1cChwb3B1cF8zN2ZhMTM5N2YxYTU0MzM3YjllNmI1NGI2NTc2MzJlYyk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8wMDc4Yjg0YzdiMTE0N2FlYTJjNjAxYzcxM2ZhMDhhNyA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg2NzcwMDQ0MjMsLTg3LjYyNjUzNzkwNTVdLAogICAgICAgICAgICAgICAgOTEuMjczNDgyMzY4NiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMDliM2EnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwMDliM2EnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfNzg1M2Q0ZTQxOTRiNDBjNjgzMzY5ODQ3OWQ5ZDY4MDcgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfYmI5OGJiMzYyYjYwNDFiZGI0Nzg2MTQ5OTM2OGFiMzggPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sX2JiOThiYjM2MmI2MDQxYmRiNDc4NjE0OTkzNjhhYjM4IiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBSb29zZXZlbHQgLSA4MzMwIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF83ODUzZDRlNDE5NGI0MGM2ODMzNjk4NDc5ZDlkNjgwNy5zZXRDb250ZW50KGh0bWxfYmI5OGJiMzYyYjYwNDFiZGI0Nzg2MTQ5OTM2OGFiMzgpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfMDA3OGI4NGM3YjExNDdhZWEyYzYwMWM3MTNmYTA4YTcuYmluZFBvcHVwKHBvcHVwXzc4NTNkNGU0MTk0YjQwYzY4MzM2OTg0NzlkOWQ2ODA3KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzkxNGRhOTRmZDUyMTQwNzhiM2RiMzM4YTI0YjEzYWE5ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODY3NjY0ODA3NiwtODcuNjI2NzRdLAogICAgICAgICAgICAgICAgOTEuMjczNDgyMzY4NiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyNmOTQ2MWMnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNmOTQ2MWMnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfZDYyMzE1YTQ1MDhmNDIxYmI5ODI4OGZkNjdlN2RiMDIgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMzI5MjZjMGRhNzNiNGE0ZGFkZjc5OTEwZGQ4ODA1MGMgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzMyOTI2YzBkYTczYjRhNGRhZGY3OTkxMGRkODgwNTBjIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBSb29zZXZlbHQgLSA4MzMwIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9kNjIzMTVhNDUwOGY0MjFiYjk4Mjg4ZmQ2N2U3ZGIwMi5zZXRDb250ZW50KGh0bWxfMzI5MjZjMGRhNzNiNGE0ZGFkZjc5OTEwZGQ4ODA1MGMpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfOTE0ZGE5NGZkNTIxNDA3OGIzZGIzMzhhMjRiMTNhYTkuYmluZFBvcHVwKHBvcHVwX2Q2MjMxNWE0NTA4ZjQyMWJiOTgyODhmZDY3ZTdkYjAyKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzg4NWFjYTk2N2VmYzQwNGE4OTBhZDUxODY5ZTdkMDQ5ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODY3MTA5NTU3NywtODcuNjI2NTM3OTA1NV0sCiAgICAgICAgICAgICAgICA5MS4yNzM0ODIzNjg2LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8wYTJiNGVmM2NlNjI0NjlmYTUwZWQxY2JkMzc1MmRmOSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9lZWFiMWU2NjEwMzY0ZTk1YmQ1ZDViMjNmZjJjZWZlNSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfZWVhYjFlNjYxMDM2NGU5NWJkNWQ1YjIzZmYyY2VmZTUiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIFJvb3NldmVsdCAtIDgzMzAgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzBhMmI0ZWYzY2U2MjQ2OWZhNTBlZDFjYmQzNzUyZGY5LnNldENvbnRlbnQoaHRtbF9lZWFiMWU2NjEwMzY0ZTk1YmQ1ZDViMjNmZjJjZWZlNSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl84ODVhY2E5NjdlZmM0MDRhODkwYWQ1MTg2OWU3ZDA0OS5iaW5kUG9wdXAocG9wdXBfMGEyYjRlZjNjZTYyNDY5ZmE1MGVkMWNiZDM3NTJkZjkpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfYjYxZmM3OWE4Y2UwNDc5Zjg4NGUzZmY0YWQwMDRlNmYgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS45ODM1MDcsLTg3Ljg1OTA4OF0sCiAgICAgICAgICAgICAgICA2Ny4zMzA3Nzk1NzMsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzAxMDFlZmY0NmVjYTQyNTg5OGI1YWYwZDJmMzIzNDFkID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2ZiYjczMWY0N2ExYzQ0NjA5YmE4ZDZjYWJjMzA3NzM4ID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF9mYmI3MzFmNDdhMWM0NDYwOWJhOGQ2Y2FiYzMwNzczOCIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgUm9zZW1vbnQgLSA0NTMzIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8wMTAxZWZmNDZlY2E0MjU4OThiNWFmMGQyZjMyMzQxZC5zZXRDb250ZW50KGh0bWxfZmJiNzMxZjQ3YTFjNDQ2MDliYThkNmNhYmMzMDc3MzgpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfYjYxZmM3OWE4Y2UwNDc5Zjg4NGUzZmY0YWQwMDRlNmYuYmluZFBvcHVwKHBvcHVwXzAxMDFlZmY0NmVjYTQyNTg5OGI1YWYwZDJmMzIzNDFkKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzE1MDYxMWUwYjEzZjQ4ZmE5NWNkYmQ5ZjEyNWVlYTE4ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuOTEwNjAxODM2MywtODcuNjM5MDcyMTg2N10sCiAgICAgICAgICAgICAgICA1My4wNTcxMjc3MzMyLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF80NTY2OTY0NDVhMGE0YjM5YjUzZDg5OGYzNDA4OGI3NiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF82YTA2MTY5ZWIwODI0NDdiOGM0ZjFlZTU5YmY4MzM5NiA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfNmEwNjE2OWViMDgyNDQ3YjhjNGYxZWU1OWJmODMzOTYiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIFNlZGd3aWNrIC0gMjgxNSBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNDU2Njk2NDQ1YTBhNGIzOWI1M2Q4OThmMzQwODhiNzYuc2V0Q29udGVudChodG1sXzZhMDYxNjllYjA4MjQ0N2I4YzRmMWVlNTliZjgzMzk2KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzE1MDYxMWUwYjEzZjQ4ZmE5NWNkYmQ5ZjEyNWVlYTE4LmJpbmRQb3B1cChwb3B1cF80NTY2OTY0NDVhMGE0YjM5YjUzZDg5OGYzNDA4OGI3Nik7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl84ZGMwOGE2MDAyNDc0YWQwOGY5NWI4NWUzNjg3NGEyZSA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjkxMDMwNjM5NCwtODcuNjM5NTgzOTA3OF0sCiAgICAgICAgICAgICAgICA1My4wNTcxMjc3MzMyLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzhlNTdlMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzhlNTdlMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9mY2RkYTQ0NDg2ZDc0MGFlYTBmZjEzM2Q2MTlhOWQ0NSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF83ZWQyZWFhMmI4MTQ0NDdhYjIxZWMxZjE0YjFlMzBkYyA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfN2VkMmVhYTJiODE0NDQ3YWIyMWVjMWYxNGIxZTMwZGMiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIFNlZGd3aWNrIC0gMjgxNSBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZmNkZGE0NDQ4NmQ3NDBhZWEwZmYxMzNkNjE5YTlkNDUuc2V0Q29udGVudChodG1sXzdlZDJlYWEyYjgxNDQ0N2FiMjFlYzFmMTRiMWUzMGRjKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzhkYzA4YTYwMDI0NzRhZDA4Zjk1Yjg1ZTM2ODc0YTJlLmJpbmRQb3B1cChwb3B1cF9mY2RkYTQ0NDg2ZDc0MGFlYTBmZjEzM2Q2MTlhOWQ0NSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8xMTVhM2NjYjdkMzQ0Y2QyYjM4N2I2ZTBkYjFiZTFiYyA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjk1MzQ3OTU1NzcsLTg3LjY1NDg3NjkwNTVdLAogICAgICAgICAgICAgICAgNjYuMzM1NTg3MzI4MiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyNjNjBjMzAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNjNjBjMzAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfODMzOWI4OGZmNmY3NDg2NzhkMGY0NjA4OGNjZjEwYjAgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZGVlY2IxMTc0NjQwNDdjYzk3ZjJjZmU2NjIyNTFiOGEgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sX2RlZWNiMTE3NDY0MDQ3Y2M5N2YyY2ZlNjYyMjUxYjhhIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBTaGVyaWRhbiAtIDQ0MDAgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzgzMzliODhmZjZmNzQ4Njc4ZDBmNDYwODhjY2YxMGIwLnNldENvbnRlbnQoaHRtbF9kZWVjYjExNzQ2NDA0N2NjOTdmMmNmZTY2MjI1MWI4YSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl8xMTVhM2NjYjdkMzQ0Y2QyYjM4N2I2ZTBkYjFiZTFiYy5iaW5kUG9wdXAocG9wdXBfODMzOWI4OGZmNmY3NDg2NzhkMGY0NjA4OGNjZjEwYjApOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfZjFhZmUxYjlhZTk4NDBiMGExMzExNDlhZDY4N2U4ODkgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0Mi4wMzg3NTgxNjM3LC04Ny43NTE2ODkxODY3XSwKICAgICAgICAgICAgICAgIDQzLjA3Njg5MTUzNDYsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjZjllMzAwJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjZjllMzAwJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2Q4MzEzN2UyYzcxMzQzMTJhOWZhMGVkNWU3NmFiZDFmID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzk2MjI1Yzk2ZWY5YzQ1NWRhMjNiNDk2MTI0NTFlNDc0ID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF85NjIyNWM5NmVmOWM0NTVkYTIzYjQ5NjEyNDUxZTQ3NCIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgU2tva2llIC0gMTg1NSBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZDgzMTM3ZTJjNzEzNDMxMmE5ZmEwZWQ1ZTc2YWJkMWYuc2V0Q29udGVudChodG1sXzk2MjI1Yzk2ZWY5YzQ1NWRhMjNiNDk2MTI0NTFlNDc0KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2YxYWZlMWI5YWU5ODQwYjBhMTMxMTQ5YWQ2ODdlODg5LmJpbmRQb3B1cChwb3B1cF9kODMxMzdlMmM3MTM0MzEyYTlmYTBlZDVlNzZhYmQxZik7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8wZTA0NWRjNjFkZjE0ZjY2ODcwNTdmZjU0NzU0NzA2OCA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQyLjAyNzcxNDYwNiwtODcuNjc4NjEwOTA3OF0sCiAgICAgICAgICAgICAgICAyNS42ODkzNzA4NzE4LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzUyMjM5OCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzUyMjM5OCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8yZWRkOGU2YTY4NTU0ODZiYTQ3ZGNhMjFkZDc5MTk2NCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9iZTI1ZmU1NTdiYzU0ZmQ3ODgyMzBkY2U2YTEyNDZkMCA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfYmUyNWZlNTU3YmM1NGZkNzg4MjMwZGNlNmExMjQ2ZDAiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIFNvdXRoIEJvdWxldmFyZCAtIDY1OSBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMmVkZDhlNmE2ODU1NDg2YmE0N2RjYTIxZGQ3OTE5NjQuc2V0Q29udGVudChodG1sX2JlMjVmZTU1N2JjNTRmZDc4ODIzMGRjZTZhMTI0NmQwKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzBlMDQ1ZGM2MWRmMTRmNjY4NzA1N2ZmNTQ3NTQ3MDY4LmJpbmRQb3B1cChwb3B1cF8yZWRkOGU2YTY4NTU0ODZiYTQ3ZGNhMjFkZDc5MTk2NCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8wYjA3MTkzOTZiMzM0MmRlYjkxZDQ3OTM0YTdmMDI4OCA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQyLjAyNzUwOTM5NCwtODcuNjc4NjEwOTA3OF0sCiAgICAgICAgICAgICAgICAyNS42ODkzNzA4NzE4LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzhlNTdlMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzhlNTdlMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9lODdlY2Y3YzNiODc0ODA3YTQyMDU0MDQ0YzdkOTVkMCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF82ZmY2MTU2NTNiYjg0YTcwOTE0ZDA1ZTU5NGNiODg5YiA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfNmZmNjE1NjUzYmI4NGE3MDkxNGQwNWU1OTRjYjg4OWIiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIFNvdXRoIEJvdWxldmFyZCAtIDY1OSBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZTg3ZWNmN2MzYjg3NDgwN2E0MjA1NDA0NGM3ZDk1ZDAuc2V0Q29udGVudChodG1sXzZmZjYxNTY1M2JiODRhNzA5MTRkMDVlNTk0Y2I4ODliKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzBiMDcxOTM5NmIzMzQyZGViOTFkNDc5MzRhN2YwMjg4LmJpbmRQb3B1cChwb3B1cF9lODdlY2Y3YzNiODc0ODA3YTQyMDU0MDQ0YzdkOTVkMCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9lMTNiMmZhNWUxMmI0MDMzYjllOGE4ODk5NmVlNTFiZiA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjk0MzkzNjgzNjMsLTg3LjY2MzM4OTE4NjddLAogICAgICAgICAgICAgICAgNDguNDI1OTYzODIyNCwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyM2MjM2MWInLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyM2MjM2MWInLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfYTg0ODlkOGFiYjk4NDJmYjgwZTUxYzgwNjk0Yjg4Y2QgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZjkzMWFhZGZlZjJkNDZkYjhjMTdkODVjYzc2YjY5ZjUgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sX2Y5MzFhYWRmZWYyZDQ2ZGI4YzE3ZDg1Y2M3NmI2OWY1IiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBTb3V0aHBvcnQgLSAyMzQ1IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9hODQ4OWQ4YWJiOTg0MmZiODBlNTFjODA2OTRiODhjZC5zZXRDb250ZW50KGh0bWxfZjkzMWFhZGZlZjJkNDZkYjhjMTdkODVjYzc2YjY5ZjUpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfZTEzYjJmYTVlMTJiNDAzM2I5ZThhODg5OTZlZTUxYmYuYmluZFBvcHVwKHBvcHVwX2E4NDg5ZDhhYmI5ODQyZmI4MGU1MWM4MDY5NGI4OGNkKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzM2M2FhZjM3YThmMzQ4YTJhNzNjYzk3YzZiYTViMjUzID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODMwODk1NTU3NywtODcuNjMwNTgzOTA1NV0sCiAgICAgICAgICAgICAgICA2Mi43OTgwMzU3MjMxLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2M2MGMzMCcsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9iODYxMzZmNzU3ZTc0YjhkYmE0YjZmNmNkNzQzYjFhZCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF82OTNhODBjOTYyNTY0OGEzYmFlODkwZjhkYTNhMjhjYyA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfNjkzYTgwYzk2MjU2NDhhM2JhZTg5MGY4ZGEzYTI4Y2MiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIFNveC0zNXRoLURhbiBSeWFuIC0gMzk0MyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfYjg2MTM2Zjc1N2U3NGI4ZGJhNGI2ZjZjZDc0M2IxYWQuc2V0Q29udGVudChodG1sXzY5M2E4MGM5NjI1NjQ4YTNiYWU4OTBmOGRhM2EyOGNjKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzM2M2FhZjM3YThmMzQ4YTJhNzNjYzk3YzZiYTViMjUzLmJpbmRQb3B1cChwb3B1cF9iODYxMzZmNzU3ZTc0YjhkYmE0YjZmNmNkNzQzYjFhZCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9hMDQ3OWZlNWQxODk0MDM1YWJhMzAxOGE2MDM5NjQzMCA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg4NTkzMjgzNjMsLTg3LjYyNzYwNTE4NjddLAogICAgICAgICAgICAgICAgODcuNDg2NDg3Njg2MiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyM2MjM2MWInLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyM2MjM2MWInLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfNzM0N2VjMWFkYzAzNDBiNjk2ZWViNzdiNWEzM2ExYTggPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfNTI3YWVmM2NjMmNiNGNlMDgwNWRmZjY3Yjk0ZDY2NzMgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzUyN2FlZjNjYzJjYjRjZTA4MDVkZmY2N2I5NGQ2NjczIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBTdGF0ZS9MYWtlIC0gNzY1MyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNzM0N2VjMWFkYzAzNDBiNjk2ZWViNzdiNWEzM2ExYTguc2V0Q29udGVudChodG1sXzUyN2FlZjNjYzJjYjRjZTA4MDVkZmY2N2I5NGQ2NjczKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2EwNDc5ZmU1ZDE4OTQwMzVhYmEzMDE4YTYwMzk2NDMwLmJpbmRQb3B1cChwb3B1cF83MzQ3ZWMxYWRjMDM0MGI2OTZlZWI3N2I1YTMzYTFhOCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9lYzVkNDJlOTIxZGI0ZjE0YjExNjA0Y2Y3MGM3ZDgzNSA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg4NjAzNTQ0MjMsLTg3LjYyNzc4MjkwNTVdLAogICAgICAgICAgICAgICAgODcuNDg2NDg3Njg2MiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMDliM2EnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwMDliM2EnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfYzVkZWExZjAxMjVlNGM2M2JlZjQ3NGFiNjQ2NDJmYzQgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfN2UyYmY5NmU0MTAzNGJmYzlhMjA0YzlmMzQ1MDM0NDIgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzdlMmJmOTZlNDEwMzRiZmM5YTIwNGM5ZjM0NTAzNDQyIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBTdGF0ZS9MYWtlIC0gNzY1MyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfYzVkZWExZjAxMjVlNGM2M2JlZjQ3NGFiNjQ2NDJmYzQuc2V0Q29udGVudChodG1sXzdlMmJmOTZlNDEwMzRiZmM5YTIwNGM5ZjM0NTAzNDQyKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2VjNWQ0MmU5MjFkYjRmMTRiMTE2MDRjZjcwYzdkODM1LmJpbmRQb3B1cChwb3B1cF9jNWRlYTFmMDEyNWU0YzYzYmVmNDc0YWI2NDY0MmZjNCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl83MDM5N2Q2YzRlMWY0MTkyODQxZWI4ZTU0ZTM3ODhjOCA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg4NTk5OTgwNzYsLTg3LjYyNzk4NV0sCiAgICAgICAgICAgICAgICA4Ny40ODY0ODc2ODYyLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2Y5NDYxYycsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2Y5NDYxYycsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF81NzBhODFiZDFkNjQ0NTE1YmZiYmM4ZTE3NzBjYzBjOSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8zYTA3NmJiMmU3ZGE0ODM0YWRlZmVlZWQ3ZjUwNGFkYSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfM2EwNzZiYjJlN2RhNDgzNGFkZWZlZWVkN2Y1MDRhZGEiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIFN0YXRlL0xha2UgLSA3NjUzIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF81NzBhODFiZDFkNjQ0NTE1YmZiYmM4ZTE3NzBjYzBjOS5zZXRDb250ZW50KGh0bWxfM2EwNzZiYjJlN2RhNDgzNGFkZWZlZWVkN2Y1MDRhZGEpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfNzAzOTdkNmM0ZTFmNDE5Mjg0MWViOGU1NGUzNzg4YzguYmluZFBvcHVwKHBvcHVwXzU3MGE4MWJkMWQ2NDQ1MTViZmJiYzhlMTc3MGNjMGM5KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2Y0NmUxMDdiMzY1OTQ1NGNiYmMzYTFiODcxMTM2ZDdmID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODg1NjM3Mzk0LC04Ny42MjgxMTY5MDc4XSwKICAgICAgICAgICAgICAgIDg3LjQ4NjQ4NzY4NjIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjOGU1N2UwJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjOGU1N2UwJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzNiMjgyZTUyZWUxMTRjYTU5NmMwNWJiZWU4OTdiMjIwID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzRkNWQwYzI2YjdjNzQ1YWU4MTJlN2JlOTkwYTRhYmU0ID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF80ZDVkMGMyNmI3Yzc0NWFlODEyZTdiZTk5MGE0YWJlNCIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgU3RhdGUvTGFrZSAtIDc2NTMgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzNiMjgyZTUyZWUxMTRjYTU5NmMwNWJiZWU4OTdiMjIwLnNldENvbnRlbnQoaHRtbF80ZDVkMGMyNmI3Yzc0NWFlODEyZTdiZTk5MGE0YWJlNCk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl9mNDZlMTA3YjM2NTk0NTRjYmJjM2ExYjg3MTEzNmQ3Zi5iaW5kUG9wdXAocG9wdXBfM2IyODJlNTJlZTExNGNhNTk2YzA1YmJlZTg5N2IyMjApOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfMzQzYjc2NmJjYjcwNGE1NDk5YTRhNjhjMTY3Yzg5MWUgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44ODU0ODAxOTI0LC04Ny42Mjc5ODVdLAogICAgICAgICAgICAgICAgODcuNDg2NDg3Njg2MiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyNlMjdlYTYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNlMjdlYTYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfY2M2YTAxN2JkMmFmNDkzOGFkY2NlMTYxM2U3YjMxMTEgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfNGRmZTQwM2ZhNzY2NDFiNGFmYjBlYTIzNjFiNDM1ZjYgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzRkZmU0MDNmYTc2NjQxYjRhZmIwZWEyMzYxYjQzNWY2IiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBTdGF0ZS9MYWtlIC0gNzY1MyBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfY2M2YTAxN2JkMmFmNDkzOGFkY2NlMTYxM2U3YjMxMTEuc2V0Q29udGVudChodG1sXzRkZmU0MDNmYTc2NjQxYjRhZmIwZWEyMzYxYjQzNWY2KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzM0M2I3NjZiY2I3MDRhNTQ5OWE0YTY4YzE2N2M4OTFlLmJpbmRQb3B1cChwb3B1cF9jYzZhMDE3YmQyYWY0OTM4YWRjY2UxNjEzZTdiMzExMSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8xZjZkOWYyMGM2OTg0NDA1OGRmYzMwMTQwZjA2MWUyNiA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjk4OTk2MzU1NzcsLTg3LjY1OTAyMzkwNTVdLAogICAgICAgICAgICAgICAgNTAuMTE5NTY0Njk1NSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyNjNjBjMzAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNjNjBjMzAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfZDZkNTYzODk3NDEzNDk5ZjllMDdlMDUzYjRlY2Q0MGEgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZjZjNjFkYTY3Yjg1NDEzNTgwZmM1NmNkOTY2M2E5NjYgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sX2Y2YzYxZGE2N2I4NTQxMzU4MGZjNTZjZDk2NjNhOTY2IiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBUaG9ybmRhbGUgLSAyNTExIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9kNmQ1NjM4OTc0MTM0OTlmOWUwN2UwNTNiNGVjZDQwYS5zZXRDb250ZW50KGh0bWxfZjZjNjFkYTY3Yjg1NDEzNTgwZmM1NmNkOTY2M2E5NjYpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfMWY2ZDlmMjBjNjk4NDQwNThkZmMzMDE0MGYwNjFlMjYuYmluZFBvcHVwKHBvcHVwX2Q2ZDU2Mzg5NzQxMzQ5OWY5ZTA3ZTA1M2I0ZWNkNDBhKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzM5MTZjZTAzYThhMDQzZGE4N2NhZWZjNTAwOTMxMzQzID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODc1NDc0LC04Ny42NDk0MDddLAogICAgICAgICAgICAgICAgNjMuODMwNzU1MTkzNSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMGExZGUnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwMGExZGUnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfNDMxMGZhNjUxZjU2NDkwYzk4ZmE0OTA3YmQ4MTgyYTcgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfNmFlZjdhZmVmOGJlNDIxMmJiNWVkZWVhYzBjZDQzMDAgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzZhZWY3YWZlZjhiZTQyMTJiYjVlZGVlYWMwY2Q0MzAwIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBVSUMtSGFsc3RlZCAtIDQwNzQgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzQzMTBmYTY1MWY1NjQ5MGM5OGZhNDkwN2JkODE4MmE3LnNldENvbnRlbnQoaHRtbF82YWVmN2FmZWY4YmU0MjEyYmI1ZWRlZWFjMGNkNDMwMCk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl8zOTE2Y2UwM2E4YTA0M2RhODdjYWVmYzUwMDkzMTM0My5iaW5kUG9wdXAocG9wdXBfNDMxMGZhNjUxZjU2NDkwYzk4ZmE0OTA3YmQ4MTgyYTcpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfOWIzZmY1MzM3Yjg5NDVjNWE2NzM4NzM2ZjBmYmI5NzEgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44ODMxNjQsLTg3LjYyOTE0XSwKICAgICAgICAgICAgICAgIDg2LjczMDMyMzIzODYsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2FhMjRhYWFlMzY4NTQwNTlhOWI3NDU5YTMxYTM4MDIzID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzBlODdlNzdiMGY1NjQyNWNiNGMyOTAwYjIxMGM4MWI4ID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF8wZTg3ZTc3YjBmNTY0MjVjYjRjMjkwMGIyMTBjODFiOCIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgV2FzaGluZ3Rvbi9EZWFyYm9ybiAtIDc1MjIgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2FhMjRhYWFlMzY4NTQwNTlhOWI3NDU5YTMxYTM4MDIzLnNldENvbnRlbnQoaHRtbF8wZTg3ZTc3YjBmNTY0MjVjYjRjMjkwMGIyMTBjODFiOCk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl85YjNmZjUzMzdiODk0NWM1YTY3Mzg3MzZmMGZiYjk3MS5iaW5kUG9wdXAocG9wdXBfYWEyNGFhYWUzNjg1NDA1OWE5Yjc0NTlhMzFhMzgwMjMpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfNzkwZTQ1NGRhYmFmNDlkOThjNWZkMzhkNzc1ZGQyMjcgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44ODI4ODc4MzYzLC04Ny42MzM1NTAxODY3XSwKICAgICAgICAgICAgICAgIDcyLjY2MzQ1Njk4MDcsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjNjIzNjFiJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjNjIzNjFiJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2IwNWVjN2YxZGEwYjRjOTA4OTIzZTFmMTRiODhmNTNmID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzgzZDFhOGU0OTA3YzQ2NzI5YzljMWQzOThkMzlmM2Q3ID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF84M2QxYThlNDkwN2M0NjcyOWM5YzFkMzk4ZDM5ZjNkNyIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgV2FzaGluZ3Rvbi9XZWxscyAtIDUyNzkgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2IwNWVjN2YxZGEwYjRjOTA4OTIzZTFmMTRiODhmNTNmLnNldENvbnRlbnQoaHRtbF84M2QxYThlNDkwN2M0NjcyOWM5YzFkMzk4ZDM5ZjNkNyk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl83OTBlNDU0ZGFiYWY0OWQ5OGM1ZmQzOGQ3NzVkZDIyNy5iaW5kUG9wdXAocG9wdXBfYjA1ZWM3ZjFkYTBiNGM5MDg5MjNlMWYxNGI4OGY1M2YpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfNDQwZTQ3NzZiMmI3NGM4YWFiZjliNGI1NjE0OWQ3MDcgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44ODI5NTQ4MDc2LC04Ny42MzM5M10sCiAgICAgICAgICAgICAgICA3Mi42NjM0NTY5ODA3LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2Y5NDYxYycsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2Y5NDYxYycsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF80M2JlZTNlNDk3NzM0YTk4YjljYzA0Y2RlN2U5MzMzZiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF85YTM1NWY0OGJiODI0ZTk1ODIyNjMyMzNmMGI4NTQ4NSA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfOWEzNTVmNDhiYjgyNGU5NTgyMjYzMjMzZjBiODU0ODUiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIFdhc2hpbmd0b24vV2VsbHMgLSA1Mjc5IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF80M2JlZTNlNDk3NzM0YTk4YjljYzA0Y2RlN2U5MzMzZi5zZXRDb250ZW50KGh0bWxfOWEzNTVmNDhiYjgyNGU5NTgyMjYzMjMzZjBiODU0ODUpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfNDQwZTQ3NzZiMmI3NGM4YWFiZjliNGI1NjE0OWQ3MDcuYmluZFBvcHVwKHBvcHVwXzQzYmVlM2U0OTc3MzRhOThiOWNjMDRjZGU3ZTkzMzNmKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzRkZDNjNDY3ODIzYTRmZjVhNmQwMTBlOGI0YjUzNjgxID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuODgyNTkyMzk0LC04Ny42MzQwNjE5MDc4XSwKICAgICAgICAgICAgICAgIDcyLjY2MzQ1Njk4MDcsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjOGU1N2UwJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjOGU1N2UwJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzM4MDg2ZGMzZTEwNzRjNDRhZDM2Mzc0ZjUzYTU5OGY3ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzQ4NzFkOWNhMzkwYzQzNmE5MmU4MzE4NzAzOGQ4OTNlID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF80ODcxZDljYTM5MGM0MzZhOTJlODMxODcwMzhkODkzZSIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgV2FzaGluZ3Rvbi9XZWxscyAtIDUyNzkgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzM4MDg2ZGMzZTEwNzRjNDRhZDM2Mzc0ZjUzYTU5OGY3LnNldENvbnRlbnQoaHRtbF80ODcxZDljYTM5MGM0MzZhOTJlODMxODcwMzhkODkzZSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl80ZGQzYzQ2NzgyM2E0ZmY1YTZkMDEwZThiNGI1MzY4MS5iaW5kUG9wdXAocG9wdXBfMzgwODZkYzNlMTA3NGM0NGFkMzYzNzRmNTNhNTk4ZjcpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfOWMwZmEwOTMwOGQzNDZiOGJkNDlmMWFkMDE4MjlkZDUgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44ODI0MzUxOTI0LC04Ny42MzM5M10sCiAgICAgICAgICAgICAgICA3Mi42NjM0NTY5ODA3LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2UyN2VhNicsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2UyN2VhNicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8xNzVjNzMzY2M1ZTI0ZWNkOTZjYTExYzgyNDA2ZWZlYiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8yZmExNTNhOGUwNzQ0MjUzOTMzYWNkODY2M2Y1YzFjMiA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfMmZhMTUzYThlMDc0NDI1MzkzM2FjZDg2NjNmNWMxYzIiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIFdhc2hpbmd0b24vV2VsbHMgLSA1Mjc5IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8xNzVjNzMzY2M1ZTI0ZWNkOTZjYTExYzgyNDA2ZWZlYi5zZXRDb250ZW50KGh0bWxfMmZhMTUzYThlMDc0NDI1MzkzM2FjZDg2NjNmNWMxYzIpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfOWMwZmEwOTMwOGQzNDZiOGJkNDlmMWFkMDE4MjlkZDUuYmluZFBvcHVwKHBvcHVwXzE3NWM3MzNjYzVlMjRlY2Q5NmNhMTFjODI0MDZlZmViKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2M1MzQ1MTliNDc2ODQzZTZhMDNiYTE1ZTZmZjk0NjQ0ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuOTM2MjI1ODM2MywtODcuNjUzMDM2MTg2N10sCiAgICAgICAgICAgICAgICA0NS4zMjk2ODcyNTMzLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzYyMzYxYicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9lNGRlMTZjZmJmMWQ0NTM2YWU2N2IyMzI5NDY1MzE0MyA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9mODJjMDc5NWMzOWM0NTYyYWE3ZGQwY2ZkY2IyN2M3ZCA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfZjgyYzA3OTVjMzljNDU2MmFhN2RkMGNmZGNiMjdjN2QiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIFdlbGxpbmd0b24gLSAyMDU0IGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9lNGRlMTZjZmJmMWQ0NTM2YWU2N2IyMzI5NDY1MzE0My5zZXRDb250ZW50KGh0bWxfZjgyYzA3OTVjMzljNDU2MmFhN2RkMGNmZGNiMjdjN2QpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfYzUzNDUxOWI0NzY4NDNlNmEwM2JhMTVlNmZmOTQ2NDQuYmluZFBvcHVwKHBvcHVwX2U0ZGUxNmNmYmYxZDQ1MzZhZTY3YjIzMjk0NjUzMTQzKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzYwYTM5ZTBkZmU1ZjQ3YWQ4NzNlZGE2MWEzMGEwNWQ3ID0gTC5jaXJjbGUoCiAgICAgICAgICAgICAgICBbNDEuOTM1OTMwMzk0LC04Ny42NTM1NDc5MDc4XSwKICAgICAgICAgICAgICAgIDQ1LjMyOTY4NzI1MzMsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjOGU1N2UwJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjOGU1N2UwJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2ViMGY1MDUxYjEyOTQwYTg4ZjA4NWJlMmM5MjRlZTcxID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2VmZjhkY2YyYzcxODRkZDJhMDZlNTQyY2JiYmYxMDk5ID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF9lZmY4ZGNmMmM3MTg0ZGQyYTA2ZTU0MmNiYmJmMTA5OSIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgV2VsbGluZ3RvbiAtIDIwNTQgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2ViMGY1MDUxYjEyOTQwYTg4ZjA4NWJlMmM5MjRlZTcxLnNldENvbnRlbnQoaHRtbF9lZmY4ZGNmMmM3MTg0ZGQyYTA2ZTU0MmNiYmJmMTA5OSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl82MGEzOWUwZGZlNWY0N2FkODczZWRhNjFhMzBhMDVkNy5iaW5kUG9wdXAocG9wdXBfZWIwZjUwNTFiMTI5NDBhODhmMDg1YmUyYzkyNGVlNzEpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfMGMzOTYxMzIzNTc4NDdiYjhhODJiNGQ0NmJmN2Q0MTYgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS45NjYzNTU4MzYzLC04Ny42ODgyNzIxODY3XSwKICAgICAgICAgICAgICAgIDU2LjU0NjE4OTQzMDYsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjNjIzNjFiJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjNjIzNjFiJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2U3ZmFiYTkyNTkxMjRkNWRhMzdiYTcxYWJlNTMxZTdhID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzE3MzNiODFmZmNmZjRkZmM4MGIyZjIwNjNhMmNlNjRiID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF8xNzMzYjgxZmZjZmY0ZGZjODBiMmYyMDYzYTJjZTY0YiIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgV2VzdGVybi1Ccm93biAtIDMxOTcgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2U3ZmFiYTkyNTkxMjRkNWRhMzdiYTcxYWJlNTMxZTdhLnNldENvbnRlbnQoaHRtbF8xNzMzYjgxZmZjZmY0ZGZjODBiMmYyMDYzYTJjZTY0Yik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl8wYzM5NjEzMjM1Nzg0N2JiOGE4MmI0ZDQ2YmY3ZDQxNi5iaW5kUG9wdXAocG9wdXBfZTdmYWJhOTI1OTEyNGQ1ZGEzN2JhNzFhYmU1MzFlN2EpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfNjZkZmIyN2YzNTE4NGNiYWE3YjM5NGFhMjkwYmZiOWMgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44NTM5NjUxOTI0LC04Ny42ODUyNzldLAogICAgICAgICAgICAgICAgMjcuNzIwOTg0MjI2MSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyNlMjdlYTYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNlMjdlYTYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfNjNkMGE4MjEzNmE1NGIzNWEzODI2ODA3MTRhOGNkNDUgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZGM4OTRiNmViMzAyNDBiMDkyN2RiODExZjVmZTBiMjkgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sX2RjODk0YjZlYjMwMjQwYjA5MjdkYjgxMWY1ZmUwYjI5IiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBXZXN0ZXJuLUNlcm1hayAtIDc2OCBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNjNkMGE4MjEzNmE1NGIzNWEzODI2ODA3MTRhOGNkNDUuc2V0Q29udGVudChodG1sX2RjODk0YjZlYjMwMjQwYjA5MjdkYjgxMWY1ZmUwYjI5KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzY2ZGZiMjdmMzUxODRjYmFhN2IzOTRhYTI5MGJmYjljLmJpbmRQb3B1cChwb3B1cF82M2QwYTgyMTM2YTU0YjM1YTM4MjY4MDcxNGE4Y2Q0NSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9lZDkzNzkwNWY5YWM0YjUxYTlhMWIwN2YyNTE4Y2ViMiA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjg3NTQ3OCwtODcuNjg4MTM2XSwKICAgICAgICAgICAgICAgIDM0LjY1ODE4ODgwODEsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMDBhMWRlJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC42CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF80OTc2MTJlZmI3N2E0N2RiYTIxZmEwYmVlNzIwYzgwYik7CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzc2ODU5MzNkMDE5ZjRhYTU4M2U2MWEyZjQ2MmFiYmQ5ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzUzNDZiYzVjYTBiMzQ3OThhMzFjYzY0ZTk1NWM1NzZlID0gJCgnICAgICAgICAgPGRpdiBpZD0iaHRtbF81MzQ2YmM1Y2EwYjM0Nzk4YTMxY2M2NGU5NTVjNTc2ZSIgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPiAgICAgICAgICAgICAgICAgV2VzdGVybi1Gb3Jlc3QgUGFyayAtIDEyMDEgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzc2ODU5MzNkMDE5ZjRhYTU4M2U2MWEyZjQ2MmFiYmQ5LnNldENvbnRlbnQoaHRtbF81MzQ2YmM1Y2EwYjM0Nzk4YTMxY2M2NGU5NTVjNTc2ZSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl9lZDkzNzkwNWY5YWM0YjUxYTlhMWIwN2YyNTE4Y2ViMi5iaW5kUG9wdXAocG9wdXBfNzY4NTkzM2QwMTlmNGFhNTgzZTYxYTJmNDYyYWJiZDkpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfYzNiZThkYTM5OTJmNDUzNDkwMGMwMDM1ZjI3M2ZiMjUgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS44MDQ4MDU4MDc2LC04Ny42ODQxNjldLAogICAgICAgICAgICAgICAgNTMuNjY5ODY2ODUyNiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyNmOTQ2MWMnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNmOTQ2MWMnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfYzI0YjY2YTIyY2IyNDJjMjljNzFkZmRhOTM0MTVlOTUgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfYWQxM2IwOTQyMGI1NGZjNWFlMTM4YTc3MDA5NmI3MjEgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sX2FkMTNiMDk0MjBiNTRmYzVhZTEzOGE3NzAwOTZiNzIxIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBXZXN0ZXJuLU9yYW5nZSAtIDI4ODAgZGFpbHkgcmlkZXJzIChhdmcpPC9kaXY+ICAgICAgICAgICAgICAgICAnKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2MyNGI2NmEyMmNiMjQyYzI5YzcxZGZkYTkzNDE1ZTk1LnNldENvbnRlbnQoaHRtbF9hZDEzYjA5NDIwYjU0ZmM1YWUxMzhhNzcwMDk2YjcyMSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl9jM2JlOGRhMzk5MmY0NTM0OTAwYzAwMzVmMjczZmIyNS5iaW5kUG9wdXAocG9wdXBfYzI0YjY2YTIyY2IyNDJjMjljNzFkZmRhOTM0MTVlOTUpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfZDkzMjU3NGI0MDU0NDMwOTkyMzdjMWIwZDRlY2RkOWIgPSBMLmNpcmNsZSgKICAgICAgICAgICAgICAgIFs0MS45MTYxNTcsLTg3LjY4NzA2NF0sCiAgICAgICAgICAgICAgICA1OS45MzAwNDI2NTAxLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzAwYTFkZScsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzAwYTFkZScsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfNDk3NjEyZWZiNzdhNDdkYmEyMWZhMGJlZTcyMGM4MGIpOwogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8wOGYwZGIxMzlkZTk0ODlmOGFhZTMzNWMyYzViOWFjOSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9mMTUyOTgzMDViMmQ0NjRmOTJkZDk4NjgwMmE0YmEyMCA9ICQoJyAgICAgICAgIDxkaXYgaWQ9Imh0bWxfZjE1Mjk4MzA1YjJkNDY0ZjkyZGQ5ODY4MDJhNGJhMjAiICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij4gICAgICAgICAgICAgICAgIFdlc3Rlcm4vTWlsd2F1a2VlIC0gMzU5MSBkYWlseSByaWRlcnMgKGF2Zyk8L2Rpdj4gICAgICAgICAgICAgICAgICcpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMDhmMGRiMTM5ZGU5NDg5ZjhhYWUzMzVjMmM1YjlhYzkuc2V0Q29udGVudChodG1sX2YxNTI5ODMwNWIyZDQ2NGY5MmRkOTg2ODAyYTRiYTIwKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2Q5MzI1NzRiNDA1NDQzMDk5MjM3YzFiMGQ0ZWNkZDliLmJpbmRQb3B1cChwb3B1cF8wOGYwZGIxMzlkZTk0ODlmOGFhZTMzNWMyYzViOWFjOSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl83MThlYjMxZTU4MTE0MzY0YTE1M2U4ODk5MDk0ZjFlYiA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQxLjk2Mzk3NzU1NzcsLTg3LjY1NzUzNTkwNTVdLAogICAgICAgICAgICAgICAgNzAuMDAxMzM3Mjc5MywKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyNjNjBjMzAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNjNjBjMzAnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzQ5NzYxMmVmYjc3YTQ3ZGJhMjFmYTBiZWU3MjBjODBiKTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfN2U1Nzk1Yjg0ZmRjNDg3ZWI2MmMyY2M2MDNiMjZlYzYgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfODNjYzYyZDJhMzE1NDk1MmI0Zjg4YjkyM2FlNGE0MjIgPSAkKCcgICAgICAgICA8ZGl2IGlkPSJodG1sXzgzY2M2MmQyYTMxNTQ5NTJiNGY4OGI5MjNhZTRhNDIyIiAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+ICAgICAgICAgICAgICAgICBXaWxzb24gLSA0OTAwIGRhaWx5IHJpZGVycyAoYXZnKTwvZGl2PiAgICAgICAgICAgICAgICAgJylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF83ZTU3OTViODRmZGM0ODdlYjYyYzJjYzYwM2IyNmVjNi5zZXRDb250ZW50KGh0bWxfODNjYzYyZDJhMzE1NDk1MmI0Zjg4YjkyM2FlNGE0MjIpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfNzE4ZWIzMWU1ODExNDM2NGExNTNlODg5OTA5NGYxZWIuYmluZFBvcHVwKHBvcHVwXzdlNTc5NWI4NGZkYzQ4N2ViNjJjMmNjNjAzYjI2ZWM2KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIDwvc2NyaXB0PgogICAgICAgIA==" style="position:absolute;width:100%;height:100%;left:0;top:0;"></iframe></div></div>



Great! We now have a colored map where the area of each dot tells us the average ridership (over the entire time period) and the color of each dot tells us whether the line stops at that location. We can also click on each dot to get the stop name and the exact average ridership.

We can use this same technique to size the dots based on other factors like growth rate or by looking only at the last year's worth of data, quite easily with a few lines of modification.

Adding locations of interest such as existing stores and potential new locations provides rich possibilities for deliverables that are easily interpretable and actionable.
